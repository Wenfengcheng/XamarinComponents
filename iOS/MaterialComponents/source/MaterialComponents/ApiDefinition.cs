using System;
using CoreAnimation;
using CoreGraphics;
using Foundation;
using ObjCRuntime;
using UIKit;

using NSTextAlignment = UIKit.UITextAlignment;

namespace MaterialComponents {
	// @interface MDCAnimationTiming (CAMediaTimingFunction)
	[Static]
	interface CAMediaTimingFunctionAnimationTiming {
		// +(CAMediaTimingFunction * _Nullable)mdc_functionWithType:(MDCAnimationTimingFunction)type;
		[Static]
		[return: NullAllowed]
		[Export ("mdc_functionWithType:")]
		CAMediaTimingFunction GetFunction (AnimationTimingFunction type);
	}

	[Static]
	interface MaterialComponentsConstants {
		// extern double MaterialComponentsVersionNumber;
		[Field ("MaterialComponentsVersionNumber", "__Internal")]
		double VersionNumber { get; }

		// extern const unsigned char [] MaterialComponentsVersionString;
		[Internal]
		[Field ("MaterialComponentsVersionString", "__Internal")]
		IntPtr _VersionString { get; }
	}

	// @interface MDCActivityIndicator : UIView
	[BaseType (typeof (UIView),
		   Name = "MDCActivityIndicator",
		   Delegates = new [] { "Delegate" },
		   Events = new [] { typeof (ActivityIndicatorDelegate) })]
	interface ActivityIndicator {
		// @property (nonatomic, weak) id<MDCActivityIndicatorDelegate> _Nullable delegate;
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		IActivityIndicatorDelegate Delegate { get; set; }

		// @property (getter = isAnimating, assign, nonatomic) BOOL animating;
		[Export ("animating")]
		bool Animating { [Bind ("isAnimating")] get; set; }

		// @property (assign, nonatomic) CGFloat radius __attribute__((annotate("ui_appearance_selector")));
		[Export ("radius")]
		nfloat Radius { get; set; }

		// @property (assign, nonatomic) CGFloat strokeWidth __attribute__((annotate("ui_appearance_selector")));
		[Export ("strokeWidth")]
		nfloat StrokeWidth { get; set; }

		// @property (assign, nonatomic) BOOL trackEnabled;
		[Export ("trackEnabled")]
		bool TrackEnabled { get; set; }

		// @property (assign, nonatomic) MDCActivityIndicatorMode indicatorMode;
		[Export ("indicatorMode", ArgumentSemantic.Assign)]
		ActivityIndicatorMode IndicatorMode { get; set; }

		// -(void)setIndicatorMode:(MDCActivityIndicatorMode)mode animated:(BOOL)animated;
		[Export ("setIndicatorMode:animated:")]
		void SetIndicatorMode (ActivityIndicatorMode mode, bool animated);

		// @property (assign, nonatomic) float progress;
		[Export ("progress")]
		float Progress { get; set; }

		// -(void)setProgress:(float)progress animated:(BOOL)animated;
		[Export ("setProgress:animated:")]
		void SetProgress (float progress, bool animated);

		// @property (copy, nonatomic) NSArray<UIColor *> * _Nonnull cycleColors __attribute__((annotate("ui_appearance_selector")));
		[Export ("cycleColors", ArgumentSemantic.Copy)]
		UIColor [] CycleColors { get; set; }

		// -(void)startAnimating;
		[Export ("startAnimating")]
		void StartAnimating ();

		// -(void)startAnimatingWithTransition:(MDCActivityIndicatorTransition * _Nonnull)startTransition cycleStartIndex:(NSInteger)cycleStartIndex;
		[Export ("startAnimatingWithTransition:cycleStartIndex:")]
		void StartAnimating (ActivityIndicatorTransition startTransition, nint cycleStartIndex);

		// -(void)stopAnimating;
		[Export ("stopAnimating")]
		void StopAnimating ();

		// -(void)stopAnimatingWithTransition:(MDCActivityIndicatorTransition * _Nonnull)stopTransition;
		[Export ("stopAnimatingWithTransition:")]
		void StopAnimatingWithTransition (ActivityIndicatorTransition stopTransition);
	}

	interface IActivityIndicatorDelegate { }

	// @protocol MDCActivityIndicatorDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "MDCActivityIndicatorDelegate")]
	interface ActivityIndicatorDelegate {
		// @optional -(void)activityIndicatorAnimationDidFinish:(MDCActivityIndicator * _Nonnull)activityIndicator;
		[EventArgs ("ActivityIndicatorFinished")]
		[EventName ("AnimationFinished")]
		[Export ("activityIndicatorAnimationDidFinish:")]
		void AnimationDidFinish (ActivityIndicator activityIndicator);

		// @optional -(void)activityIndicatorModeTransitionDidFinish:(MDCActivityIndicator * _Nonnull)activityIndicator;
		[EventArgs ("ActivityIndicatorFinished")]
		[EventName ("ModeTransitionFinished")]
		[Export ("activityIndicatorModeTransitionDidFinish:")]
		void ModeTransitionDidFinish (ActivityIndicator activityIndicator);
	}

	// typedef void (^MDCActivityIndicatorAnimation)(CGFloat, CGFloat);
	delegate void ActivityIndicatorAnimationHandler (nfloat strokeStart, nfloat strokeEnd);

	// @interface MDCActivityIndicatorTransition : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCActivityIndicatorTransition")]
	interface ActivityIndicatorTransition {
		// @property (copy, nonatomic) MDCActivityIndicatorAnimation _Nonnull animation;
		[Export ("animation", ArgumentSemantic.Copy)]
		ActivityIndicatorAnimationHandler Animation { get; set; }

		// @property (copy, nonatomic) void (^ _Nullable)(void) completion;
		[NullAllowed]
		[Export ("completion", ArgumentSemantic.Copy)]
		Action Completion { get; set; }

		// @property (assign, nonatomic) NSTimeInterval duration;
		[Export ("duration")]
		double Duration { get; set; }

		// -(instancetype _Nonnull)initWithAnimation:(MDCActivityIndicatorAnimation _Nonnull)animation __attribute__((objc_designated_initializer));
		[Export ("initWithAnimation:")]
		[DesignatedInitializer]
		IntPtr Constructor (ActivityIndicatorAnimationHandler animation);
	}

	// @interface MDCActivityIndicatorColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCActivityIndicatorColorThemer")]
	interface ActivityIndicatorColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toActivityIndicator:(MDCActivityIndicator * _Nonnull)activityIndicator;
		[Static]
		[Export ("applySemanticColorScheme:toActivityIndicator:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, ActivityIndicator activityIndicator);

		// +(void)applyColorScheme:(id<MDCColorScheme> _Nonnull)colorScheme toActivityIndicator:(MDCActivityIndicator * _Nonnull)activityIndicator;
		[Obsolete ("This method will soon be deprecated. Consider using ApplySemanticColorScheme method instead.")]
		[Static]
		[Export ("applyColorScheme:toActivityIndicator:")]
		void ApplyColorScheme (IColorScheme colorScheme, ActivityIndicator activityIndicator);
	}

	// @interface MDCAlertColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCAlertColorThemer")]
	interface AlertColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toAlertController:(MDCAlertController * _Nonnull)alertController;
		[Static]
		[Export ("applySemanticColorScheme:toAlertController:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, AlertController alertController);

		// +(void)applyColorScheme:(id<MDCColorScheme> _Nonnull)colorScheme;
		[Obsolete ("This method will soon be deprecated. Consider using ApplySemanticColorScheme method instead.")]
		[Static]
		[Export ("applyColorScheme:")]
		void ApplyColorScheme (IColorScheme colorScheme);
	}

	// @interface MDCAlertController : UIViewController
	[BaseType (typeof (UIViewController), Name = "MDCAlertController")]
	interface AlertController {
		// +(instancetype _Nonnull)alertControllerWithTitle:(NSString * _Nullable)title message:(NSString * _Nullable)message;
		[Static]
		[Export ("alertControllerWithTitle:message:")]
		AlertController Create ([NullAllowed] string title, [NullAllowed] string message);

		// -(void)addAction:(MDCAlertAction * _Nonnull)action;
		[Export ("addAction:")]
		void AddAction (AlertAction action);

		// @property (readonly, nonatomic) NSArray<MDCAlertAction *> * _Nonnull actions;
		[Export ("actions")]
		AlertAction [] Actions { get; }

		// @property (nonatomic, strong) UIFont * _Nullable titleFont;
		[NullAllowed]
		[Export ("titleFont", ArgumentSemantic.Strong)]
		UIFont TitleFont { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable titleColor;
		[NullAllowed]
		[Export ("titleColor", ArgumentSemantic.Strong)]
		UIColor TitleColor { get; set; }

		// @property (assign, nonatomic) NSTextAlignment titleAlignment;
		[Export ("titleAlignment", ArgumentSemantic.Assign)]
		NSTextAlignment TitleAlignment { get; set; }

		// @property (nonatomic, strong) UIImage * _Nullable titleIcon;
		[NullAllowed, Export ("titleIcon", ArgumentSemantic.Strong)]
		UIImage TitleIcon { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable titleIconTintColor;
		[NullAllowed, Export ("titleIconTintColor", ArgumentSemantic.Strong)]
		UIColor TitleIconTintColor { get; set; }

		// @property (nonatomic, strong) UIFont * _Nullable messageFont;
		[NullAllowed]
		[Export ("messageFont", ArgumentSemantic.Strong)]
		UIFont MessageFont { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable messageColor;
		[NullAllowed]
		[Export ("messageColor", ArgumentSemantic.Strong)]
		UIColor MessageColor { get; set; }

		// b/117717380: Will be deprecated
		// @property (nonatomic, strong) UIFont * _Nullable buttonFont;
		[NullAllowed]
		[Export ("buttonFont", ArgumentSemantic.Strong)]
		UIFont ButtonFont { get; set; }

		// b/117717380: Will be deprecated
		// @property (nonatomic, strong) UIColor * _Nullable buttonTitleColor;
		[NullAllowed]
		[Export ("buttonTitleColor", ArgumentSemantic.Strong)]
		UIColor ButtonTitleColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable scrimColor;
		[NullAllowed, Export ("scrimColor", ArgumentSemantic.Strong)]
		UIColor ScrimColor { get; set; }

		// @property (assign, nonatomic) CGFloat cornerRadius;
		[Export ("cornerRadius")]
		nfloat CornerRadius { get; set; }

		// @property (assign, nonatomic) MDCShadowElevation elevation;
		[Export ("elevation")]
		nfloat Elevation { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable title;
		[New]
		[NullAllowed]
		[Export ("title")]
		string Title { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable message;
		[NullAllowed]
		[Export ("message")]
		string Message { get; set; }

		// @property (readwrite, nonatomic, setter = mdc_setAdjustsFontForContentSizeCategory:) BOOL mdc_adjustsFontForContentSizeCategory __attribute__((annotate("ui_appearance_selector")));
		[Export ("mdc_adjustsFontForContentSizeCategory")]
		bool MdcAdjustsFontForContentSizeCategory { get; [Bind ("mdc_setAdjustsFontForContentSizeCategory:")] set; }
	}

	// typedef void (^MDCActionHandler)(MDCAlertAction * _Nonnull);
	delegate void ActionHandler (AlertAction action);

	// @interface MDCAlertAction : NSObject <NSCopying, UIAccessibilityIdentification>
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCAlertAction")]
	interface AlertAction : INSCopying, IUIAccessibilityIdentification {
		// +(instancetype _Nonnull)actionWithTitle:(NSString * _Nonnull)title handler:(MDCActionHandler _Nullable)handler;
		[Static]
		[Export ("actionWithTitle:handler:")]
		AlertAction Create (string title, [NullAllowed] ActionHandler handler);

		// +(instancetype _Nonnull)actionWithTitle:(NSString * _Nonnull)title emphasis:(MDCActionEmphasis)emphasis handler:(MDCActionHandler _Nullable)handler;
		[Static]
		[Export ("actionWithTitle:emphasis:handler:")]
		AlertAction Create (string title, ActionEmphasis emphasis, [NullAllowed] ActionHandler handler);

		// @property (readonly, nonatomic) NSString * _Nullable title;
		[NullAllowed]
		[Export ("title")]
		string Title { get; }

		// @property (readonly, nonatomic) MDCActionEmphasis emphasis;
		[Export ("emphasis")]
		ActionEmphasis Emphasis { get; }

		// @property (copy, nonatomic) NSString * _Nullable accessibilityIdentifier;
		[NullAllowed, Export ("accessibilityIdentifier")]
		new string AccessibilityIdentifier { get; set; }
	}

	// @interface MDCAlertControllerView : UIView
	[BaseType (typeof (UIView), Name = "MDCAlertControllerView")]
	interface AlertControllerView {
		// @property (nonatomic, strong) UIFont * _Nullable titleFont __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("titleFont", ArgumentSemantic.Strong)]
		UIFont TitleFont { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable titleColor __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("titleColor", ArgumentSemantic.Strong)]
		UIColor TitleColor { get; set; }
		
		// @property (assign, nonatomic) NSTextAlignment titleAlignment;
		[Export ("titleAlignment", ArgumentSemantic.Assign)]
		NSTextAlignment TitleAlignment { get; set; }

		// @property (nonatomic, strong) UIImage * _Nullable titleIcon;
		[NullAllowed, Export ("titleIcon", ArgumentSemantic.Strong)]
		UIImage TitleIcon { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable titleIconTintColor;
		[NullAllowed, Export ("titleIconTintColor", ArgumentSemantic.Strong)]
		UIColor TitleIconTintColor { get; set; }

		// @property (nonatomic, strong) UIFont * _Nullable messageFont __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("messageFont", ArgumentSemantic.Strong)]
		UIFont MessageFont { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable messageColor __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("messageColor", ArgumentSemantic.Strong)]
		UIColor MessageColor { get; set; }

		// @property (nonatomic, strong) UIFont * _Nullable buttonFont __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("buttonFont", ArgumentSemantic.Strong)]
		UIFont ButtonFont { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable buttonColor __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("buttonColor", ArgumentSemantic.Strong)]
		UIColor ButtonColor { get; set; }
		
		// @property (assign, nonatomic) CGFloat cornerRadius;
		[Export ("cornerRadius")]
		nfloat CornerRadius { get; set; }

		// @property (readwrite, nonatomic, setter = mdc_setAdjustsFontForContentSizeCategory:) BOOL mdc_adjustsFontForContentSizeCategory __attribute__((annotate("ui_appearance_selector")));
		[Export ("mdc_adjustsFontForContentSizeCategory")]
		bool MdcAdjustsFontForContentSizeCategory { get; [Bind ("mdc_setAdjustsFontForContentSizeCategory:")] set; }

		//
		// From ButtonForAction (MDCAlertController)
		//

		// -(MDCButton * _Nullable)buttonForAction:(MDCAlertAction * _Nonnull)action;
		[Export ("buttonForAction:")]
		[return: NullAllowed]
		Button GetButton (AlertAction action);
	}

	// @interface MDCShapeCategory : NSObject
	[BaseType (typeof(NSObject), Name = "MDCShapeCategory")]
	interface ShapeCategory {
		// @property (nonatomic, strong) MDCCornerTreatment * topLeftCorner;
		[Export ("topLeftCorner", ArgumentSemantic.Strong)]
		CornerTreatment TopLeftCorner { get; set; }

		// @property (nonatomic, strong) MDCCornerTreatment * topRightCorner;
		[Export ("topRightCorner", ArgumentSemantic.Strong)]
		CornerTreatment TopRightCorner { get; set; }

		// @property (nonatomic, strong) MDCCornerTreatment * bottomLeftCorner;
		[Export ("bottomLeftCorner", ArgumentSemantic.Strong)]
		CornerTreatment BottomLeftCorner { get; set; }

		// @property (nonatomic, strong) MDCCornerTreatment * bottomRightCorner;
		[Export ("bottomRightCorner", ArgumentSemantic.Strong)]
		CornerTreatment BottomRightCorner { get; set; }

		// -(instancetype)initCornersWithFamily:(MDCShapeCornerFamily)cornerFamily andSize:(CGFloat)cornerSize;
		[Export ("initCornersWithFamily:andSize:")]
		IntPtr Constructor (ShapeCornerFamily cornerFamily, nfloat cornerSize);
	}

	interface IShapeScheming { }

	// @protocol MDCShapeScheming
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof(NSObject), Name = "MDCShapeScheming")]
	interface ShapeScheming {
		// @required @property (readonly, nonatomic) MDCShapeCategory * _Nonnull smallComponentShape;
		[Abstract]
		[Export ("smallComponentShape")]
		ShapeCategory SmallComponentShape { get; }

		// @required @property (readonly, nonatomic) MDCShapeCategory * _Nonnull mediumComponentShape;
		[Abstract]
		[Export ("mediumComponentShape")]
		ShapeCategory MediumComponentShape { get; }

		// @required @property (readonly, nonatomic) MDCShapeCategory * _Nonnull largeComponentShape;
		[Abstract]
		[Export ("largeComponentShape")]
		ShapeCategory LargeComponentShape { get; }
	}
	
	// @interface MDCShapeScheme : NSObject <MDCShapeScheming>
	[BaseType (typeof(NSObject), Name = "MDCShapeScheme")]
	interface ShapeScheme : ShapeScheming {
		// @property (readwrite, nonatomic) MDCShapeCategory * _Nonnull smallComponentShape;
		[Export ("smallComponentShape", ArgumentSemantic.Assign)]
		new ShapeCategory SmallComponentShape { get; set; }

		// @property (readwrite, nonatomic) MDCShapeCategory * _Nonnull mediumComponentShape;
		[Export ("mediumComponentShape", ArgumentSemantic.Assign)]
		new ShapeCategory MediumComponentShape { get; set; }

		// @property (readwrite, nonatomic) MDCShapeCategory * _Nonnull largeComponentShape;
		[Export ("largeComponentShape", ArgumentSemantic.Assign)]
		new ShapeCategory LargeComponentShape { get; set; }

		// -(instancetype _Nonnull)initWithDefaults:(MDCShapeSchemeDefaults)defaults;
		[Export ("initWithDefaults:")]
		IntPtr Constructor (ShapeSchemeDefaults defaults);
	}

	interface IAlertScheming { }

	// @protocol MDCAlertScheming
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof(NSObject), Name = "MDCAlertScheming")]
	interface AlertScheming {
		// @required @property (readonly, nonatomic) id<MDCColorScheming> _Nonnull colorScheme;
		[Abstract]
		[Export ("colorScheme")]
		IColorScheming ColorScheme { get; }

		// @required @property (readonly, nonatomic) id<MDCTypographyScheming> _Nonnull typographyScheme;
		[Abstract]
		[Export ("typographyScheme")]
		ITypographyScheming TypographyScheme { get; }

		// @required @property (readonly, nonatomic) id<MDCButtonScheming> _Nonnull buttonScheme;
		[Abstract]
		[Export ("buttonScheme")]
		IButtonScheming ButtonScheme { get; }

		// @required @property (readonly, nonatomic) CGFloat cornerRadius;
		[Abstract]
		[Export ("cornerRadius")]
		nfloat CornerRadius { get; }

		// @required @property (readonly, nonatomic) CGFloat elevation;
		[Abstract]
		[Export ("elevation")]
		nfloat Elevation { get; }
	}

	// @interface MDCAlertScheme : NSObject <MDCAlertScheming>
	[BaseType (typeof(NSObject), Name = "MDCAlertScheme")]
	interface AlertScheme : AlertScheming {
		// @property (readwrite, nonatomic) id<MDCColorScheming> _Nonnull colorScheme;
		[Export ("colorScheme", ArgumentSemantic.Assign)]
		new IColorScheming ColorScheme { get; set; }

		// @property (readwrite, nonatomic) id<MDCTypographyScheming> _Nonnull typographyScheme;
		[Export ("typographyScheme", ArgumentSemantic.Assign)]
		new ITypographyScheming TypographyScheme { get; set; }

		// @property (readwrite, nonatomic) id<MDCButtonScheming> _Nonnull buttonScheme;
		[Export ("buttonScheme", ArgumentSemantic.Assign)]
		new IButtonScheming ButtonScheme { get; set; }

		// @property (readwrite, nonatomic) CGFloat cornerRadius;
		[Export ("cornerRadius")]
		new nfloat CornerRadius { get; set; }

		// @property (readwrite, nonatomic) MDCShadowElevation elevation;
		[Export ("elevation")]
		new nfloat Elevation { get; set; }
	}

	// @interface MDCAlertControllerThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof(NSObject), Name = "MDCAlertControllerThemer")]
	interface AlertControllerThemer {
		// +(void)applyScheme:(id<MDCAlertScheming> _Nonnull)alertScheme toAlertController:(MDCAlertController * _Nonnull)alertController;
		[Static]
		[Export ("applyScheme:toAlertController:")]
		void ApplyScheme (IAlertScheming alertScheme, AlertController alertController);
	}

	// @interface MDCAlertTypographyThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCAlertTypographyThemer")]
	interface AlertTypographyThemer {
		// +(void)applyTypographyScheme:(id<MDCTypographyScheming> _Nonnull)typographyScheme toAlertController:(MDCAlertController * _Nonnull)alertController;
		[Static]
		[Export ("applyTypographyScheme:toAlertController:")]
		void ApplyTypographyScheme (ITypographyScheming typographyScheme, AlertController alertController);
	}

	// @interface MDCAppBarColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCAppBarColorThemer")]
	interface AppBarColorThemer {
		// +(void)applyColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toAppBarViewController:(MDCAppBarViewController * _Nonnull)appBarViewController;
		[Static]
		[Export ("applyColorScheme:toAppBarViewController:")]
		void ApplyColorScheme (IColorScheming colorScheme, AppBarViewController appBarViewController);

		// +(void)applySurfaceVariantWithColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toAppBarViewController:(MDCAppBarViewController * _Nonnull)appBarViewController;
		[Static]
		[Export ("applySurfaceVariantWithColorScheme:toAppBarViewController:")]
		void ApplySurfaceVariant (IColorScheming colorScheme, AppBarViewController appBarViewController);

		//
		// From ToBeDeprecated (MDCAppBarColorThemer)
		//

		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toAppBar:(MDCAppBar * _Nonnull)appBar;
		[Obsolete ("To be deprecated.")]
		[Static]
		[Export ("applySemanticColorScheme:toAppBar:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, AppBar appBar);

		// +(void)applySurfaceVariantWithColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toAppBar:(MDCAppBar * _Nonnull)appBar;
		[Obsolete ("To be deprecated.")]
		[Static]
		[Export ("applySurfaceVariantWithColorScheme:toAppBar:")]
		void ApplySurfaceVariant (IColorScheming colorScheme, AppBar appBar);

		// +(void)applyColorScheme:(id<MDCColorScheme> _Nonnull)colorScheme toAppBar:(MDCAppBar * _Nonnull)appBar;
		[Obsolete ("This method will soon be deprecated. Consider using ApplySemanticColorScheme method instead.")]
		[Static]
		[Export ("applyColorScheme:toAppBar:")]
		void ApplyColorScheme (IColorScheme colorScheme, AppBar appBar);
	}

	// @interface MDCAppBarContainerViewController : UIViewController
	[DisableDefaultCtor]
	[BaseType (typeof (UIViewController), Name = "MDCAppBarContainerViewController")]
	interface AppBarContainerViewController {
		// -(instancetype _Nonnull)initWithContentViewController:(UIViewController * _Nonnull)contentViewController __attribute__((objc_designated_initializer));
		[DesignatedInitializer]
		[Export ("initWithContentViewController:")]
		IntPtr Constructor (UIViewController contentViewController);

		// @property (readonly, nonatomic, strong) MDCAppBarViewController * _Nonnull appBarViewController;
		[Export ("appBarViewController", ArgumentSemantic.Strong)]
		AppBarViewController AppBarViewController { get; }

		// @property (readonly, nonatomic, strong) UIViewController * _Nonnull contentViewController;
		[Export ("contentViewController", ArgumentSemantic.Strong)]
		UIViewController ContentViewController { get; }

		// @property (getter = isTopLayoutGuideAdjustmentEnabled, nonatomic) BOOL topLayoutGuideAdjustmentEnabled;
		[Export ("topLayoutGuideAdjustmentEnabled")]
		bool TopLayoutGuideAdjustmentEnabled { [Bind ("isTopLayoutGuideAdjustmentEnabled")] get; set; }

		// @property (readonly, nonatomic, strong) MDCAppBar * _Nonnull appBar;
		[Obsolete ("This API will eventually be deprecated. Use AppBarViewController property instead.")]
		[Export ("appBar", ArgumentSemantic.Strong)]
		AppBar AppBar { get; }
	}

	interface IAppBarNavigationControllerDelegate { }

	// @protocol MDCAppBarNavigationControllerDelegate <UINavigationControllerDelegate>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "MDCAppBarNavigationControllerDelegate")]
	interface AppBarNavigationControllerDelegate : IUINavigationControllerDelegate {
		// @optional -(void)appBarNavigationController:(MDCAppBarNavigationController * _Nonnull)navigationController willAddAppBarViewController:(MDCAppBarViewController * _Nonnull)appBarViewController asChildOfViewController:(UIViewController * _Nonnull)viewController;
		[EventArgs ("AppBarNavigationControllerWillAddAppBarViewController")]
		[Export ("appBarNavigationController:willAddAppBarViewController:asChildOfViewController:")]
		void WillAddAppBarViewController (AppBarNavigationController navigationController, AppBarViewController appBarViewController, UIViewController viewController);

		// @optional -(void)appBarNavigationController:(MDCAppBarNavigationController * _Nonnull)navigationController willAddAppBar:(MDCAppBar * _Nonnull)appBar asChildOfViewController:(UIViewController * _Nonnull)viewController;
		[Obsolete ("This method will soon be deprecated. Please use WillAddAppBarViewController method instead.")]
		[EventArgs ("AppBarNavigationControllerWillAddAppBar")]
		[Export ("appBarNavigationController:willAddAppBar:asChildOfViewController:")]
		void WillAddAppBar (AppBarNavigationController navigationController, AppBar appBar, UIViewController viewController);
	}

	// @interface MDCAppBarNavigationController : UINavigationController
	[BaseType (typeof (UINavigationController), Name = "MDCAppBarNavigationController")]
	interface AppBarNavigationController {
		// @property (nonatomic, weak) id<MDCAppBarNavigationControllerDelegate> _Nullable delegate;
		[New]
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		IAppBarNavigationControllerDelegate Delegate { get; set; }

		// -(MDCAppBarViewController * _Nullable)appBarViewControllerForViewController:(UIViewController * _Nonnull)viewController;
		[return: NullAllowed]
		[Export ("appBarViewControllerForViewController:")]
		AppBarViewController GetAppBarViewController (UIViewController viewController);

		// -(MDCAppBar * _Nullable)appBarForViewController:(UIViewController * _Nonnull)viewController;
		[Obsolete ("This method will eventually be deprecated. Use GetAppBarViewController method instead.")]
		[return: NullAllowed]
		[Export ("appBarForViewController:")]
		AppBar GetAppBar (UIViewController viewController);
	}

	// @interface MDCAppBarTypographyThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCAppBarTypographyThemer")]
	interface AppBarTypographyThemer {
		// +(void)applyTypographyScheme:(id<MDCTypographyScheming> _Nonnull)typographyScheme toAppBarViewController:(MDCAppBarViewController * _Nonnull)appBarViewController;
		[Static]
		[Export ("applyTypographyScheme:toAppBarViewController:")]
		void ApplyTypographyScheme (ITypographyScheming typographyScheme, AppBarViewController appBarViewController);

		//
		// From ToBeDeprecated (MDCAppBarTypographyThemer)
		//

		// +(void)applyTypographyScheme:(id<MDCTypographyScheming> _Nonnull)typographyScheme toAppBar:(MDCAppBar * _Nonnull)appBar;
		[Obsolete ("To be deprecated.")]
		[Static]
		[Export ("applyTypographyScheme:toAppBar:")]
		void ApplyTypographyScheme (ITypographyScheming typographyScheme, AppBar appBar);
	}

	// @interface MDCAppBarViewController : MDCFlexibleHeaderViewController
	[BaseType (typeof (FlexibleHeaderViewController), Name = "MDCAppBarViewController")]
	interface AppBarViewController {
		// @property (nonatomic, strong) MDCNavigationBar * _Nonnull navigationBar;
		[Export ("navigationBar", ArgumentSemantic.Strong)]
		NavigationBar NavigationBar { get; set; }

		// @property (nonatomic, strong) MDCHeaderStackView * _Nonnull headerStackView;
		[Export ("headerStackView", ArgumentSemantic.Strong)]
		HeaderStackView HeaderStackView { get; set; }
	}

	// @interface MDCAppBar : NSObject
	[Obsolete ("This API will be deprecated in favor of AppBarViewController class.")]
	[BaseType (typeof (NSObject), Name = "MDCAppBar")]
	interface AppBar {
		// -(void)addSubviewsToParent;
		[Export ("addSubviewsToParent")]
		void AddSubviewsToParent ();

		// @property (readonly, nonatomic, strong) MDCFlexibleHeaderViewController * _Nonnull headerViewController;
		[Export ("headerViewController", ArgumentSemantic.Strong)]
		FlexibleHeaderViewController HeaderViewController { get; }

		// @property (readonly, nonatomic, strong) MDCAppBarViewController * _Nonnull appBarViewController;
		[Export ("appBarViewController", ArgumentSemantic.Strong)]
		AppBarViewController AppBarViewController { get; }

		// @property (readonly, nonatomic, strong) MDCNavigationBar * _Nonnull navigationBar;
		[Export ("navigationBar", ArgumentSemantic.Strong)]
		NavigationBar NavigationBar { get; }

		// @property (readonly, nonatomic, strong) MDCHeaderStackView * _Nonnull headerStackView;
		[Export ("headerStackView", ArgumentSemantic.Strong)]
		HeaderStackView HeaderStackView { get; }

		// @property (nonatomic) BOOL inferTopSafeAreaInsetFromViewController;
		[Export ("inferTopSafeAreaInsetFromViewController")]
		bool InferTopSafeAreaInsetFromViewController { get; set; }
	}

	// @interface MDCListColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof(NSObject), Name = "MDCListColorThemer")]
	interface ListColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming>)colorScheme toSelfSizingStereoCell:(MDCSelfSizingStereoCell *)cell;
		[Static]
		[Export ("applySemanticColorScheme:toSelfSizingStereoCell:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, SelfSizingStereoCell cell);

		// +(void)applySemanticColorScheme:(id<MDCColorScheming>)colorScheme toBaseCell:(MDCBaseCell *)cell;
		[Static]
		[Export ("applySemanticColorScheme:toBaseCell:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, BaseCell cell);
	}

	interface IListScheming { }

	// @protocol MDCListScheming
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof(NSObject), Name = "MDCListScheming")]
	interface ListScheming {
		// @required @property (readonly, nonatomic) id<MDCColorScheming> _Nonnull colorScheme;
		[Abstract]
		[Export ("colorScheme")]
		IColorScheming ColorScheme { get; }

		// @required @property (readonly, nonatomic) id<MDCTypographyScheming> _Nonnull typographyScheme;
		[Abstract]
		[Export ("typographyScheme")]
		ITypographyScheming TypographyScheme { get; }
	}

	// @interface MDCListScheme : NSObject <MDCListScheming>
	[BaseType (typeof(NSObject), Name = "MDCListScheme")]
	interface ListScheme : ListScheming {
		// @property (readwrite, nonatomic) id<MDCColorScheming> _Nonnull colorScheme;
		[Export ("colorScheme", ArgumentSemantic.Assign)]
		new IColorScheming ColorScheme { get; set; }

		// @property (readwrite, nonatomic) id<MDCTypographyScheming> _Nonnull typographyScheme;
		[Export ("typographyScheme", ArgumentSemantic.Assign)]
		new ITypographyScheming TypographyScheme { get; set; }
	}

	// @interface MDCListThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof(NSObject), Name = "MDCListThemer")]
	interface ListThemer {
		// +(void)applyScheme:(id<MDCListScheming>)scheme toSelfSizingStereoCell:(MDCSelfSizingStereoCell *)cell;
		[Static]
		[Export ("applyScheme:toSelfSizingStereoCell:")]
		void ApplyScheme (IListScheming scheme, SelfSizingStereoCell cell);

		// +(void)applyScheme:(id<MDCListScheming>)scheme toBaseCell:(MDCBaseCell *)cell;
		[Static]
		[Export ("applyScheme:toBaseCell:")]
		void ApplyScheme (IListScheming scheme, BaseCell cell);
	}

	// @interface MDCListTypographyThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof(NSObject), Name = "MDCListTypographyThemer")]
	interface ListTypographyThemer {
		// +(void)applyTypographyScheme:(id<MDCTypographyScheming>)typographyScheme toSelfSizingStereoCell:(MDCSelfSizingStereoCell *)cell;
		[Static]
		[Export ("applyTypographyScheme:toSelfSizingStereoCell:")]
		void ApplyTypographyScheme (ITypographyScheming typographyScheme, SelfSizingStereoCell cell);
	}

	// @interface MDCBaseCell : UICollectionViewCell
	[BaseType (typeof (UICollectionViewCell), Name = "MDCBaseCell")]
	interface BaseCell {
		// @property (assign, nonatomic) MDCShadowElevation elevation;
		[Export ("elevation")]
		nfloat Elevation { get; set; }

		// @property (nonatomic, strong) UIColor * _Nonnull inkColor;
		[Export ("inkColor", ArgumentSemantic.Strong)]
		UIColor InkColor { get; set; }
	}
	
	// @interface MDCSelfSizingStereoCell : MDCBaseCell
	[BaseType (typeof(BaseCell), Name = "MDCSelfSizingStereoCell")]
	interface SelfSizingStereoCell {
		// @property (readonly, nonatomic, strong) UIImageView * leadingImageView;
		[Export ("leadingImageView", ArgumentSemantic.Strong)]
		UIImageView LeadingImageView { get; }

		// @property (readonly, nonatomic, strong) UIImageView * trailingImageView;
		[Export ("trailingImageView", ArgumentSemantic.Strong)]
		UIImageView TrailingImageView { get; }

		// @property (readonly, nonatomic, strong) UILabel * titleLabel;
		[Export ("titleLabel", ArgumentSemantic.Strong)]
		UILabel TitleLabel { get; }

		// @property (readonly, nonatomic, strong) UILabel * detailLabel;
		[Export ("detailLabel", ArgumentSemantic.Strong)]
		UILabel DetailLabel { get; }

		// @property (readwrite, nonatomic, setter = mdc_setAdjustsFontForContentSizeCategory:) BOOL mdc_adjustsFontForContentSizeCategory;
		[Export ("mdc_adjustsFontForContentSizeCategory")]
		bool MdcAdjustsFontForContentSizeCategory { get; [Bind ("mdc_setAdjustsFontForContentSizeCategory:")] set; }
	}

	// @interface MDCBottomAppBarColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCBottomAppBarColorThemer")]
	interface BottomAppBarColorThemer {
		// +(void)applySurfaceVariantWithSemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toBottomAppBarView:(MDCBottomAppBarView * _Nonnull)bottomAppBarView;
		[Static]
		[Export ("applySurfaceVariantWithSemanticColorScheme:toBottomAppBarView:")]
		void ApplySurfaceVariant (IColorScheming colorScheme, BottomAppBarView bottomAppBarView);

		[Static]
		[Wrap ("ApplySurfaceVariant (colorScheme, bottomAppBarView)")]
		[Obsolete ("Use ApplySurfaceVariant instead.")]
		void ApplySurfaceVariantWithSemanticColorScheme (IColorScheming colorScheme, BottomAppBarView bottomAppBarView);

		//
		// From MDCBottomAppBarColorThemer (ToBeDeprecated)
		//

		// +(void)applyColorScheme:(id<MDCColorScheme> _Nonnull)colorScheme toBottomAppBarView:(MDCBottomAppBarView * _Nonnull)bottomAppBarView;
		[Obsolete ("This method will soon be deprecated. Use ApplySurfaceVariantWithSemanticColorScheme instead.")]
		[Static]
		[Export ("applyColorScheme:toBottomAppBarView:")]
		void ApplyColorScheme (IColorScheme colorScheme, BottomAppBarView bottomAppBarView);
	}

	// @interface MDCBottomAppBarView : UIView
	[BaseType (typeof (UIView), Name = "MDCBottomAppBarView")]
	interface BottomAppBarView {
		// @property (getter = isFloatingButtonHidden, assign, nonatomic) BOOL floatingButtonHidden;
		[Export ("floatingButtonHidden")]
		bool FloatingButtonHidden { [Bind ("isFloatingButtonHidden")] get; set; }

		// @property (assign, nonatomic) MDCBottomAppBarFloatingButtonElevation floatingButtonElevation;
		[Export ("floatingButtonElevation", ArgumentSemantic.Assign)]
		BottomAppBarFloatingButtonElevation FloatingButtonElevation { get; set; }

		// @property (assign, nonatomic) MDCBottomAppBarFloatingButtonPosition floatingButtonPosition;
		[Export ("floatingButtonPosition", ArgumentSemantic.Assign)]
		BottomAppBarFloatingButtonPosition FloatingButtonPosition { get; set; }

		// @property (readonly, nonatomic, strong) MDCFloatingButton * _Nonnull floatingButton;
		[Export ("floatingButton", ArgumentSemantic.Strong)]
		FloatingButton FloatingButton { get; }

		// @property (assign, nonatomic) CGFloat floatingButtonVerticalOffset;
		[Export ("floatingButtonVerticalOffset")]
		nfloat FloatingButtonVerticalOffset { get; set; }

		// @property (copy, nonatomic) NSArray<UIBarButtonItem *> * _Nullable leadingBarButtonItems;
		[NullAllowed]
		[Export ("leadingBarButtonItems", ArgumentSemantic.Copy)]
		UIBarButtonItem [] LeadingBarButtonItems { get; set; }

		// @property (copy, nonatomic) NSArray<UIBarButtonItem *> * _Nullable trailingBarButtonItems;
		[NullAllowed]
		[Export ("trailingBarButtonItems", ArgumentSemantic.Copy)]
		UIBarButtonItem [] TrailingBarButtonItems { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable barTintColor __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("barTintColor", ArgumentSemantic.Strong)]
		UIColor BarTintColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nonnull leadingBarItemsTintColor;
		[Export ("leadingBarItemsTintColor", ArgumentSemantic.Strong)]
		UIColor LeadingBarItemsTintColor { get; set; }

		 // @property (nonatomic, strong) UIColor * _Nonnull trailingBarItemsTintColor;
		[Export ("trailingBarItemsTintColor", ArgumentSemantic.Strong)]
		UIColor TrailingBarItemsTintColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable shadowColor __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("shadowColor", ArgumentSemantic.Strong)]
		UIColor ShadowColor { get; set; }

		// -(void)setFloatingButtonHidden:(BOOL)floatingButtonHidden animated:(BOOL)animated;
		[Export ("setFloatingButtonHidden:animated:")]
		void SetFloatingButtonHidden (bool floatingButtonHidden, bool animated);

		// -(void)setFloatingButtonElevation:(MDCBottomAppBarFloatingButtonElevation)floatingButtonElevation animated:(BOOL)animated;
		[Export ("setFloatingButtonElevation:animated:")]
		void SetFloatingButtonElevation (BottomAppBarFloatingButtonElevation floatingButtonElevation, bool animated);

		// -(void)setFloatingButtonPosition:(MDCBottomAppBarFloatingButtonPosition)floatingButtonPosition animated:(BOOL)animated;
		[Export ("setFloatingButtonPosition:animated:")]
		void SetFloatingButtonPosition (BottomAppBarFloatingButtonPosition floatingButtonPosition, bool animated);
	}

	// @interface MDCBottomDrawerColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof(NSObject), Name = "MDCBottomDrawerColorThemer")]
	interface BottomDrawerColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toBottomDrawer:(MDCBottomDrawerViewController * _Nonnull)bottomDrawer;
		[Static]
		[Export ("applySemanticColorScheme:toBottomDrawer:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, BottomDrawerViewController bottomDrawer);
	}

	interface IBottomDrawerHeader { }

	// @protocol MDCBottomDrawerHeader
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof(NSObject), Name = "MDCBottomDrawerHeader")]
	interface BottomDrawerHeader {
		// @optional -(void)updateDrawerHeaderTransitionRatio:(CGFloat)transitionToTopRatio;
		[Export ("updateDrawerHeaderTransitionRatio:")]
		void UpdateDrawerHeaderTransitionRatio (nfloat transitionToTopRatio);
	}

	// @interface MDCBottomDrawerPresentationController : UIPresentationController
	[BaseType (typeof(UIPresentationController),
		Name = "MDCBottomDrawerPresentationController",
		Delegates = new[] { "Delegate" },
		Events = new[] { typeof(BottomDrawerPresentationControllerDelegate) })]
	interface BottomDrawerPresentationController {
		// @property (nonatomic, weak) UIScrollView * _Nullable trackingScrollView;
		[NullAllowed, Export ("trackingScrollView", ArgumentSemantic.Weak)]
		UIScrollView TrackingScrollView { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable scrimColor;
		[NullAllowed, Export ("scrimColor", ArgumentSemantic.Strong)]
		UIColor ScrimColor { get; set; }

		// @property (nonatomic, weak) id<MDCBottomDrawerPresentationControllerDelegate> _Nullable delegate;
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		IBottomDrawerPresentationControllerDelegate Delegate { get; set; }

		// @property (getter = isTopHandleHidden, assign, nonatomic) BOOL topHandleHidden;
		[Export ("topHandleHidden")]
		bool TopHandleHidden { [Bind ("isTopHandleHidden")] get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable topHandleColor;
		[NullAllowed, Export ("topHandleColor", ArgumentSemantic.Strong)]
		UIColor TopHandleColor { get; set; }

		// @property (readonly, nonatomic) BOOL contentReachesFullscreen;
		[Export ("contentReachesFullscreen")]
		bool ContentReachesFullscreen { get; }

		// -(void)setContentOffsetY:(CGFloat)contentOffsetY animated:(BOOL)animated;
		[Export ("setContentOffsetY:animated:")]
		void SetContentOffsetY (nfloat contentOffsetY, bool animated);
	}

	interface IBottomDrawerPresentationControllerDelegate { }

	// @protocol MDCBottomDrawerPresentationControllerDelegate <UIAdaptivePresentationControllerDelegate>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof(NSObject), Name = "MDCBottomDrawerPresentationControllerDelegate")]
	interface BottomDrawerPresentationControllerDelegate : IUIAdaptivePresentationControllerDelegate {
		// @required -(void)bottomDrawerWillChangeState:(MDCBottomDrawerPresentationController * _Nonnull)presentationController drawerState:(MDCBottomDrawerState)drawerState;
		[EventArgs ("BottomDrawerPresentationControllerWillChangeState")]
		[Abstract]
		[Export ("bottomDrawerWillChangeState:drawerState:")]
		void WillChangeState (BottomDrawerPresentationController presentationController, BottomDrawerState drawerState);

		// @required -(void)bottomDrawerTopTransitionRatio:(MDCBottomDrawerPresentationController * _Nonnull)presentationController transitionRatio:(CGFloat)transitionRatio;
		[EventArgs ("BottomDrawerPresentationControllerTopTransitionRatio")]
		[Abstract]
		[Export ("bottomDrawerTopTransitionRatio:transitionRatio:")]
		void TopTransitionRatio (BottomDrawerPresentationController presentationController, nfloat transitionRatio);
	}

	// @interface MDCBottomDrawerTransitionController : NSObject <UIViewControllerAnimatedTransitioning, UIViewControllerTransitioningDelegate>
	[BaseType (typeof(NSObject), Name = "MDCBottomDrawerTransitionController")]
	interface BottomDrawerTransitionController : IUIViewControllerAnimatedTransitioning, IUIViewControllerTransitioningDelegate {
		// @property (nonatomic, weak) UIScrollView * _Nullable trackingScrollView;
		[NullAllowed, Export ("trackingScrollView", ArgumentSemantic.Weak)]
		UIScrollView TrackingScrollView { get; set; }
	}

	// @interface MDCBottomDrawerViewController : UIViewController <MDCBottomDrawerPresentationControllerDelegate>
	[BaseType (typeof(UIViewController), 
		Name = "MDCBottomDrawerViewController",
		Delegates = new[] { "Delegate" },
		Events = new[] { typeof(BottomDrawerViewControllerDelegate) })]
	interface BottomDrawerViewController : IBottomDrawerPresentationControllerDelegate {
		// @property (nonatomic) UIViewController * _Nullable contentViewController;
		[NullAllowed, Export ("contentViewController", ArgumentSemantic.Assign)]
		UIViewController ContentViewController { get; set; }

		// @property (nonatomic) UIViewController<MDCBottomDrawerHeader> * _Nullable headerViewController;
		[NullAllowed, Export ("headerViewController", ArgumentSemantic.Assign)]
		BottomDrawerHeader HeaderViewController { get; set; }

		// @property (nonatomic, weak) UIScrollView * _Nullable trackingScrollView;
		[NullAllowed, Export ("trackingScrollView", ArgumentSemantic.Weak)]
		UIScrollView TrackingScrollView { get; set; }

		// @property (readonly, nonatomic) MDCBottomDrawerState drawerState;
		[Export ("drawerState")]
		BottomDrawerState DrawerState { get; }

		// @property (nonatomic, strong) UIColor * _Nullable scrimColor;
		[NullAllowed, Export ("scrimColor", ArgumentSemantic.Strong)]
		UIColor ScrimColor { get; set; }

		// @property (getter = isTopHandleHidden, assign, nonatomic) BOOL topHandleHidden;
		[Export ("topHandleHidden")]
		bool TopHandleHidden { [Bind ("isTopHandleHidden")] get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable topHandleColor;
		[NullAllowed, Export ("topHandleColor", ArgumentSemantic.Strong)]
		UIColor TopHandleColor { get; set; }

		// @property (nonatomic, weak) id<MDCBottomDrawerViewControllerDelegate> _Nullable delegate;
		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		IBottomDrawerViewControllerDelegate Delegate { get; set; }

		// -(void)setTopCornersRadius:(CGFloat)radius forDrawerState:(MDCBottomDrawerState)drawerState;
		[Export ("setTopCornersRadius:forDrawerState:")]
		void SetTopCornersRadius (nfloat radius, BottomDrawerState drawerState);

		// -(CGFloat)topCornersRadiusForDrawerState:(MDCBottomDrawerState)drawerState;
		[Export ("topCornersRadiusForDrawerState:")]
		nfloat GetTopCornersRadius (BottomDrawerState drawerState);

		// -(void)setContentOffsetY:(CGFloat)contentOffsetY animated:(BOOL)animated;
		[Export ("setContentOffsetY:animated:")]
		void SetContentOffsetY (nfloat contentOffsetY, bool animated);
	}

	interface IBottomDrawerViewControllerDelegate { }

	// @protocol MDCBottomDrawerViewControllerDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof(NSObject), Name = "MDCBottomDrawerViewControllerDelegate")]
	interface BottomDrawerViewControllerDelegate {
		// @required -(void)bottomDrawerControllerDidChangeTopInset:(MDCBottomDrawerViewController * _Nonnull)controller topInset:(CGFloat)topInset;
		[EventArgs ("BottomDrawerViewControllerDidChangeTopInset")]
		[EventName ("TopInsetChanged")]
		[Abstract]
		[Export ("bottomDrawerControllerDidChangeTopInset:topInset:")]
		void DidChangeTopInset(BottomDrawerViewController controller, nfloat topInset);
	}

	// @interface MDCBottomNavigationBar : UIView
	[BaseType (typeof (UIView),
		   Name = "MDCBottomNavigationBar",
		   Delegates = new [] { "Delegate" },
		   Events = new [] { typeof (BottomNavigationBarDelegate) })]
	interface BottomNavigationBar {
		// @property (nonatomic, weak) id<MDCBottomNavigationBarDelegate> _Nullable delegate;
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		IBottomNavigationBarDelegate Delegate { get; set; }

		// @property (assign, nonatomic) MDCBottomNavigationBarTitleVisibility titleVisibility __attribute__((annotate("ui_appearance_selector")));
		[Export ("titleVisibility", ArgumentSemantic.Assign)]
		BottomNavigationBarTitleVisibility TitleVisibility { get; set; }

		// @property (assign, nonatomic) MDCBottomNavigationBarAlignment alignment __attribute__((annotate("ui_appearance_selector")));
		[Export ("alignment", ArgumentSemantic.Assign)]
		BottomNavigationBarAlignment Alignment { get; set; }

		// @property (copy, nonatomic) NSArray<UITabBarItem *> * _Nonnull items;
		[Export ("items", ArgumentSemantic.Copy)]
		UITabBarItem [] Items { get; set; }

		// @property (nonatomic, weak) UITabBarItem * _Nullable selectedItem;
		[NullAllowed]
		[Export ("selectedItem", ArgumentSemantic.Weak)]
		UITabBarItem SelectedItem { get; set; }

		// @property (nonatomic, strong) UIFont * _Nonnull itemTitleFont __attribute__((annotate("ui_appearance_selector")));
		[Export ("itemTitleFont", ArgumentSemantic.Strong)]
		UIFont ItemTitleFont { get; set; }

		// @property (readwrite, nonatomic, strong) UIColor * _Nonnull selectedItemTintColor __attribute__((annotate("ui_appearance_selector")));
		[Export ("selectedItemTintColor", ArgumentSemantic.Strong)]
		UIColor SelectedItemTintColor { get; set; }

		// @property (readwrite, nonatomic, strong) UIColor * _Nonnull selectedItemTitleColor;
		[Export ("selectedItemTitleColor", ArgumentSemantic.Strong)]
		UIColor SelectedItemTitleColor { get; set; }

		// @property (readwrite, nonatomic, strong) UIColor * _Nonnull unselectedItemTintColor __attribute__((annotate("ui_appearance_selector")));
		[Export ("unselectedItemTintColor", ArgumentSemantic.Strong)]
		UIColor UnselectedItemTintColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable barTintColor __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("barTintColor", ArgumentSemantic.Strong)]
		UIColor BarTintColor { get; set; }

		// @property (copy, nonatomic) UIColor * _Nullable backgroundColor __attribute__((annotate("ui_appearance_selector")));
		[New]
		[NullAllowed]
		[Export ("backgroundColor", ArgumentSemantic.Copy)]
		UIColor BackgroundColor { get; set; }

		// @property (assign, nonatomic) UIEdgeInsets itemsContentInsets;
		[Export ("itemsContentInsets", ArgumentSemantic.Assign)]
		UIEdgeInsets ItemsContentInsets { get; set; }

		// @property (assign, nonatomic) CGFloat itemsContentVerticalMargin;
		[Export ("itemsContentVerticalMargin")]
		nfloat ItemsContentVerticalMargin { get; set; }

		// @property (assign, nonatomic) CGFloat itemsContentHorizontalMargin;
		[Export ("itemsContentHorizontalMargin")]
		nfloat ItemsContentHorizontalMargin { get; set; }

		// @property (assign, nonatomic) MDCShadowElevation elevation;
		[Export ("elevation")]
		nfloat Elevation { get; set; }

		// -(UIView * _Nullable)viewForItem:(UITabBarItem * _Nonnull)item;
		[Export ("viewForItem:")]
		[return: NullAllowed]
		UIView GetView (UITabBarItem item);
	}

	interface IBottomNavigationBarDelegate { }

	// @protocol MDCBottomNavigationBarDelegate <UINavigationBarDelegate>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "MDCBottomNavigationBarDelegate")]
	interface BottomNavigationBarDelegate : IUINavigationBarDelegate {
		// @optional -(BOOL)bottomNavigationBar:(MDCBottomNavigationBar * _Nonnull)bottomNavigationBar shouldSelectItem:(UITabBarItem * _Nonnull)item;
		[DefaultValue (true)]
		[DelegateName ("BottomNavigationBarShouldSelectItem")]
		[Export ("bottomNavigationBar:shouldSelectItem:")]
		bool ShouldSelectItem (BottomNavigationBar bottomNavigationBar, UITabBarItem item);

		// @optional -(void)bottomNavigationBar:(MDCBottomNavigationBar * _Nonnull)bottomNavigationBar didSelectItem:(UITabBarItem * _Nonnull)item;
		[EventArgs ("BottomNavigationBarItemSelected")]
		[EventName ("ItemSelected")]
		[Export ("bottomNavigationBar:didSelectItem:")]
		void DidSelectItem (BottomNavigationBar bottomNavigationBar, UITabBarItem item);
	}

	// @interface MDCBottomNavigationBarColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCBottomNavigationBarColorThemer")]
	interface BottomNavigationBarColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toBottomNavigation:(MDCBottomNavigationBar * _Nonnull)bottomNavigation;
		[Static]
		[Export ("applySemanticColorScheme:toBottomNavigation:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, BottomNavigationBar bottomNavigation);

		// +(void)applyColorScheme:(id<MDCColorScheme> _Nonnull)colorScheme toBottomNavigationBar:(MDCBottomNavigationBar * _Nonnull)bottomNavigationBar;
		[Obsolete ("This method will soon be deprecated. Consider using ApplySemanticColorScheme method instead.")]
		[Static]
		[Export ("applyColorScheme:toBottomNavigationBar:")]
		void ApplyColorScheme (IColorScheme colorScheme, BottomNavigationBar bottomNavigationBar);
	}

	// @interface MDCBottomNavigationBarTypographyThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCBottomNavigationBarTypographyThemer")]
	interface BottomNavigationBarTypographyThemer {
		// +(void)applyTypographyScheme:(id<MDCTypographyScheming> _Nonnull)typographyScheme toBottomNavigationBar:(MDCBottomNavigationBar * _Nonnull)bottomNavigationBar;
		[Static]
		[Export ("applyTypographyScheme:toBottomNavigationBar:")]
		void ApplyTypographyScheme (ITypographyScheming typographyScheme, BottomNavigationBar bottomNavigationBar);
	}

	// @interface MDCBottomSheetControllerShapeThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof(NSObject), Name = "MDCBottomSheetControllerShapeThemer")]
	interface BottomSheetControllerShapeThemer {
		// +(void)applyShapeScheme:(id<MDCShapeScheming> _Nonnull)shapeScheme toBottomSheetController:(MDCBottomSheetController * _Nonnull)bottomSheetController;
		[Static]
		[Export ("applyShapeScheme:toBottomSheetController:")]
		void ApplyShapeScheme (IShapeScheming shapeScheme, BottomSheetController bottomSheetController);
	}

	// @interface MDCBottomSheetController : UIViewController
	[BaseType (typeof (UIViewController),
		   Name = "MDCBottomSheetController",
		   Delegates = new [] { "Delegate" },
		   Events = new [] { typeof (BottomSheetControllerDelegate) })]
	interface BottomSheetController {
		// @property (readonly, nonatomic, strong) UIViewController * _Nonnull contentViewController;
		[Export ("contentViewController", ArgumentSemantic.Strong)]
		UIViewController ContentViewController { get; }

		// @property (nonatomic, weak) UIScrollView * _Nullable trackingScrollView;
		[NullAllowed]
		[Export ("trackingScrollView", ArgumentSemantic.Weak)]
		UIScrollView TrackingScrollView { get; set; }

		// @property (assign, nonatomic) BOOL dismissOnBackgroundTap;
		[Export ("dismissOnBackgroundTap")]
		bool DismissOnBackgroundTap { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable scrimColor;
		[NullAllowed, Export ("scrimColor", ArgumentSemantic.Strong)]
		UIColor ScrimColor { get; set; }

		// @property (assign, nonatomic) BOOL isScrimAccessibilityElement;
		[Export ("isScrimAccessibilityElement")]
		bool IsScrimAccessibilityElement { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable scrimAccessibilityLabel;
		[NullAllowed]
		[Export ("scrimAccessibilityLabel")]
		string ScrimAccessibilityLabel { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable scrimAccessibilityHint;
		[NullAllowed]
		[Export ("scrimAccessibilityHint")]
		string ScrimAccessibilityHint { get; set; }

		// @property (assign, nonatomic) UIAccessibilityTraits scrimAccessibilityTraits;
		[Export ("scrimAccessibilityTraits")]
		ulong ScrimAccessibilityTraits { get; set; }

		// @property (nonatomic, weak) id<MDCBottomSheetControllerDelegate> _Nullable delegate;
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		IBottomSheetControllerDelegate Delegate { get; set; }

		// @property (readonly, nonatomic) MDCSheetState state;
		[Export ("state")]
		SheetState State { get; }

		// -(void)setShapeGenerator:(id<MDCShapeGenerating> _Nullable)shapeGenerator forState:(MDCSheetState)state;
		[Export ("setShapeGenerator:forState:")]
		void SetShapeGenerator ([NullAllowed] IShapeGenerating shapeGenerator, SheetState state);

		// -(id<MDCShapeGenerating> _Nullable)shapeGeneratorForState:(MDCSheetState)state;
		[return: NullAllowed]
		[Export ("shapeGeneratorForState:")]
		IShapeGenerating ShapeGenerator (SheetState state);

		// -(instancetype _Nonnull)initWithContentViewController:(UIViewController * _Nonnull)contentViewController;
		[Export ("initWithContentViewController:")]
		IntPtr Constructor (UIViewController contentViewController);
	}

	interface IBottomSheetControllerDelegate { }

	// @protocol MDCBottomSheetControllerDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "MDCBottomSheetControllerDelegate")]
	interface BottomSheetControllerDelegate {
		// @required -(void)bottomSheetControllerDidDismissBottomSheet:(MDCBottomSheetController * _Nonnull)controller;
		[EventArgs ("BottomSheetControllerBottomSheetDismissed")]
		[EventName ("BottomSheetDismissed")]
		[Abstract]
		[Export ("bottomSheetControllerDidDismissBottomSheet:")]
		void DidDismissBottomSheet (BottomSheetController controller);
	}

	interface IBottomSheetPresentationControllerDelegate { }

	// @protocol MDCBottomSheetPresentationControllerDelegate <UIAdaptivePresentationControllerDelegate>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "MDCBottomSheetPresentationControllerDelegate")]
	interface BottomSheetPresentationControllerDelegate : IUIAdaptivePresentationControllerDelegate {
		// @optional -(void)prepareForBottomSheetPresentation:(MDCBottomSheetPresentationController * _Nonnull)bottomSheet;
		[EventArgs ("BottomSheetPresentationControllerPrepareForPresentation")]
		[Export ("prepareForBottomSheetPresentation:")]
		void PrepareForPresentation (BottomSheetPresentationController bottomSheet);

		// @optional -(void)bottomSheetPresentationControllerDidDismissBottomSheet:(MDCBottomSheetPresentationController * _Nonnull)bottomSheet;
		[EventArgs ("BottomSheetPresentationControllerDismissed")]
		[EventName ("Dismissed")]
		[Export ("bottomSheetPresentationControllerDidDismissBottomSheet:")]
		void DidDismiss (BottomSheetPresentationController bottomSheet);

		// @optional -(void)bottomSheetWillChangeState:(MDCBottomSheetPresentationController * _Nonnull)bottomSheet sheetState:(MDCSheetState)sheetState;
		[EventArgs ("BottomSheetPresentationControllerWillChangeState")]
		[Export ("bottomSheetWillChangeState:sheetState:")]
		void WillChangeState (BottomSheetPresentationController bottomSheet, SheetState sheetState);
	}

	// @interface MDCBottomSheetPresentationController : UIPresentationController
	[BaseType (typeof (UIPresentationController),
		   Name = "MDCBottomSheetPresentationController",
		   Delegates = new [] { "Delegate" },
		   Events = new [] { typeof (BottomSheetPresentationControllerDelegate) })]
	interface BottomSheetPresentationController {
		// @property (nonatomic, weak) UIScrollView * _Nullable trackingScrollView;
		[NullAllowed]
		[Export ("trackingScrollView", ArgumentSemantic.Weak)]
		UIScrollView TrackingScrollView { get; set; }

		// @property (assign, nonatomic) BOOL dismissOnBackgroundTap;
		[Export ("dismissOnBackgroundTap")]
		bool DismissOnBackgroundTap { get; set; }

		// @property (assign, nonatomic) CGFloat preferredSheetHeight;
		[Export ("preferredSheetHeight")]
		nfloat PreferredSheetHeight { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable scrimColor;
		[NullAllowed, Export ("scrimColor", ArgumentSemantic.Strong)]
		UIColor ScrimColor { get; set; }

		// @property (assign, nonatomic) BOOL isScrimAccessibilityElement;
		[Export ("isScrimAccessibilityElement")]
		bool IsScrimAccessibilityElement { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable scrimAccessibilityLabel;
		[NullAllowed]
		[Export ("scrimAccessibilityLabel")]
		string ScrimAccessibilityLabel { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable scrimAccessibilityHint;
		[NullAllowed]
		[Export ("scrimAccessibilityHint")]
		string ScrimAccessibilityHint { get; set; }

		// @property (assign, nonatomic) UIAccessibilityTraits scrimAccessibilityTraits;
		[Export ("scrimAccessibilityTraits")]
		ulong ScrimAccessibilityTraits { get; set; }

		// @property (nonatomic, weak) id<MDCBottomSheetPresentationControllerDelegate> _Nullable delegate;
		[New]
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		IBottomSheetPresentationControllerDelegate Delegate { get; set; }
	}

	// @interface MDCBottomSheetTransitionController : NSObject <UIViewControllerAnimatedTransitioning, UIViewControllerTransitioningDelegate>
	[BaseType (typeof (NSObject), Name = "MDCBottomSheetTransitionController")]
	interface BottomSheetTransitionController : IUIViewControllerAnimatedTransitioning, IUIViewControllerTransitioningDelegate {
		// @property (nonatomic, weak) UIScrollView * _Nullable trackingScrollView;
		[NullAllowed]
		[Export ("trackingScrollView", ArgumentSemantic.Weak)]
		UIScrollView TrackingScrollView { get; set; }

		// @property (assign, nonatomic) BOOL dismissOnBackgroundTap;
		[Export ("dismissOnBackgroundTap")]
		bool DismissOnBackgroundTap { get; set; }

		// @property (assign, nonatomic) CGFloat preferredSheetHeight;
		[Export ("preferredSheetHeight")]
		nfloat PreferredSheetHeight { get; set; }

		//
		// From ScrimAccessibility (MDCBottomSheetTransitionController) Category
		//

		// @property (nonatomic, strong) UIColor * _Nullable scrimColor;
		[NullAllowed, Export ("scrimColor", ArgumentSemantic.Strong)]
		UIColor ScrimColor { get; set; }

		// @property (assign, nonatomic) BOOL isScrimAccessibilityElement;
		[Export ("isScrimAccessibilityElement")]
		bool IsScrimAccessibilityElement { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable scrimAccessibilityLabel;
		[NullAllowed]
		[Export ("scrimAccessibilityLabel")]
		string ScrimAccessibilityLabel { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable scrimAccessibilityHint;
		[NullAllowed]
		[Export ("scrimAccessibilityHint")]
		string ScrimAccessibilityHint { get; set; }

		// @property (assign, nonatomic) UIAccessibilityTraits scrimAccessibilityTraits;
		[Export ("scrimAccessibilityTraits")]
		ulong ScrimAccessibilityTraits { get; set; }
	}

	// @interface MDCButton : UIButton
	[BaseType (typeof (UIButton), Name = "MDCButton")]
	interface Button : INativeObject {
		// @property (assign, nonatomic) MDCInkStyle inkStyle __attribute__((annotate("ui_appearance_selector")));
		[Export ("inkStyle", ArgumentSemantic.Assign)]
		InkStyle InkStyle { get; set; }

		// @property (nonatomic, strong) UIColor * _Null_unspecified inkColor __attribute__((annotate("ui_appearance_selector")));
		[Export ("inkColor", ArgumentSemantic.Strong)]
		UIColor InkColor { get; set; }

		// @property (assign, nonatomic) CGFloat inkMaxRippleRadius __attribute__((annotate("ui_appearance_selector")));
		[Export ("inkMaxRippleRadius")]
		nfloat InkMaxRippleRadius { get; set; }

		// @property (nonatomic) CGFloat disabledAlpha;
		[Export ("disabledAlpha")]
		nfloat DisabledAlpha { get; set; }

		// @property (getter = isUppercaseTitle, nonatomic) BOOL uppercaseTitle __attribute__((annotate("ui_appearance_selector")));
		[Export ("uppercaseTitle")]
		bool UppercaseTitle { [Bind ("isUppercaseTitle")] get; set; }

		// @property (nonatomic) UIEdgeInsets hitAreaInsets;
		[Export ("hitAreaInsets", ArgumentSemantic.Assign)]
		UIEdgeInsets HitAreaInsets { get; set; }

		// @property (assign, nonatomic) CGSize minimumSize __attribute__((annotate("ui_appearance_selector")));
		[Export ("minimumSize", ArgumentSemantic.Assign)]
		CGSize MinimumSize { get; set; }

		// @property (assign, nonatomic) CGSize maximumSize __attribute__((annotate("ui_appearance_selector")));
		[Export ("maximumSize", ArgumentSemantic.Assign)]
		CGSize MaximumSize { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable underlyingColorHint;
		[NullAllowed]
		[Export ("underlyingColorHint", ArgumentSemantic.Strong)]
		UIColor UnderlyingColorHint { get; set; }

		// @property (readwrite, nonatomic, setter = mdc_setAdjustsFontForContentSizeCategory:) BOOL mdc_adjustsFontForContentSizeCategory __attribute__((annotate("ui_appearance_selector")));
		[Export ("mdc_adjustsFontForContentSizeCategory")]
		bool MdcAdjustsFontForContentSizeCategory { get; [Bind ("mdc_setAdjustsFontForContentSizeCategory:")] set; }

		// @property (nonatomic, strong) id<MDCShapeGenerating> _Nullable shapeGenerator;
		[NullAllowed]
		[Export ("shapeGenerator", ArgumentSemantic.Strong)]
		IShapeGenerating ShapeGenerator { get; set; }

		// -(UIColor * _Nullable)backgroundColorForState:(UIControlState)state;
		[return: NullAllowed]
		[Export ("backgroundColorForState:")]
		UIColor GetBackgroundColor (UIControlState state);

		// -(void)setBackgroundColor:(UIColor * _Nullable)backgroundColor forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setBackgroundColor:forState:")]
		void SetBackgroundColor ([NullAllowed] UIColor backgroundColor, UIControlState state);

		// -(void)setBackgroundColor:(UIColor * _Nullable)backgroundColor;
		[Export ("setBackgroundColor:")]
		void SetBackgroundColor ([NullAllowed] UIColor backgroundColor);

		// -(UIFont * _Nullable)titleFontForState:(UIControlState)state;
		[return: NullAllowed]
		[Export ("titleFontForState:")]
		UIFont GetTitleFont (UIControlState state);

		// -(void)setTitleFont:(UIFont * _Nullable)font forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setTitleFont:forState:")]
		void SetTitleFont ([NullAllowed] UIFont font, UIControlState state);

		// -(void)setEnabled:(BOOL)enabled animated:(BOOL)animated;
		[Export ("setEnabled:animated:")]
		void SetEnabled (bool enabled, bool animated);

		// -(MDCShadowElevation)elevationForState:(UIControlState)state;
		[Export ("elevationForState:")]
		nfloat GetElevation (UIControlState state);
		
		[Wrap ("SetElevation ((nfloat)elevation, state)")]
		void SetElevation (double elevation, UIControlState state);

		// -(void)setElevation:(MDCShadowElevation)elevation forState:(UIControlState)state;
		[Export ("setElevation:forState:")]
		void SetElevation (nfloat elevation, UIControlState state);

		// -(UIColor * _Nullable)borderColorForState:(UIControlState)state;
		[Export ("borderColorForState:")]
		[return: NullAllowed]
		UIColor GetBorderColor (UIControlState state);

		// -(void)setBorderColor:(UIColor * _Nullable)borderColor forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setBorderColor:forState:")]
		void SetBorderColor ([NullAllowed] UIColor borderColor, UIControlState state);

		// -(CGFloat)borderWidthForState:(UIControlState)state;
		[Export ("borderWidthForState:")]
		nfloat GetBorderWidth (UIControlState state);

		// -(void)setBorderWidth:(CGFloat)borderWidth forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setBorderWidth:forState:")]
		void SetBorderWidth (nfloat borderWidth, UIControlState state);

		// -(UIColor * _Nullable)imageTintColorForState:(UIControlState)state;
		[return: NullAllowed]
		[Export ("imageTintColorForState:")]
		UIColor GetImageTintColor (UIControlState state);

		// -(void)setImageTintColor:(UIColor * _Nullable)imageTintColor forState:(UIControlState)state;
		[Export ("setImageTintColor:forState:")]
		void SetImageTintColor ([NullAllowed] UIColor imageTintColor, UIControlState state);

		// -(void)setShadowColor:(UIColor * _Nullable)shadowColor forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setShadowColor:forState:")]
		void SetShadowColor ([NullAllowed] UIColor shadowColor, UIControlState state);

		// -(UIColor * _Nullable)shadowColorForState:(UIControlState)state;
		[Export ("shadowColorForState:")]
		[return: NullAllowed]
		UIColor GetShadowColor (UIControlState state);
	}

	// @interface MDCButtonBar : UIView
	[BaseType (typeof (UIView),
		Name = "MDCButtonBar",
		Delegates = new [] { "Delegate" },
		Events = new [] { typeof (ButtonBarDelegate) })]
	interface ButtonBar {
		// @property (nonatomic, weak) id<MDCButtonBarDelegate> _Nullable delegate;
		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		IButtonBarDelegate Delegate { get; set; }

		// @property (copy, nonatomic) NSArray<UIBarButtonItem *> * _Nullable items;
		[NullAllowed]
		[Export ("items", ArgumentSemantic.Copy)]
		UIBarButtonItem [] Items { get; set; }

		// @property (nonatomic) CGFloat buttonTitleBaseline;
		[Export ("buttonTitleBaseline")]
		nfloat ButtonTitleBaseline { get; set; }

		// @property (nonatomic) BOOL uppercasesButtonTitles;
		[Export ("uppercasesButtonTitles")]
		bool UppercasesButtonTitles { get; set; }

		// -(void)setButtonsTitleFont:(UIFont * _Nullable)font forState:(UIControlState)state;
		[Export ("setButtonsTitleFont:forState:")]
		void SetButtonsTitleFont ([NullAllowed] UIFont font, UIControlState state);

		// -(UIFont * _Nullable)buttonsTitleFontForState:(UIControlState)state;
		[return: NullAllowed]
		[Export ("buttonsTitleFontForState:")]
		UIFont GetButtonsTitleFont (UIControlState state);

		// -(void)setButtonsTitleColor:(UIColor * _Nullable)color forState:(UIControlState)state;
		[Export ("setButtonsTitleColor:forState:")]
		void SetButtonsTitleColor ([NullAllowed] UIColor color, UIControlState state);

		// -(UIColor * _Nullable)buttonsTitleColorForState:(UIControlState)state;
		[return: NullAllowed]
		[Export ("buttonsTitleColorForState:")]
		UIColor GetButtonsTitleColor (UIControlState state);

		// @property (nonatomic) MDCButtonBarLayoutPosition layoutPosition;
		[Export ("layoutPosition", ArgumentSemantic.Assign)]
		ButtonBarLayoutPosition LayoutPosition { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable inkColor;
		[NullAllowed]
		[Export ("inkColor", ArgumentSemantic.Strong)]
		UIColor InkColor { get; set; }

		// -(CGSize)sizeThatFits:(CGSize)size;
		[New]
		[Export ("sizeThatFits:")]
		CGSize SizeThatFits (CGSize size);
	}

	interface IButtonBarDelegate { }

	// @protocol MDCButtonBarDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "MDCButtonBarDelegate")]
	interface ButtonBarDelegate {
		// @optional -(void)buttonBarDidInvalidateIntrinsicContentSize:(MDCButtonBar * _Nonnull)buttonBar;
		[EventArgs ("ButtonBarDidInvalidateIntrinsicContentSize")]
		[EventName ("IntrinsicContentSizeInvalidated")]
		[Export ("buttonBarDidInvalidateIntrinsicContentSize:")]
		void DidInvalidateIntrinsicContentSize(ButtonBar buttonBar);

		// @required -(UIView * _Nonnull)buttonBar:(MDCButtonBar * _Nonnull)buttonBar viewForItem:(UIBarButtonItem * _Nonnull)barButtonItem layoutHints:(MDCBarButtonItemLayoutHints)layoutHints;
		[DefaultValue (null)]
		[DelegateName ("ButtonBarViewForItem")]
		[Abstract]
		[Export ("buttonBar:viewForItem:layoutHints:")]
		UIView ViewForItem (ButtonBar buttonBar, UIBarButtonItem barButtonItem, BarButtonItemLayoutHints layoutHints);
	}

	// @interface MDCButtonBarButton : MDCFlatButton
	[BaseType (typeof (FlatButton), Name = "MDCButtonBarButton")]
	interface ButtonBarButton {
		// -(void)setTitleFont:(UIFont * _Nullable)font forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[New]
		[Export ("setTitleFont:forState:")]
		void SetTitleFont ([NullAllowed] UIFont font, UIControlState state);
	}

	// @interface MDCButtonBarColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCButtonBarColorThemer")]
	interface ButtonBarColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toButtonBar:(MDCButtonBar * _Nonnull)buttonBar;
		[Static]
		[Export ("applySemanticColorScheme:toButtonBar:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, ButtonBar buttonBar);

		// +(void)applyColorScheme:(id<MDCColorScheme> _Nonnull)colorScheme toButtonBar:(MDCButtonBar * _Nonnull)buttonBar;
		[Static]
		[Export ("applyColorScheme:toButtonBar:")]
		void ApplyColorScheme (IColorScheme colorScheme, ButtonBar buttonBar);
	}

	// @interface MDCButtonBarTypographyThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCButtonBarTypographyThemer")]
	interface ButtonBarTypographyThemer {
		// +(void)applyTypographyScheme:(id<MDCTypographyScheming> _Nonnull)typographyScheme toButtonBar:(MDCButtonBar * _Nonnull)buttonBar;
		[Static]
		[Export ("applyTypographyScheme:toButtonBar:")]
		void ApplyTypographyScheme (ITypographyScheming typographyScheme, ButtonBar buttonBar);
	}

	// @interface MDCButtonColorThemer : NSObject
	[Obsolete ("This class will soon be deprecated. Please consider using one of the more specific ButtonColorThemer classes instead.")]
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCButtonColorThemer")]
	interface ButtonColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toButton:(MDCButton * _Nonnull)button;
		[Static]
		[Export ("applySemanticColorScheme:toButton:")]
		void ApplySemanticColorSchemeToButton (IColorScheming colorScheme, Button button);

		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toFlatButton:(MDCButton * _Nonnull)flatButton;
		[Static]
		[Export ("applySemanticColorScheme:toFlatButton:")]
		void ApplySemanticColorSchemeToFlatButton (IColorScheming colorScheme, Button flatButton);

		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toRaisedButton:(MDCButton * _Nonnull)raisedButton;
		[Static]
		[Export ("applySemanticColorScheme:toRaisedButton:")]
		void ApplySemanticColorSchemeToRaisedButton (IColorScheming colorScheme, Button raisedButton);

		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toFloatingButton:(MDCFloatingButton * _Nonnull)floatingButton;
		[Static]
		[Export ("applySemanticColorScheme:toFloatingButton:")]
		void ApplySemanticColorSchemeToFloatingButton (IColorScheming colorScheme, FloatingButton floatingButton);

		// +(void)applyColorScheme:(NSObject<MDCColorScheme> *)colorScheme toButton:(MDCButton *)button;
		[Static]
		[Export ("applyColorScheme:toButton:")]
		void ApplyColorScheme (IColorScheme colorScheme, Button button);
	}

	interface IButtonScheming { }

	// @protocol MDCButtonScheming
	[Protocol (Name = "MDCButtonScheming")]
	interface ButtonScheming {
		// @required @property (readonly, nonatomic) id<MDCColorScheming> _Nonnull colorScheme;
		[Abstract]
		[Export ("colorScheme")]
		IColorScheming ColorScheme { get; }

		// @required @property (readonly, nonatomic) id<MDCShapeScheming> _Nonnull shapeScheme;
		[Abstract]
		[Export ("shapeScheme")]
		IShapeScheming ShapeScheme { get; }

		// @required @property (readonly, nonatomic) id<MDCTypographyScheming> _Nonnull typographyScheme;
		[Abstract]
		[Export ("typographyScheme")]
		ITypographyScheming TypographyScheme { get; }

		// @required @property (readonly, nonatomic) CGFloat cornerRadius;
		[Abstract]
		[Export ("cornerRadius")]
		nfloat CornerRadius { get; }

		// @required @property (readonly, nonatomic) CGFloat minimumHeight;
		[Abstract]
		[Export ("minimumHeight")]
		nfloat MinimumHeight { get; }
	}

	// @interface MDCButtonScheme : NSObject <MDCButtonScheming>
	[BaseType (typeof (NSObject), Name = "MDCButtonScheme")]
	interface ButtonScheme : ButtonScheming {
		// @property (readwrite, nonatomic) id<MDCColorScheming> _Nonnull colorScheme;
		[Export ("colorScheme", ArgumentSemantic.Assign)]
		new IColorScheming ColorScheme { get; set; }

		// @property (readwrite, nonatomic) id<MDCShapeScheming> _Nonnull shapeScheme;
		[Export ("shapeScheme", ArgumentSemantic.Assign)]
		new IShapeScheming ShapeScheme { get; set; }

		// @property (readwrite, nonatomic) id<MDCTypographyScheming> _Nonnull typographyScheme;
		[Export ("typographyScheme", ArgumentSemantic.Assign)]
		new ITypographyScheming TypographyScheme { get; set; }

		// @property (readwrite, nonatomic) CGFloat cornerRadius;
		[Export ("cornerRadius")]
		new nfloat CornerRadius { get; set; }

		// @property (readwrite, nonatomic) CGFloat minimumHeight;
		[Export ("minimumHeight")]
		new nfloat MinimumHeight { get; set; }
	}

	// @interface MDCButtonShapeThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof(NSObject), Name = "MDCButtonShapeThemer")]
	interface ButtonShapeThemer {
		// +(void)applyShapeScheme:(id<MDCShapeScheming> _Nonnull)shapeScheme toButton:(MDCButton * _Nonnull)button;
		[Static]
		[Export ("applyShapeScheme:toButton:")]
		void ApplyShapeScheme (IShapeScheming shapeScheme, Button button);
	}

	// @interface MDCButtonTitleColorAccessibilityMutator : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCButtonTitleColorAccessibilityMutator")]
	interface ButtonTitleColorAccessibilityMutator {
		// +(void)changeTitleColorOfButton:(MDCButton *)button;
		[Static]
		[Export ("changeTitleColorOfButton:")]
		void ChangeTitleColor (Button button);
	}

	// @interface MDCButtonTypographyThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCButtonTypographyThemer")]
	interface ButtonTypographyThemer {
		// +(void)applyTypographyScheme:(id<MDCTypographyScheming> _Nonnull)typographyScheme toButton:(MDCButton * _Nonnull)button;
		[Static]
		[Export ("applyTypographyScheme:toButton:")]
		void ApplyTypographyScheme (ITypographyScheming typographyScheme, Button button);
	}

	// @interface MDCCard : UIControl
	[BaseType (typeof (UIControl), Name = "MDCCard")]
	interface Card {
		// @property (assign, nonatomic) CGFloat cornerRadius __attribute__((annotate("ui_appearance_selector")));
		[Export ("cornerRadius")]
		nfloat CornerRadius { get; set; }

		// @property (readonly, nonatomic, strong) MDCInkView * _Nonnull inkView;
		[Export ("inkView", ArgumentSemantic.Strong)]
		InkView InkView { get; }

		// @property (getter = isInteractable, nonatomic) BOOL interactable;
		[Export ("interactable")]
		bool Interactable { [Bind ("isInteractable")] get; set; }

		// -(void)setShadowElevation:(MDCShadowElevation)shadowElevation forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setShadowElevation:forState:")]
		void SetShadowElevation (nfloat shadowElevation, UIControlState state);

		[Wrap ("SetShadowElevation ((nfloat)shadowElevation, state)")]
		void SetShadowElevation (double shadowElevation, UIControlState state);

		// -(MDCShadowElevation)shadowElevationForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("shadowElevationForState:")]
		nfloat GetShadowElevation (UIControlState state);

		// -(void)setBorderWidth:(CGFloat)borderWidth forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setBorderWidth:forState:")]
		void SetBorderWidth (nfloat borderWidth, UIControlState state);

		// -(CGFloat)borderWidthForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("borderWidthForState:")]
		nfloat GetBorderWidth (UIControlState state);

		// -(void)setBorderColor:(UIColor * _Nullable)borderColor forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setBorderColor:forState:")]
		void SetBorderColor ([NullAllowed] UIColor borderColor, UIControlState state);

		// -(UIColor * _Nullable)borderColorForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[return: NullAllowed]
		[Export ("borderColorForState:")]
		UIColor GetBorderColorForState (UIControlState state);

		// -(void)setShadowColor:(UIColor * _Nullable)shadowColor forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setShadowColor:forState:")]
		void SetShadowColor ([NullAllowed] UIColor shadowColor, UIControlState state);

		// -(UIColor * _Nullable)shadowColorForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[return: NullAllowed]
		[Export ("shadowColorForState:")]
		UIColor GetShadowColor (UIControlState state);

		// @property (nonatomic, strong) id<MDCShapeGenerating> _Nullable shapeGenerator;
		[NullAllowed]
		[Export ("shapeGenerator", ArgumentSemantic.Strong)]
		IShapeGenerating ShapeGenerator { get; set; }
	}

	// @interface MDCCardCollectionCell : UICollectionViewCell
	[BaseType (typeof (UICollectionViewCell), Name = "MDCCardCollectionCell")]
	interface CardCollectionCell {
		// @property (getter = isSelectable, assign, nonatomic) BOOL selectable;
		[Export ("selectable")]
		bool Selectable { [Bind ("isSelectable")] get; set; }

		// @property (assign, nonatomic) CGFloat cornerRadius __attribute__((annotate("ui_appearance_selector")));
		[Export ("cornerRadius")]
		nfloat CornerRadius { get; set; }

		// @property (readonly, nonatomic, strong) MDCInkView * _Nonnull inkView;
		[Export ("inkView", ArgumentSemantic.Strong)]
		InkView InkView { get; }

		// @property (getter = isInteractable, nonatomic) BOOL interactable;
		[Export ("interactable")]
		bool Interactable { [Bind ("isInteractable")] get; set; }

		// @property (nonatomic, strong) id<MDCShapeGenerating> _Nullable shapeGenerator;
		[NullAllowed]
		[Export ("shapeGenerator", ArgumentSemantic.Strong)]
		IShapeGenerating ShapeGenerator { get; set; }

		// -(void)setShadowElevation:(MDCShadowElevation)shadowElevation forState:(MDCCardCellState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setShadowElevation:forState:")]
		void SetShadowElevation (nfloat shadowElevation, CardCellState state);
		
		[Wrap ("SetShadowElevation ((nfloat)shadowElevation, state)")]
		void SetShadowElevation (double shadowElevation, CardCellState state);

		// -(MDCShadowElevation)shadowElevationForState:(MDCCardCellState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("shadowElevationForState:")]
		nfloat GetShadowElevation (CardCellState state);

		// -(void)setBorderWidth:(CGFloat)borderWidth forState:(MDCCardCellState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setBorderWidth:forState:")]
		void SetBorderWidth (nfloat borderWidth, CardCellState state);

		// -(CGFloat)borderWidthForState:(MDCCardCellState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("borderWidthForState:")]
		nfloat GetBorderWidth (CardCellState state);

		// -(void)setBorderColor:(UIColor * _Nullable)borderColor forState:(MDCCardCellState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setBorderColor:forState:")]
		void SetBorderColor ([NullAllowed] UIColor borderColor, CardCellState state);

		// -(UIColor * _Nullable)borderColorForState:(MDCCardCellState)state __attribute__((annotate("ui_appearance_selector")));
		[return: NullAllowed]
		[Export ("borderColorForState:")]
		UIColor GetBorderColor (CardCellState state);

		// -(void)setShadowColor:(UIColor * _Nullable)shadowColor forState:(MDCCardCellState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setShadowColor:forState:")]
		void SetShadowColor ([NullAllowed] UIColor shadowColor, CardCellState state);

		// -(UIColor * _Nullable)shadowColorForState:(MDCCardCellState)state __attribute__((annotate("ui_appearance_selector")));
		[return: NullAllowed]
		[Export ("shadowColorForState:")]
		UIColor GetShadowColor (CardCellState state);

		// -(UIImage * _Nullable)imageForState:(MDCCardCellState)state __attribute__((annotate("ui_appearance_selector")));
		[return: NullAllowed]
		[Export ("imageForState:")]
		UIImage GetImage (CardCellState state);

		// -(void)setImage:(UIImage * _Nullable)image forState:(MDCCardCellState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setImage:forState:")]
		void SetImage ([NullAllowed] UIImage image, CardCellState state);

		// -(MDCCardCellHorizontalImageAlignment)horizontalImageAlignmentForState:(MDCCardCellState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("horizontalImageAlignmentForState:")]
		CardCellHorizontalImageAlignment GetHorizontalImageAlignment (CardCellState state);

		// -(void)setHorizontalImageAlignment:(MDCCardCellHorizontalImageAlignment)horizontalImageAlignment forState:(MDCCardCellState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setHorizontalImageAlignment:forState:")]
		void SetHorizontalImageAlignment (CardCellHorizontalImageAlignment horizontalImageAlignment, CardCellState state);

		// -(MDCCardCellVerticalImageAlignment)verticalImageAlignmentForState:(MDCCardCellState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("verticalImageAlignmentForState:")]
		CardCellVerticalImageAlignment GetVerticalImageAlignment (CardCellState state);

		// -(void)setVerticalImageAlignment:(MDCCardCellVerticalImageAlignment)verticalImageAlignment forState:(MDCCardCellState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setVerticalImageAlignment:forState:")]
		void SetVerticalImageAlignment (CardCellVerticalImageAlignment verticalImageAlignment, CardCellState state);

		// -(UIColor * _Nullable)imageTintColorForState:(MDCCardCellState)state __attribute__((annotate("ui_appearance_selector")));
		[return: NullAllowed]
		[Export ("imageTintColorForState:")]
		UIColor GetImageTintColor (CardCellState state);

		// -(void)setImageTintColor:(UIColor * _Nullable)imageTintColor forState:(MDCCardCellState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setImageTintColor:forState:")]
		void SetImageTintColor ([NullAllowed] UIColor imageTintColor, CardCellState state);

		// @property (readonly, nonatomic) MDCCardCellState state;
		[Export ("state")]
		CardCellState State { get; }
	}

	interface ICardScheming { }

	// @protocol MDCCardScheming
	[Protocol (Name = "MDCCardScheming")]
	interface CardScheming {
		// @required @property (readonly, nonatomic) id<MDCColorScheming> _Nonnull colorScheme;
		[Abstract]
		[Export ("colorScheme")]
		IColorScheming ColorScheme { get; }

		// @required @property (readonly, nonatomic) id<MDCShapeScheming> _Nonnull shapeScheme;
		[Abstract]
		[Export ("shapeScheme")]
		IShapeScheming ShapeScheme { get; }
	}

	// @interface MDCCardScheme : NSObject <MDCCardScheming>
	[BaseType (typeof (NSObject), Name = "MDCCardScheme")]
	interface CardScheme : CardScheming {
		// @property (readwrite, nonatomic) MDCSemanticColorScheme * _Nonnull colorScheme;
		[Export ("colorScheme", ArgumentSemantic.Assign)]
		new IColorScheming ColorScheme { get; set; }

		// @property (readwrite, nonatomic) MDCShapeScheme * _Nonnull shapeScheme;
		[Export ("shapeScheme", ArgumentSemantic.Assign)]
		new IShapeScheming ShapeScheme { get; set; }
	}

	// @interface MDCCardsColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCCardsColorThemer")]
	interface CardsColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toCard:(MDCCard * _Nonnull)card;
		[Static]
		[Export ("applySemanticColorScheme:toCard:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, Card card);

		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toCardCell:(MDCCardCollectionCell * _Nonnull)cardCell;
		[Static]
		[Export ("applySemanticColorScheme:toCardCell:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, CardCollectionCell cardCell);

		// +(void)applyOutlinedVariantWithColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toCard:(MDCCard * _Nonnull)card;
		[Static]
		[Export ("applyOutlinedVariantWithColorScheme:toCard:")]
		void ApplyOutlinedVariant (IColorScheming colorScheme, Card card);

		// +(void)applyOutlinedVariantWithColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toCardCell:(MDCCardCollectionCell * _Nonnull)cardCell;
		[Static]
		[Export ("applyOutlinedVariantWithColorScheme:toCardCell:")]
		void ApplyOutlinedVariant (IColorScheming colorScheme, CardCollectionCell cardCell);
	}

	// @interface MDCCardsShapeThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof(NSObject), Name = "MDCCardsShapeThemer")]
	interface CardsShapeThemer {
		// +(void)applyShapeScheme:(id<MDCShapeScheming> _Nonnull)shapeScheme toCard:(MDCCard * _Nonnull)card;
		[Static]
		[Export ("applyShapeScheme:toCard:")]
		void ApplyShapeScheme (IShapeScheming shapeScheme, Card card);

		// +(void)applyShapeScheme:(id<MDCShapeScheming> _Nonnull)shapeScheme toCardCell:(MDCCardCollectionCell * _Nonnull)cardCell;
		[Static]
		[Export ("applyShapeScheme:toCardCell:")]
		void ApplyShapeScheme (IShapeScheming shapeScheme, CardCollectionCell cardCell);
	}

	// @interface MDCCardThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCCardThemer")]
	interface CardThemer {
		// +(void)applyScheme:(id<MDCCardScheming> _Nonnull)scheme toCard:(MDCCard * _Nonnull)card;
		[Static]
		[Export ("applyScheme:toCard:")]
		void ApplyScheme (ICardScheming scheme, Card card);

		// +(void)applyScheme:(id<MDCCardScheming> _Nonnull)scheme toCardCell:(MDCCardCollectionCell * _Nonnull)cardCell;
		[Static]
		[Export ("applyScheme:toCardCell:")]
		void ApplyScheme (ICardScheming scheme, CardCollectionCell cardCell);

		// +(void)applyOutlinedVariantWithScheme:(id<MDCCardScheming> _Nonnull)scheme toCard:(MDCCard * _Nonnull)card;
		[Static]
		[Export ("applyOutlinedVariantWithScheme:toCard:")]
		void ApplyOutlinedVariant (ICardScheming scheme, Card card);

		// +(void)applyOutlinedVariantWithScheme:(id<MDCCardScheming> _Nonnull)scheme toCardCell:(MDCCardCollectionCell * _Nonnull)cardCell;
		[Static]
		[Export ("applyOutlinedVariantWithScheme:toCardCell:")]
		void ApplyOutlinedVariantWithScheme (ICardScheming scheme, CardCollectionCell cardCell);
	}

	// @interface MDCChipCollectionViewCell : UICollectionViewCell
	[BaseType (typeof (UICollectionViewCell), Name = "MDCChipCollectionViewCell")]
	interface ChipCollectionViewCell {
		// @property (readonly, nonatomic, strong) MDCChipView * _Nonnull chipView;
		[Export ("chipView", ArgumentSemantic.Strong)]
		ChipView ChipView { get; }

		// @property (assign, nonatomic) BOOL alwaysAnimateResize;
		[Export ("alwaysAnimateResize")]
		bool AlwaysAnimateResize { get; set; }

		// -(MDCChipView * _Nonnull)createChipView;
		[Export ("createChipView")]
		ChipView CreateChipView ();
	}

	// @interface MDCChipCollectionViewFlowLayout : UICollectionViewFlowLayout
	[BaseType (typeof (UICollectionViewFlowLayout), Name = "MDCChipCollectionViewFlowLayout")]
	interface ChipCollectionViewFlowLayout { }

	// @interface MDCChipField : UIView
	[BaseType (typeof (UIView),
		   Name = "MDCChipField",
		   Delegates = new [] { "Delegate" },
		   Events = new [] { typeof (ChipFieldDelegate) })]
	interface ChipField {
		// extern const CGFloat MDCChipFieldDefaultMinTextFieldWidth;
		[Field ("MDCChipFieldDefaultMinTextFieldWidth", "__Internal")]
		nfloat DefaultMinTextFieldWidth { get; }

		// extern const UIEdgeInsets MDCChipFieldDefaultContentEdgeInsets;
		[Internal]
		[Field ("MDCChipFieldDefaultContentEdgeInsets", "__Internal")]
		IntPtr _DefaultContentEdgeInsets { get; }

		// @property (readonly, nonatomic) MDCTextField * _Nonnull textField;
		[Export ("textField")]
		TextField TextField { get; }

		// @property (assign, nonatomic) CGFloat chipHeight;
		[Export ("chipHeight")]
		nfloat ChipHeight { get; set; }

		// @property (assign, nonatomic) BOOL showPlaceholderWithChips;
		[Export ("showPlaceholderWithChips")]
		bool ShowPlaceholderWithChips { get; set; }

		// @property (nonatomic) BOOL showChipsDeleteButton;
		[Export ("showChipsDeleteButton")]
		bool ShowChipsDeleteButton { get; set; }

		// @property (assign, nonatomic) MDCChipFieldDelimiter delimiter;
		[Export ("delimiter", ArgumentSemantic.Assign)]
		ChipFieldDelimiter Delimiter { get; set; }

		// @property (assign, nonatomic) CGFloat minTextFieldWidth;
		[Export ("minTextFieldWidth")]
		nfloat MinTextFieldWidth { get; set; }

		// @property (copy, nonatomic) NSArray<MDCChipView *> * _Nonnull chips;
		[Export ("chips", ArgumentSemantic.Copy)]
		ChipView [] Chips { get; set; }

		// @property (nonatomic, weak) id<MDCChipFieldDelegate> _Nullable delegate;
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		IChipFieldDelegate Delegate { get; set; }

		// @property (assign, nonatomic) UIEdgeInsets contentEdgeInsets;
		[Export ("contentEdgeInsets", ArgumentSemantic.Assign)]
		UIEdgeInsets ContentEdgeInsets { get; set; }

		// -(void)addChip:(MDCChipView * _Nonnull)chip;
		[Export ("addChip:")]
		void AddChip (ChipView chip);

		// -(void)removeChip:(MDCChipView * _Nonnull)chip;
		[Export ("removeChip:")]
		void RemoveChip (ChipView chip);

		// -(void)removeSelectedChips;
		[Export ("removeSelectedChips")]
		void RemoveSelectedChips ();

		// -(void)clearTextInput;
		[Export ("clearTextInput")]
		void ClearTextInput ();

		// -(void)selectChip:(MDCChipView * _Nonnull)chip;
		[Export ("selectChip:")]
		void SelectChip (ChipView chip);

		// -(void)deselectAllChips;
		[Export ("deselectAllChips")]
		void DeselectAllChips ();

		// -(void)focusTextFieldForAccessibility;
		[Export ("focusTextFieldForAccessibility")]
		void FocusTextFieldForAccessibility ();
	}

	interface IChipFieldDelegate { }

	// @protocol MDCChipFieldDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "MDCChipFieldDelegate")]
	interface ChipFieldDelegate {
		// @optional -(void)chipFieldDidBeginEditing:(MDCChipField * _Nonnull)chipField;
		[EventArgs ("ChipFieldEditingStarted")]
		[EventName ("EditingStarted")]
		[Export ("chipFieldDidBeginEditing:")]
		void DidBeginEditing (ChipField chipField);

		// @optional -(void)chipFieldDidEndEditing:(MDCChipField * _Nonnull)chipField;
		[EventArgs ("ChipFieldEditingEnded")]
		[EventName ("EditingEnded")]
		[Export ("chipFieldDidEndEditing:")]
		void DidEndEditing (ChipField chipField);

		// @optional -(void)chipField:(MDCChipField * _Nonnull)chipField didAddChip:(MDCChipView * _Nonnull)chip;
		[EventArgs ("ChipFieldChipAdded")]
		[EventName ("ChipAdded")]
		[Export ("chipField:didAddChip:")]
		void DidAddChip (ChipField chipField, ChipView chip);

		// @optional -(BOOL)chipField:(MDCChipField * _Nonnull)chipField shouldAddChip:(MDCChipView * _Nonnull)chip;
		[DefaultValue (true)]
		[DelegateName ("ChipFieldShouldAddChip")]
		[Export ("chipField:shouldAddChip:")]
		bool ShouldAddChip (ChipField chipField, ChipView chip);

		// @optional -(void)chipField:(MDCChipField * _Nonnull)chipField didRemoveChip:(MDCChipView * _Nonnull)chip;
		[EventArgs ("ChipFieldChipRemoved")]
		[EventName ("ChipRemoved")]
		[Export ("chipField:didRemoveChip:")]
		void DidRemoveChip (ChipField chipField, ChipView chip);

		// @optional -(void)chipFieldHeightDidChange:(MDCChipField * _Nonnull)chipField;
		[EventArgs ("ChipFieldHeightChanged")]
		[EventName ("HeightChanged")]
		[Export ("chipFieldHeightDidChange:")]
		void HeightDidChange (ChipField chipField);

		// @optional -(void)chipField:(MDCChipField * _Nonnull)chipField didChangeInput:(NSString * _Nullable)input;
		[EventArgs ("ChipFieldInputChanged")]
		[EventName ("InputChanged")]
		[Export ("chipField:didChangeInput:")]
		void DidChangeInput (ChipField chipField, [NullAllowed] string input);

		// @optional -(void)chipField:(MDCChipField * _Nonnull)chipField didTapChip:(MDCChipView * _Nonnull)chip;
		[EventArgs ("ChipFieldChipTapped")]
		[EventName ("ChipTapped")]
		[Export ("chipField:didTapChip:")]
		void DidTapChip (ChipField chipField, ChipView chip);

		// @optional -(BOOL)chipFieldShouldReturn:(MDCChipField * _Nonnull)chipField;
		[DefaultValue (true)]
		[DelegateName ("ChipFieldShouldReturn")]
		[Export ("chipFieldShouldReturn:")]
		bool ShouldReturn (ChipField chipField);

		// @optional -(BOOL)chipFieldShouldBecomeFirstResponder:(MDCChipField * _Nonnull)chipField;
		[DefaultValue (true)]
		[DelegateName ("ChipFieldShouldBecomeFirstResponder")]
		[Export ("chipFieldShouldBecomeFirstResponder:")]
		bool ShouldBecomeFirstResponder (ChipField chipField);
	}

	// @interface MDCChipView : UIControl
	[BaseType (typeof (UIControl), Name = "MDCChipView")]
	interface ChipView {
		// @property (readonly, nonatomic) UIImageView * _Nonnull imageView;
		[Export ("imageView")]
		UIImageView ImageView { get; }

		// @property (readonly, nonatomic) UIImageView * _Nonnull selectedImageView;
		[Export ("selectedImageView")]
		UIImageView SelectedImageView { get; }

		// @property (nonatomic, strong) UIView * _Nullable accessoryView;
		[NullAllowed]
		[Export ("accessoryView", ArgumentSemantic.Strong)]
		UIView AccessoryView { get; set; }

		// @property (readonly, nonatomic) UILabel * _Nonnull titleLabel;
		[Export ("titleLabel")]
		UILabel TitleLabel { get; }

		// @property (assign, nonatomic) UIEdgeInsets contentPadding __attribute__((annotate("ui_appearance_selector")));
		[Export ("contentPadding", ArgumentSemantic.Assign)]
		UIEdgeInsets ContentPadding { get; set; }

		// @property (assign, nonatomic) UIEdgeInsets imagePadding __attribute__((annotate("ui_appearance_selector")));
		[Export ("imagePadding", ArgumentSemantic.Assign)]
		UIEdgeInsets ImagePadding { get; set; }

		// @property (assign, nonatomic) UIEdgeInsets accessoryPadding __attribute__((annotate("ui_appearance_selector")));
		[Export ("accessoryPadding", ArgumentSemantic.Assign)]
		UIEdgeInsets AccessoryPadding { get; set; }

		// @property (assign, nonatomic) UIEdgeInsets titlePadding __attribute__((annotate("ui_appearance_selector")));
		[Export ("titlePadding", ArgumentSemantic.Assign)]
		UIEdgeInsets TitlePadding { get; set; }

		// @property (nonatomic, strong) UIFont * _Nullable titleFont __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("titleFont", ArgumentSemantic.Strong)]
		UIFont TitleFont { get; set; }

		// @property (nonatomic, strong) id<MDCShapeGenerating> _Nullable shapeGenerator __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("shapeGenerator", ArgumentSemantic.Strong)]
		IShapeGenerating ShapeGenerator { get; set; }

		// @property (readwrite, nonatomic, setter = mdc_setAdjustsFontForContentSizeCategory:) BOOL mdc_adjustsFontForContentSizeCategory __attribute__((annotate("ui_appearance_selector")));
		[Export ("mdc_adjustsFontForContentSizeCategory")]
		bool MdcAdjustsFontForContentSizeCategory { get; [Bind ("mdc_setAdjustsFontForContentSizeCategory:")] set; }

		// @property (assign, nonatomic) CGSize minimumSize __attribute__((annotate("ui_appearance_selector")));
		[Export ("minimumSize", ArgumentSemantic.Assign)]
		CGSize MinimumSize { get; set; }

		// @property (assign, nonatomic) UIEdgeInsets hitAreaInsets;
		[Export ("hitAreaInsets", ArgumentSemantic.Assign)]
		UIEdgeInsets HitAreaInsets { get; set; }

		// -(UIColor * _Nullable)backgroundColorForState:(UIControlState)state;
		[return: NullAllowed]
		[Export ("backgroundColorForState:")]
		UIColor GetBackgroundColor (UIControlState state);

		// -(void)setBackgroundColor:(UIColor * _Nullable)backgroundColor forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setBackgroundColor:forState:")]
		void SetBackgroundColor ([NullAllowed] UIColor backgroundColor, UIControlState state);

		// -(UIColor * _Nullable)borderColorForState:(UIControlState)state;
		[return: NullAllowed]
		[Export ("borderColorForState:")]
		UIColor GetBorderColor (UIControlState state);

		// -(void)setBorderColor:(UIColor * _Nullable)borderColor forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setBorderColor:forState:")]
		void SetBorderColor ([NullAllowed] UIColor borderColor, UIControlState state);

		// -(CGFloat)borderWidthForState:(UIControlState)state;
		[Export ("borderWidthForState:")]
		nfloat GetBorderWidth (UIControlState state);

		// -(void)setBorderWidth:(CGFloat)borderWidth forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setBorderWidth:forState:")]
		void SetBorderWidth (nfloat borderWidth, UIControlState state);

		// -(MDCShadowElevation)elevationForState:(UIControlState)state;
		[Export ("elevationForState:")]
		nfloat GetElevation (UIControlState state);

		// -(void)setElevation:(MDCShadowElevation)elevation forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setElevation:forState:")]
		void SetElevation (nfloat elevation, UIControlState state);

		[Wrap ("SetElevation ((nfloat)elevation, state)")]
		void SetElevation (double elevation, UIControlState state);

		// -(UIColor * _Nullable)inkColorForState:(UIControlState)state;
		[return: NullAllowed]
		[Export ("inkColorForState:")]
		UIColor GetInkColor (UIControlState state);

		// -(void)setInkColor:(UIColor * _Nullable)inkColor forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setInkColor:forState:")]
		void SetInkColor ([NullAllowed] UIColor inkColor, UIControlState state);

		// -(UIColor * _Nullable)shadowColorForState:(UIControlState)state;
		[return: NullAllowed]
		[Export ("shadowColorForState:")]
		UIColor GetShadowColor (UIControlState state);

		// -(void)setShadowColor:(UIColor * _Nullable)shadowColor forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setShadowColor:forState:")]
		void SetShadowColor ([NullAllowed] UIColor shadowColor, UIControlState state);

		// -(UIColor * _Nullable)titleColorForState:(UIControlState)state;
		[return: NullAllowed]
		[Export ("titleColorForState:")]
		UIColor GetTitleColor (UIControlState state);

		// -(void)setTitleColor:(UIColor * _Nullable)titleColor forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setTitleColor:forState:")]
		void SetTitleColor ([NullAllowed] UIColor titleColor, UIControlState state);
	}

	// @interface MDCChipViewColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCChipViewColorThemer")]
	interface ChipViewColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toChipView:(MDCChipView * _Nonnull)chipView;
		[Static]
		[Export ("applySemanticColorScheme:toChipView:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, ChipView chipView);

		// +(void)applyOutlinedVariantWithColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toChipView:(MDCChipView * _Nonnull)chipView;
		[Static]
		[Export ("applyOutlinedVariantWithColorScheme:toChipView:")]
		void ApplyOutlinedVariant (IColorScheming colorScheme, ChipView chipView);

		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toStrokedChipView:(MDCChipView * _Nonnull)strokedChipView;
		[Obsolete ("This method will soon be deprecated. Consider using ApplyOutlinedVariant method instead.")]
		[Static]
		[Export ("applySemanticColorScheme:toStrokedChipView:")]
		void ApplySemanticColorSchemeToStrokedChipView (IColorScheming colorScheme, ChipView strokedChipView);
	}

	// @interface MDCChipViewFontThemer : NSObject
	[Obsolete ("This class will soon be deprecated. Please consider using ChipViewTypographyThemer class instead.")]
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCChipViewFontThemer")]
	interface ChipViewFontThemer {
		// +(void)applyFontScheme:(id<MDCFontScheme> _Nonnull)fontScheme toChipView:(MDCChipView * _Nonnull)chipView;
		[Static]
		[Export ("applyFontScheme:toChipView:")]
		void ApplyFontScheme (IFontScheme fontScheme, ChipView chipView);
	}

	interface IChipViewScheming { }

	// @protocol MDCChipViewScheming
	[Protocol (Name = "MDCChipViewScheming ")]
	interface ChipViewScheming {
		// @required @property (readonly, nonatomic) id<MDCColorScheming> _Nonnull colorScheme;
		[Abstract]
		[Export ("colorScheme")]
		IColorScheming ColorScheme { get; }

		// @required @property (readonly, nonatomic) id<MDCShapeScheming> _Nonnull shapeScheme;
		[Abstract]
		[Export ("shapeScheme")]
		IShapeScheming ShapeScheme { get; }

		// @required @property (readonly, nonatomic) id<MDCTypographyScheming> _Nonnull typographyScheme;
		[Abstract]
		[Export ("typographyScheme")]
		ITypographyScheming TypographyScheme { get; }
	}

	// @interface MDCChipViewScheme : NSObject <MDCChipViewScheming>
	[BaseType (typeof (NSObject), Name = "MDCChipViewScheme")]
	interface ChipViewScheme : ChipViewScheming {
		// @property (readwrite, nonatomic) id<MDCColorScheming> _Nonnull colorScheme;
		[Export ("colorScheme", ArgumentSemantic.Assign)]
		new IColorScheming ColorScheme { get; set; }

		// @property (readwrite, nonatomic) id<MDCShapeScheming> _Nonnull shapeScheme;
		[Export ("shapeScheme", ArgumentSemantic.Assign)]
		new IShapeScheming ShapeScheme { get; set; }

		// @property (readwrite, nonatomic) id<MDCTypographyScheming> _Nonnull typographyScheme;
		[Export ("typographyScheme", ArgumentSemantic.Assign)]
		new ITypographyScheming TypographyScheme { get; set; }
	}

	// @interface MDCChipViewThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCChipViewThemer")]
	interface ChipViewThemer {
		// +(void)applyScheme:(id<MDCChipViewScheming> _Nonnull)scheme toChipView:(MDCChipView * _Nonnull)chip;
		[Static]
		[Export ("applyScheme:toChipView:")]
		void ApplyScheme (IChipViewScheming scheme, ChipView chip);

		// +(void)applyOutlinedVariantWithScheme:(id<MDCChipViewScheming> _Nonnull)scheme toChipView:(MDCChipView * _Nonnull)chip;
		[Static]
		[Export ("applyOutlinedVariantWithScheme:toChipView:")]
		void ApplyOutlinedVariant (IChipViewScheming scheme, ChipView chip);
	}

	// @interface MDCChipViewTypographyThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCChipViewTypographyThemer")]
	interface ChipViewTypographyThemer {
		// +(void)applyTypographyScheme:(id<MDCTypographyScheming> _Nonnull)typographyScheme toChipView:(MDCChipView * _Nonnull)chipView;
		[Static]
		[Export ("applyTypographyScheme:toChipView:")]
		void ApplyTypographyScheme (ITypographyScheming typographyScheme, ChipView chipView);
	}

	// @interface MDCChipViewShapeThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof(NSObject), Name = "MDCChipViewShapeThemer")]
	interface ChipViewShapeThemer {
		// +(void)applyShapeScheme:(id<MDCShapeScheming> _Nonnull)shapeScheme toChipView:(MDCChipView * _Nonnull)chipView;
		[Static]
		[Export ("applyShapeScheme:toChipView:")]
		void ApplyShapeScheme(IShapeScheming shapeScheme, ChipView chipView);
	}

	// @interface MDCCollectionViewCell : UICollectionViewCell
	[BaseType (typeof (UICollectionViewCell), Name = "MDCCollectionViewCell")]
	interface CollectionViewCell {
		// extern NSString *const _Nonnull kSelectedCellAccessibilityHintKey;
		[Field ("kSelectedCellAccessibilityHintKey", "__Internal")]
		NSString SelectedCellAccessibilityHintKey { get; }

		// extern NSString *const _Nonnull kDeselectedCellAccessibilityHintKey;
		[Field ("kDeselectedCellAccessibilityHintKey", "__Internal")]
		NSString DeselectedCellAccessibilityHintKey { get; }

		// extern const CGFloat MDCCollectionViewCellStyleCardSectionInset;
		[Field ("MDCCollectionViewCellStyleCardSectionInset", "__Internal")]
		nfloat StyleCardSectionInset { get; }

		// @property (nonatomic) MDCCollectionViewCellAccessoryType accessoryType;
		[Export ("accessoryType", ArgumentSemantic.Assign)]
		CollectionViewCellAccessoryType AccessoryType { get; set; }

		// @property (nonatomic, strong) UIView * _Nullable accessoryView;
		[NullAllowed]
		[Export ("accessoryView", ArgumentSemantic.Strong)]
		UIView AccessoryView { get; set; }

		// @property (nonatomic) UIEdgeInsets accessoryInset;
		[Export ("accessoryInset", ArgumentSemantic.Assign)]
		UIEdgeInsets AccessoryInset { get; set; }

		// @property (nonatomic) BOOL shouldHideSeparator;
		[Export ("shouldHideSeparator")]
		bool ShouldHideSeparator { get; set; }

		// @property (nonatomic) UIEdgeInsets separatorInset;
		[Export ("separatorInset", ArgumentSemantic.Assign)]
		UIEdgeInsets SeparatorInset { get; set; }

		// @property (nonatomic) BOOL allowsCellInteractionsWhileEditing;
		[Export ("allowsCellInteractionsWhileEditing")]
		bool AllowsCellInteractionsWhileEditing { get; set; }

		// @property (getter = isEditing, nonatomic) BOOL editing;
		[Export ("editing")]
		bool Editing { [Bind ("isEditing")] get; set; }

		// @property (nonatomic, strong) UIColor * _Null_unspecified editingSelectorColor __attribute__((annotate("ui_appearance_selector")));
		[Export ("editingSelectorColor", ArgumentSemantic.Strong)]
		UIColor EditingSelectorColor { get; set; }

		// -(void)setEditing:(BOOL)editing animated:(BOOL)animated;
		[Export ("setEditing:animated:")]
		void SetEditing (bool editing, bool animated);

		// @property (nonatomic, strong) MDCInkView * _Nullable inkView;
		[NullAllowed]
		[Export ("inkView", ArgumentSemantic.Strong)]
		InkView InkView { get; set; }
	}

	// @interface MDCCollectionViewController : UICollectionViewController <MDCCollectionViewEditingDelegate, MDCCollectionViewStylingDelegate, UICollectionViewDelegateFlowLayout>
	[BaseType (typeof (UICollectionViewController), Name = "MDCCollectionViewController")]
	interface CollectionViewController : CollectionViewEditingDelegate, CollectionViewStylingDelegate, IUICollectionViewDelegateFlowLayout {
		// @property (readonly, nonatomic, strong) id<MDCCollectionViewStyling> _Nonnull styler;
		[Export ("styler", ArgumentSemantic.Strong)]
		ICollectionViewStyling Styler { get; }

		// @property (readonly, nonatomic, strong) id<MDCCollectionViewEditing> _Nonnull editor;
		[Export ("editor", ArgumentSemantic.Strong)]
		ICollectionViewEditing Editor { get; }

		// -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldHighlightItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((objc_requires_super));
		[New]
		[RequiresSuper]
		[Export ("collectionView:shouldHighlightItemAtIndexPath:")]
		bool ShouldHighlightItem (UICollectionView collectionView, NSIndexPath indexPath);

		// -(void)collectionView:(UICollectionView * _Nonnull)collectionView didHighlightItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((objc_requires_super));
		[New]
		[RequiresSuper]
		[Export ("collectionView:didHighlightItemAtIndexPath:")]
		void ItemHighlighted (UICollectionView collectionView, NSIndexPath indexPath);

		// -(void)collectionView:(UICollectionView * _Nonnull)collectionView didUnhighlightItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((objc_requires_super));
		[New]
		[RequiresSuper]
		[Export ("collectionView:didUnhighlightItemAtIndexPath:")]
		void ItemUnhighlighted (UICollectionView collectionView, NSIndexPath indexPath);

		// -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((objc_requires_super));
		[New]
		[RequiresSuper]
		[Export ("collectionView:shouldSelectItemAtIndexPath:")]
		bool ShouldSelectItem (UICollectionView collectionView, NSIndexPath indexPath);

		// -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldDeselectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((objc_requires_super));
		[New]
		[RequiresSuper]
		[Export ("collectionView:shouldDeselectItemAtIndexPath:")]
		bool ShouldDeselectItem (UICollectionView collectionView, NSIndexPath indexPath);

		// -(void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((objc_requires_super));
		[New]
		[RequiresSuper]
		[Export ("collectionView:didSelectItemAtIndexPath:")]
		void ItemSelected (UICollectionView collectionView, NSIndexPath indexPath);

		// -(void)collectionView:(UICollectionView * _Nonnull)collectionView didDeselectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((objc_requires_super));
		[New]
		[RequiresSuper]
		[Export ("collectionView:didDeselectItemAtIndexPath:")]
		void ItemDeselected (UICollectionView collectionView, NSIndexPath indexPath);

		// -(void)collectionViewWillBeginEditing:(UICollectionView * _Nonnull)collectionView __attribute__((objc_requires_super));
		[RequiresSuper]
		[Export ("collectionViewWillBeginEditing:")]
		new void WillBeginEditing (UICollectionView collectionView);

		// -(void)collectionViewWillEndEditing:(UICollectionView * _Nonnull)collectionView __attribute__((objc_requires_super));
		[RequiresSuper]
		[Export ("collectionViewWillEndEditing:")]
		new void WillEndEditing (UICollectionView collectionView);

		// -(CGFloat)cellWidthAtSectionIndex:(NSInteger)section;
		[Export ("cellWidthAtSectionIndex:")]
		nfloat GetCellWidth (nint section);
	}

	interface ICollectionViewEditing { }

	// @protocol MDCCollectionViewEditing <NSObject>
	[Protocol (Name = "MDCCollectionViewEditing")]
	interface CollectionViewEditing {
		// @required @property (readonly, nonatomic, weak) UICollectionView * _Nullable collectionView;
		[Abstract]
		[NullAllowed]
		[Export ("collectionView", ArgumentSemantic.Weak)]
		UICollectionView CollectionView { get; }

		// @required @property (nonatomic, weak) id<MDCCollectionViewEditingDelegate> _Nullable delegate;
		[Abstract]
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		ICollectionViewEditingDelegate Delegate { get; set; }

		// @required @property (readonly, nonatomic, strong) NSIndexPath * _Nullable reorderingCellIndexPath;
		[Abstract]
		[NullAllowed]
		[Export ("reorderingCellIndexPath", ArgumentSemantic.Strong)]
		NSIndexPath ReorderingCellIndexPath { get; }

		// @required @property (readonly, nonatomic, strong) NSIndexPath * _Nullable dismissingCellIndexPath;
		[Abstract]
		[NullAllowed]
		[Export ("dismissingCellIndexPath", ArgumentSemantic.Strong)]
		NSIndexPath DismissingCellIndexPath { get; }

		// @required @property (readonly, assign, nonatomic) NSInteger dismissingSection;
		[Abstract]
		[Export ("dismissingSection")]
		nint DismissingSection { get; }

		// @required @property (getter = isEditing, nonatomic) BOOL editing;
		[Abstract]
		[Export ("editing")]
		bool Editing { [Bind ("isEditing")] get; set; }

		// @required -(void)setEditing:(BOOL)editing animated:(BOOL)animated;
		[Abstract]
		[Export ("setEditing:animated:")]
		void SetEditing (bool editing, bool animated);

		// @required -(void)updateReorderCellPosition;
		[Abstract]
		[Export ("updateReorderCellPosition")]
		void UpdateReorderCellPosition ();
	}

	interface ICollectionViewEditingDelegate { }

	// @protocol MDCCollectionViewEditingDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "MDCCollectionViewEditingDelegate")]
	interface CollectionViewEditingDelegate {
		// @optional -(BOOL)collectionViewAllowsEditing:(UICollectionView * _Nonnull)collectionView;
		[Export ("collectionViewAllowsEditing:")]
		bool AllowsEditing (UICollectionView collectionView);

		// @optional -(void)collectionViewWillBeginEditing:(UICollectionView * _Nonnull)collectionView;
		[Export ("collectionViewWillBeginEditing:")]
		void WillBeginEditing (UICollectionView collectionView);

		// @optional -(void)collectionViewDidBeginEditing:(UICollectionView * _Nonnull)collectionView;
		[Export ("collectionViewDidBeginEditing:")]
		void EditingStarted (UICollectionView collectionView);

		// @optional -(void)collectionViewWillEndEditing:(UICollectionView * _Nonnull)collectionView;
		[Export ("collectionViewWillEndEditing:")]
		void WillEndEditing (UICollectionView collectionView);

		// @optional -(void)collectionViewDidEndEditing:(UICollectionView * _Nonnull)collectionView;
		[Export ("collectionViewDidEndEditing:")]
		void EditingEnded (UICollectionView collectionView);

		// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView canEditItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
		[Export ("collectionView:canEditItemAtIndexPath:")]
		bool CanEditItem (UICollectionView collectionView, NSIndexPath indexPath);

		// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView canSelectItemDuringEditingAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
		[Export ("collectionView:canSelectItemDuringEditingAtIndexPath:")]
		bool CanSelectItemDuringEditing (UICollectionView collectionView, NSIndexPath indexPath);

		// @optional -(BOOL)collectionViewAllowsReordering:(UICollectionView * _Nonnull)collectionView;
		[Export ("collectionViewAllowsReordering:")]
		bool AllowsReordering (UICollectionView collectionView);

		// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView canMoveItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
		[Export ("collectionView:canMoveItemAtIndexPath:")]
		bool CanMoveItem (UICollectionView collectionView, NSIndexPath indexPath);

		// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView canMoveItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath toIndexPath:(NSIndexPath * _Nonnull)newIndexPath;
		[Export ("collectionView:canMoveItemAtIndexPath:toIndexPath:")]
		bool CanMoveItem (UICollectionView collectionView, NSIndexPath indexPath, NSIndexPath newIndexPath);

		// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView willMoveItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath toIndexPath:(NSIndexPath * _Nonnull)newIndexPath;
		[Export ("collectionView:willMoveItemAtIndexPath:toIndexPath:")]
		void WillMoveItem (UICollectionView collectionView, NSIndexPath indexPath, NSIndexPath newIndexPath);

		// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didMoveItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath toIndexPath:(NSIndexPath * _Nonnull)newIndexPath;
		[Export ("collectionView:didMoveItemAtIndexPath:toIndexPath:")]
		void ItemMoved (UICollectionView collectionView, NSIndexPath indexPath, NSIndexPath newIndexPath);

		// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView willBeginDraggingItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
		[Export ("collectionView:willBeginDraggingItemAtIndexPath:")]
		void WillBeginDraggingItem (UICollectionView collectionView, NSIndexPath indexPath);

		// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didEndDraggingItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
		[Export ("collectionView:didEndDraggingItemAtIndexPath:")]
		void DraggingItemEnded (UICollectionView collectionView, NSIndexPath indexPath);

		// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView willDeleteItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
		[Export ("collectionView:willDeleteItemsAtIndexPaths:")]
		void WillDeleteItems (UICollectionView collectionView, NSIndexPath [] indexPaths);

		// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didDeleteItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
		[Export ("collectionView:didDeleteItemsAtIndexPaths:")]
		void ItemsDeleted (UICollectionView collectionView, NSIndexPath [] indexPaths);

		// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView willDeleteSections:(NSIndexSet * _Nonnull)sections;
		[Export ("collectionView:willDeleteSections:")]
		void WillDeleteSections (UICollectionView collectionView, NSIndexSet sections);

		// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didDeleteSections:(NSIndexSet * _Nonnull)sections;
		[Export ("collectionView:didDeleteSections:")]
		void SectionsDeleted (UICollectionView collectionView, NSIndexSet sections);

		// @optional -(BOOL)collectionViewAllowsSwipeToDismissItem:(UICollectionView * _Nonnull)collectionView;
		[Export ("collectionViewAllowsSwipeToDismissItem:")]
		bool AllowsSwipeToDismissItem (UICollectionView collectionView);

		// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView canSwipeToDismissItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
		[Export ("collectionView:canSwipeToDismissItemAtIndexPath:")]
		bool CanSwipeToDismissItem (UICollectionView collectionView, NSIndexPath indexPath);

		// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView willBeginSwipeToDismissItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
		[Export ("collectionView:willBeginSwipeToDismissItemAtIndexPath:")]
		void WillBeginSwipeToDismissItem (UICollectionView collectionView, NSIndexPath indexPath);

		// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didEndSwipeToDismissItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
		[Export ("collectionView:didEndSwipeToDismissItemAtIndexPath:")]
		void SwipeToDismissItemEnded (UICollectionView collectionView, NSIndexPath indexPath);

		// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didCancelSwipeToDismissItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
		[Export ("collectionView:didCancelSwipeToDismissItemAtIndexPath:")]
		void SwipeToDismissItemCanceled (UICollectionView collectionView, NSIndexPath indexPath);

		// @optional -(BOOL)collectionViewAllowsSwipeToDismissSection:(UICollectionView * _Nonnull)collectionView;
		[Export ("collectionViewAllowsSwipeToDismissSection:")]
		bool AllowsSwipeToDismissSection (UICollectionView collectionView);

		// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView canSwipeToDismissSection:(NSInteger)section;
		[Export ("collectionView:canSwipeToDismissSection:")]
		bool CanSwipeToDismissSection (UICollectionView collectionView, nint section);

		// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView willBeginSwipeToDismissSection:(NSInteger)section;
		[Export ("collectionView:willBeginSwipeToDismissSection:")]
		void WillBeginSwipeToDismissSection (UICollectionView collectionView, nint section);

		// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didEndSwipeToDismissSection:(NSInteger)section;
		[Export ("collectionView:didEndSwipeToDismissSection:")]
		void SwipeToDismissSectionEnded (UICollectionView collectionView, nint section);

		// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didCancelSwipeToDismissSection:(NSInteger)section;
		[Export ("collectionView:didCancelSwipeToDismissSection:")]
		void SwipeToDismissSectionCanceled (UICollectionView collectionView, nint section);
	}

	// @interface MDCCollectionViewFlowLayout : UICollectionViewFlowLayout
	[BaseType (typeof (UICollectionViewFlowLayout), Name = "MDCCollectionViewFlowLayout")]
	interface CollectionViewFlowLayout { }

	// @interface MDCCollectionViewLayoutAttributes : UICollectionViewLayoutAttributes <NSCopying>
	[BaseType (typeof (UICollectionViewLayoutAttributes), Name = "MDCCollectionViewLayoutAttributes")]
	interface CollectionViewLayoutAttributes : INSCopying {
		// @property (getter = isEditing, nonatomic) BOOL editing;
		[Export ("editing")]
		bool Editing { [Bind ("isEditing")] get; set; }

		// @property (assign, nonatomic) BOOL shouldShowReorderStateMask;
		[Export ("shouldShowReorderStateMask")]
		bool ShouldShowReorderStateMask { get; set; }

		// @property (assign, nonatomic) BOOL shouldShowSelectorStateMask;
		[Export ("shouldShowSelectorStateMask")]
		bool ShouldShowSelectorStateMask { get; set; }

		// @property (assign, nonatomic) BOOL shouldShowGridBackground;
		[Export ("shouldShowGridBackground")]
		bool ShouldShowGridBackground { get; set; }

		// @property (nonatomic, strong) UIImage * _Nullable backgroundImage;
		[NullAllowed]
		[Export ("backgroundImage", ArgumentSemantic.Strong)]
		UIImage BackgroundImage { get; set; }

		// @property (nonatomic) UIEdgeInsets backgroundImageViewInsets;
		[Export ("backgroundImageViewInsets", ArgumentSemantic.Assign)]
		UIEdgeInsets BackgroundImageViewInsets { get; set; }

		// @property (assign, nonatomic) BOOL isGridLayout;
		[Export ("isGridLayout")]
		bool IsGridLayout { get; set; }

		// @property (assign, nonatomic) MDCCollectionViewOrdinalPosition sectionOrdinalPosition;
		[Export ("sectionOrdinalPosition", ArgumentSemantic.Assign)]
		CollectionViewOrdinalPosition SectionOrdinalPosition { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable separatorColor;
		[NullAllowed]
		[Export ("separatorColor", ArgumentSemantic.Strong)]
		UIColor SeparatorColor { get; set; }

		// @property (nonatomic) UIEdgeInsets separatorInset;
		[Export ("separatorInset", ArgumentSemantic.Assign)]
		UIEdgeInsets SeparatorInset { get; set; }

		// @property (nonatomic) CGFloat separatorLineHeight;
		[Export ("separatorLineHeight")]
		nfloat SeparatorLineHeight { get; set; }

		// @property (nonatomic) BOOL shouldHideSeparators;
		[Export ("shouldHideSeparators")]
		bool ShouldHideSeparators { get; set; }

		// @property (assign, nonatomic) BOOL willAnimateCellsOnAppearance;
		[Export ("willAnimateCellsOnAppearance")]
		bool WillAnimateCellsOnAppearance { get; set; }

		// @property (assign, nonatomic) NSTimeInterval animateCellsOnAppearanceDuration;
		[Export ("animateCellsOnAppearanceDuration")]
		double AnimateCellsOnAppearanceDuration { get; set; }

		// @property (assign, nonatomic) NSTimeInterval animateCellsOnAppearanceDelay;
		[Export ("animateCellsOnAppearanceDelay")]
		double AnimateCellsOnAppearanceDelay { get; set; }
	}

	interface ICollectionViewStyling { }

	// @protocol MDCCollectionViewStyling <NSObject>
	[Protocol (Name = "MDCCollectionViewStyling")]
	interface CollectionViewStyling {
		// @required @property (readonly, nonatomic, weak) UICollectionView * _Nullable collectionView;
		[Abstract]
		[NullAllowed]
		[Export ("collectionView", ArgumentSemantic.Weak)]
		UICollectionView CollectionView { get; }

		// @required @property (nonatomic, weak) id<MDCCollectionViewStylingDelegate> _Nullable delegate;
		[Abstract]
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		ICollectionViewStylingDelegate Delegate { get; set; }

		// @required @property (assign, nonatomic) BOOL shouldInvalidateLayout;
		[Abstract]
		[Export ("shouldInvalidateLayout")]
		bool ShouldInvalidateLayout { get; set; }

		// @required @property (nonatomic, strong) UIColor * _Nonnull cellBackgroundColor;
		[Abstract]
		[Export ("cellBackgroundColor", ArgumentSemantic.Strong)]
		UIColor CellBackgroundColor { get; set; }

		// @required @property (assign, nonatomic) MDCCollectionViewCellLayoutType cellLayoutType;
		[Abstract]
		[Export ("cellLayoutType", ArgumentSemantic.Assign)]
		CollectionViewCellLayoutType CellLayoutType { get; set; }

		// @required @property (assign, nonatomic) NSInteger gridColumnCount;
		[Abstract]
		[Export ("gridColumnCount")]
		nint GridColumnCount { get; set; }

		// @required @property (assign, nonatomic) CGFloat gridPadding;
		[Abstract]
		[Export ("gridPadding")]
		nfloat GridPadding { get; set; }

		// @required @property (assign, nonatomic) MDCCollectionViewCellStyle cellStyle;
		[Abstract]
		[Export ("cellStyle", ArgumentSemantic.Assign)]
		CollectionViewCellStyle CellStyle { get; set; }

		// @required @property (nonatomic) CGFloat cardBorderRadius;
		[Abstract]
		[Export ("cardBorderRadius")]
		nfloat CardBorderRadius { get; set; }

		// @required -(void)setCellStyle:(MDCCollectionViewCellStyle)cellStyle animated:(BOOL)animated;
		[Abstract]
		[Export ("setCellStyle:animated:")]
		void SetCellStyle (CollectionViewCellStyle cellStyle, bool animated);

		// @required -(MDCCollectionViewCellStyle)cellStyleAtSectionIndex:(NSInteger)section;
		[Abstract]
		[Export ("cellStyleAtSectionIndex:")]
		CollectionViewCellStyle GetCellStyle (nint section);

		// @required -(UIEdgeInsets)backgroundImageViewOutsetsForCellWithAttribute:(MDCCollectionViewLayoutAttributes * _Nonnull)attr;
		[Abstract]
		[Export ("backgroundImageViewOutsetsForCellWithAttribute:")]
		UIEdgeInsets GetBackgroundImageViewOutsetsForCell (CollectionViewLayoutAttributes attr);

		// @required -(UIImage * _Nullable)backgroundImageForCellLayoutAttributes:(MDCCollectionViewLayoutAttributes * _Nonnull)attr;
		[Abstract]
		[return: NullAllowed]
		[Export ("backgroundImageForCellLayoutAttributes:")]
		UIImage GetBackgroundImageForCell (CollectionViewLayoutAttributes attr);

		// @required @property (nonatomic, strong) UIColor * _Nullable separatorColor;
		[Abstract]
		[NullAllowed]
		[Export ("separatorColor", ArgumentSemantic.Strong)]
		UIColor SeparatorColor { get; set; }

		// @required @property (nonatomic) UIEdgeInsets separatorInset;
		[Abstract]
		[Export ("separatorInset", ArgumentSemantic.Assign)]
		UIEdgeInsets SeparatorInset { get; set; }

		// @required @property (nonatomic) CGFloat separatorLineHeight;
		[Abstract]
		[Export ("separatorLineHeight")]
		nfloat SeparatorLineHeight { get; set; }

		// @required @property (nonatomic) BOOL shouldHideSeparators;
		[Abstract]
		[Export ("shouldHideSeparators")]
		bool ShouldHideSeparators { get; set; }

		// @required -(BOOL)shouldHideSeparatorForCellLayoutAttributes:(MDCCollectionViewLayoutAttributes * _Nonnull)attr;
		[Abstract]
		[Export ("shouldHideSeparatorForCellLayoutAttributes:")]
		bool ShouldHideSeparatorForCellLayoutAttributes (CollectionViewLayoutAttributes attr);

		// @required @property (assign, nonatomic) BOOL allowsItemInlay;
		[Abstract]
		[Export ("allowsItemInlay")]
		bool AllowsItemInlay { get; set; }

		// @required @property (assign, nonatomic) BOOL allowsMultipleItemInlays;
		[Abstract]
		[Export ("allowsMultipleItemInlays")]
		bool AllowsMultipleItemInlays { get; set; }

		// @required -(NSArray<NSIndexPath *> * _Nullable)indexPathsForInlaidItems;
		[Abstract]
		[NullAllowed]
		[Export ("indexPathsForInlaidItems")]
		NSIndexPath [] IndexPathsForInlaidItems { get; }

		// @required -(BOOL)isItemInlaidAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
		[Abstract]
		[Export ("isItemInlaidAtIndexPath:")]
		bool IsItemInlaid (NSIndexPath indexPath);

		// @required -(void)applyInlayToItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath animated:(BOOL)animated;
		[Abstract]
		[Export ("applyInlayToItemAtIndexPath:animated:")]
		void ApplyInlayToItem (NSIndexPath indexPath, bool animated);

		// @required -(void)removeInlayFromItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath animated:(BOOL)animated;
		[Abstract]
		[Export ("removeInlayFromItemAtIndexPath:animated:")]
		void RemoveInlayFromItem (NSIndexPath indexPath, bool animated);

		// @required -(void)applyInlayToAllItemsAnimated:(BOOL)animated;
		[Abstract]
		[Export ("applyInlayToAllItemsAnimated:")]
		void ApplyInlayToAllItems (bool animated);

		// @required -(void)removeInlayFromAllItemsAnimated:(BOOL)animated;
		[Abstract]
		[Export ("removeInlayFromAllItemsAnimated:")]
		void RemoveInlayFromAllItems (bool animated);

		// @required -(void)resetIndexPathsForInlaidItems;
		[Abstract]
		[Export ("resetIndexPathsForInlaidItems")]
		void ResetIndexPathsForInlaidItems ();

		// @required @property (assign, nonatomic) BOOL shouldAnimateCellsOnAppearance;
		[Abstract]
		[Export ("shouldAnimateCellsOnAppearance")]
		bool ShouldAnimateCellsOnAppearance { get; set; }

		// @required @property (readonly, assign, nonatomic) BOOL willAnimateCellsOnAppearance;
		[Abstract]
		[Export ("willAnimateCellsOnAppearance")]
		bool WillAnimateCellsOnAppearance { get; }

		// @required @property (readonly, assign, nonatomic) CGFloat animateCellsOnAppearancePadding;
		[Abstract]
		[Export ("animateCellsOnAppearancePadding")]
		nfloat AnimateCellsOnAppearancePadding { get; }

		// @required @property (readonly, assign, nonatomic) NSTimeInterval animateCellsOnAppearanceDuration;
		[Abstract]
		[Export ("animateCellsOnAppearanceDuration")]
		double AnimateCellsOnAppearanceDuration { get; }

		// @required -(void)beginCellAppearanceAnimation;
		[Abstract]
		[Export ("beginCellAppearanceAnimation")]
		void BeginCellAppearanceAnimation ();
	}

	interface ICollectionViewStylingDelegate { }

	// @protocol MDCCollectionViewStylingDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "MDCCollectionViewStylingDelegate")]
	interface CollectionViewStylingDelegate {
		// @optional -(CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView cellHeightAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
		[Export ("collectionView:cellHeightAtIndexPath:")]
		nfloat GetCellHeight (UICollectionView collectionView, NSIndexPath indexPath);

		// @optional -(MDCCollectionViewCellStyle)collectionView:(UICollectionView * _Nonnull)collectionView cellStyleForSection:(NSInteger)section;
		[Export ("collectionView:cellStyleForSection:")]
		CollectionViewCellStyle CellStyleForSection (UICollectionView collectionView, nint section);

		// @optional -(UIColor * _Nullable)collectionView:(UICollectionView * _Nonnull)collectionView cellBackgroundColorAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
		[return: NullAllowed]
		[Export ("collectionView:cellBackgroundColorAtIndexPath:")]
		UIColor GetCellBackgroundColor (UICollectionView collectionView, NSIndexPath indexPath);

		// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldHideItemBackgroundAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
		[Export ("collectionView:shouldHideItemBackgroundAtIndexPath:")]
		bool ShouldHideItemBackground (UICollectionView collectionView, NSIndexPath indexPath);

		// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldHideHeaderBackgroundForSection:(NSInteger)section;
		[Export ("collectionView:shouldHideHeaderBackgroundForSection:")]
		bool ShouldHideHeaderBackground (UICollectionView collectionView, nint section);

		// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldHideFooterBackgroundForSection:(NSInteger)section;
		[Export ("collectionView:shouldHideFooterBackgroundForSection:")]
		bool ShouldHideFooterBackground (UICollectionView collectionView, nint section);

		// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldHideItemSeparatorAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
		[Export ("collectionView:shouldHideItemSeparatorAtIndexPath:")]
		bool ShouldHideItemSeparator (UICollectionView collectionView, NSIndexPath indexPath);

		// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldHideHeaderSeparatorForSection:(NSInteger)section;
		[Export ("collectionView:shouldHideHeaderSeparatorForSection:")]
		bool ShouldHideHeaderSeparator (UICollectionView collectionView, nint section);

		// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldHideFooterSeparatorForSection:(NSInteger)section;
		[Export ("collectionView:shouldHideFooterSeparatorForSection:")]
		bool ShouldHideFooterSeparator (UICollectionView collectionView, nint section);

		// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didApplyInlayToItemAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
		[Export ("collectionView:didApplyInlayToItemAtIndexPaths:")]
		void InlayToItemApplied (UICollectionView collectionView, NSIndexPath [] indexPaths);

		// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didRemoveInlayFromItemAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
		[Export ("collectionView:didRemoveInlayFromItemAtIndexPaths:")]
		void InlayFromItemRemoved (UICollectionView collectionView, NSIndexPath [] indexPaths);

		// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView hidesInkViewAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
		[Export ("collectionView:hidesInkViewAtIndexPath:")]
		bool HidesInkView (UICollectionView collectionView, NSIndexPath indexPath);

		// @optional -(UIColor * _Nullable)collectionView:(UICollectionView * _Nonnull)collectionView inkColorAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
		[return: NullAllowed]
		[Export ("collectionView:inkColorAtIndexPath:")]
		UIColor GetInkColor (UICollectionView collectionView, NSIndexPath indexPath);

		// @optional -(MDCInkView * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView inkTouchController:(MDCInkTouchController * _Nonnull)inkTouchController inkViewAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
		[Export ("collectionView:inkTouchController:inkViewAtIndexPath:")]
		InkView GetInkView (UICollectionView collectionView, InkTouchController inkTouchController, NSIndexPath indexPath);
	}

	// @interface MDCCollectionViewTextCell : MDCCollectionViewCell
	[BaseType (typeof (CollectionViewCell), Name = "MDCCollectionViewTextCell")]
	interface CollectionViewTextCell {
		// extern const CGFloat MDCCellDefaultOneLineHeight;
		[Field ("MDCCellDefaultOneLineHeight", "__Internal")]
		nfloat DefaultOneLineHeight { get; }

		// extern const CGFloat MDCCellDefaultOneLineWithAvatarHeight;
		[Field ("MDCCellDefaultOneLineWithAvatarHeight", "__Internal")]
		nfloat DefaultOneLineWithAvatarHeight { get; }

		// extern const CGFloat MDCCellDefaultTwoLineHeight;
		[Field ("MDCCellDefaultTwoLineHeight", "__Internal")]
		nfloat DefaultTwoLineHeight { get; }

		// extern const CGFloat MDCCellDefaultThreeLineHeight;
		[Field ("MDCCellDefaultThreeLineHeight", "__Internal")]
		nfloat DefaultThreeLineHeight { get; }

		// @property (readonly, nonatomic, strong) UILabel * _Nullable textLabel;
		[NullAllowed]
		[Export ("textLabel", ArgumentSemantic.Strong)]
		UILabel TextLabel { get; }

		// @property (readonly, nonatomic, strong) UILabel * _Nullable detailTextLabel;
		[NullAllowed]
		[Export ("detailTextLabel", ArgumentSemantic.Strong)]
		UILabel DetailTextLabel { get; }

		// @property (readonly, nonatomic, strong) UIImageView * _Nullable imageView;
		[NullAllowed]
		[Export ("imageView", ArgumentSemantic.Strong)]
		UIImageView ImageView { get; }
	}

	// @interface MDCContainedButtonColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCContainedButtonColorThemer")]
	interface ContainedButtonColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toButton:(MDCButton * _Nonnull)button;
		[Static]
		[Export ("applySemanticColorScheme:toButton:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, Button button);
	}

	// @interface MDCContainedButtonThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCContainedButtonThemer")]
	interface ContainedButtonThemer {
		// +(void)applyScheme:(id<MDCButtonScheming> _Nonnull)scheme toButton:(MDCButton * _Nonnull)button;
		[Static]
		[Export ("applyScheme:toButton:")]
		void ApplyScheme (IButtonScheming scheme, Button button);
	}

	// @interface MDCCornerTreatment : NSObject <NSCopying>
	[BaseType (typeof (NSObject), Name = "MDCCornerTreatment")]
	interface CornerTreatment : INSCopying {
		// @property (assign, nonatomic) MDCCornerTreatmentValueType valueType;
		[Export ("valueType", ArgumentSemantic.Assign)]
		CornerTreatmentValueType ValueType { get; set; }

		// -(MDCPathGenerator * _Nonnull)pathGeneratorForCornerWithAngle:(CGFloat)angle;
		[Export ("pathGeneratorForCornerWithAngle:")]
		PathGenerator PathGeneratorForCornerWithAngle (nfloat angle);

		// -(MDCPathGenerator * _Nonnull)pathGeneratorForCornerWithAngle:(CGFloat)angle forViewSize:(CGSize)size;
		[Export ("pathGeneratorForCornerWithAngle:forViewSize:")]
		PathGenerator PathGeneratorForCornerWithAngle (nfloat angle, CGSize size);

		//
		// From CornerTypeInitalizer (MDCCornerTreatment)
		//

		// +(MDCRoundedCornerTreatment *)cornerWithRadius:(CGFloat)value;
		[Static]
		[Export ("cornerWithRadius:")]
		RoundedCornerTreatment CreateCornerWithRadius (nfloat value);

		// +(MDCRoundedCornerTreatment *)cornerWithRadius:(CGFloat)value valueType:(MDCCornerTreatmentValueType)valueType;
		[Static]
		[Export ("cornerWithRadius:valueType:")]
		RoundedCornerTreatment CreateCornerWithRadius (nfloat value, CornerTreatmentValueType valueType);

		// +(MDCCutCornerTreatment *)cornerWithCut:(CGFloat)value;
		[Static]
		[Export ("cornerWithCut:")]
		CutCornerTreatment CreateCornerWithCut (nfloat value);

		// +(MDCCutCornerTreatment *)cornerWithCut:(CGFloat)value valueType:(MDCCornerTreatmentValueType)valueType;
		[Static]
		[Export ("cornerWithCut:valueType:")]
		CutCornerTreatment CreateCornerWithCut (nfloat value, CornerTreatmentValueType valueType);

		// +(MDCCurvedCornerTreatment *)cornerWithCurve:(CGSize)value;
		[Static]
		[Export ("cornerWithCurve:")]
		CurvedCornerTreatment CreateCornerWithCurve (CGSize value);

		// +(MDCCurvedCornerTreatment *)cornerWithCurve:(CGSize)value valueType:(MDCCornerTreatmentValueType)valueType;
		[Static]
		[Export ("cornerWithCurve:valueType:")]
		CurvedCornerTreatment CreateCornerWithCurve (CGSize value, CornerTreatmentValueType valueType);
	}

	// @interface MDCCurvedCornerTreatment : MDCCornerTreatment
	[BaseType (typeof (CornerTreatment), Name = "MDCCurvedCornerTreatment")]
	interface CurvedCornerTreatment {
		// @property (assign, nonatomic) CGSize size;
		[Export ("size", ArgumentSemantic.Assign)]
		CGSize Size { get; set; }

		// -(instancetype _Nonnull)initWithSize:(CGSize)size __attribute__((objc_designated_initializer));
		[DesignatedInitializer]
		[Export ("initWithSize:")]
		IntPtr Constructor (CGSize size);
	}

	// @interface MDCCurvedRectShapeGenerator : NSObject <MDCShapeGenerating>
	[BaseType (typeof (NSObject), Name = "MDCCurvedRectShapeGenerator")]
	interface CurvedRectShapeGenerator : ShapeGenerating {
		// @property (assign, nonatomic) CGSize cornerSize;
		[Export ("cornerSize", ArgumentSemantic.Assign)]
		CGSize CornerSize { get; set; }

		// -(instancetype)initWithCornerSize:(CGSize)cornerSize __attribute__((objc_designated_initializer));
		[DesignatedInitializer]
		[Export ("initWithCornerSize:")]
		IntPtr Constructor (CGSize cornerSize);
	}

	// @interface MDCCutCornerTreatment : MDCCornerTreatment
	[BaseType (typeof (CornerTreatment), Name = "MDCCutCornerTreatment")]
	interface CutCornerTreatment {
		// @property (assign, nonatomic) CGFloat cut;
		[Export ("cut")]
		nfloat Cut { get; set; }

		// -(instancetype _Nonnull)initWithCut:(CGFloat)cut __attribute__((objc_designated_initializer));
		[DesignatedInitializer]
		[Export ("initWithCut:")]
		IntPtr Constructor (nfloat cut);
	}

	// @interface MDCDialogPresentationController : UIPresentationController
	[BaseType (typeof (UIPresentationController), Name = "MDCDialogPresentationController")]
	interface DialogPresentationController {
		// @property (assign, nonatomic) BOOL dismissOnBackgroundTap;
		[Export ("dismissOnBackgroundTap")]
		bool DismissOnBackgroundTap { get; set; }

		// @property (assign, nonatomic) CGFloat dialogCornerRadius;
		[Export ("dialogCornerRadius")]
		nfloat DialogCornerRadius { get; set; }

		// @property (assign, nonatomic) MDCShadowElevation dialogElevation;
		[Export ("dialogElevation")]
		nfloat DialogElevation { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable scrimColor;
		[NullAllowed, Export ("scrimColor", ArgumentSemantic.Strong)]
		UIColor ScrimColor { get; set; }

		// -(CGSize)sizeForChildContentContainer:(id<UIContentContainer> _Nonnull)container withParentContainerSize:(CGSize)parentSize;
		[New]
		[Export ("sizeForChildContentContainer:withParentContainerSize:")]
		CGSize GetSizeForChildContentContainer (IUIContentContainer container, CGSize parentSize);

		// -(CGRect)frameOfPresentedViewInContainerView;
		[Export ("frameOfPresentedViewInContainerView")]
		CGRect GetFrameOfPresentedViewInContainerView ();
	}

	// @interface MDCDialogTransitionController : NSObject <UIViewControllerAnimatedTransitioning, UIViewControllerTransitioningDelegate>
	[BaseType (typeof (NSObject), Name = "MDCDialogTransitionController")]
	interface DialogTransitionController : IUIViewControllerAnimatedTransitioning, IUIViewControllerTransitioningDelegate { }

	// @interface MDCEdgeTreatment : NSObject <NSCopying>
	[BaseType (typeof (NSObject), Name = "MDCEdgeTreatment")]
	interface EdgeTreatment : INSCopying {
		// -(MDCPathGenerator * _Nonnull)pathGeneratorForEdgeWithLength:(CGFloat)length;
		[Export ("pathGeneratorForEdgeWithLength:")]
		PathGenerator GetPathGeneratorForEdge (nfloat length);
	}

	// @interface MDCFeatureHighlightAccessibilityMutator : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCFeatureHighlightAccessibilityMutator")]
	interface FeatureHighlightAccessibilityMutator {
		// +(void)mutate:(MDCFeatureHighlightViewController *)featureHighlightViewController;
		[Static]
		[Export ("mutate:")]
		void Mutate (FeatureHighlightViewController featureHighlightViewController);
	}

	// @interface MDCFeatureHighlightColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCFeatureHighlightColorThemer")]
	interface FeatureHighlightColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toFeatureHighlightViewController:(MDCFeatureHighlightViewController * _Nonnull)featureHighlightViewController;
		[Static]
		[Export ("applySemanticColorScheme:toFeatureHighlightViewController:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, FeatureHighlightViewController featureHighlightViewController);

		// +(void)applyColorScheme:(NSObject<MDCColorScheme> *)colorScheme toFeatureHighlightView:(MDCFeatureHighlightView *)featureHighlightView;
		[Obsolete (" This method will soon be deprecated. Consider using ApplySemanticColorScheme method instead.")]
		[Static]
		[Export ("applyColorScheme:toFeatureHighlightView:")]
		void ApplyColorScheme (IColorScheme colorScheme, FeatureHighlightView featureHighlightView);
	}

	// @interface MDCFeatureHighlightFontThemer : NSObject
	[Obsolete ("This class will soon be deprecated. Please consider using FeatureHighlightTypographyThemer class instead.")]
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCFeatureHighlightFontThemer")]
	interface FeatureHighlightFontThemer {
		// +(void)applyFontScheme:(id<MDCFontScheme> _Nonnull)fontScheme toFeatureHighlightView:(MDCFeatureHighlightView * _Nonnull)featureHighlightView;
		[Static]
		[Export ("applyFontScheme:toFeatureHighlightView:")]
		void ApplyFontScheme (IFontScheme fontScheme, FeatureHighlightView featureHighlightView);
	}

	// @interface MDCFeatureHighlightTypographyThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCFeatureHighlightTypographyThemer")]
	interface FeatureHighlightTypographyThemer {
		// +(void)applyTypographyScheme:(id<MDCTypographyScheming> _Nonnull)typographyScheme toFeatureHighlightViewController:(MDCFeatureHighlightViewController * _Nonnull)featureHighlightViewController;
		[Static]
		[Export ("applyTypographyScheme:toFeatureHighlightViewController:")]
		void ApplyTypographyScheme (ITypographyScheming typographyScheme, FeatureHighlightViewController featureHighlightViewController);
	}

	// @interface MDCFeatureHighlightView : UIView
	[BaseType (typeof (UIView), Name = "MDCFeatureHighlightView")]
	interface FeatureHighlightView {
		// @property (nonatomic, strong) UIColor * _Nullable innerHighlightColor __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("innerHighlightColor", ArgumentSemantic.Strong)]
		UIColor InnerHighlightColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable outerHighlightColor __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("outerHighlightColor", ArgumentSemantic.Strong)]
		UIColor OuterHighlightColor { get; set; }

		// @property (nonatomic, strong) UIFont * _Nullable titleFont __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("titleFont", ArgumentSemantic.Strong)]
		UIFont TitleFont { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable titleColor __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("titleColor", ArgumentSemantic.Strong)]
		UIColor TitleColor { get; set; }

		// @property (nonatomic, strong) UIFont * _Nullable bodyFont __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("bodyFont", ArgumentSemantic.Strong)]
		UIFont BodyFont { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable bodyColor __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("bodyColor", ArgumentSemantic.Strong)]
		UIColor BodyColor { get; set; }

		// @property (readwrite, nonatomic, setter = mdc_setAdjustsFontForContentSizeCategory:) BOOL mdc_adjustsFontForContentSizeCategory __attribute__((annotate("ui_appearance_selector")));
		[Export ("mdc_adjustsFontForContentSizeCategory")]
		bool MdcAdjustsFontForContentSizeCategory { get; [Bind ("mdc_setAdjustsFontForContentSizeCategory:")] set; }
	}

	// typedef void (^MDCFeatureHighlightCompletion)(BOOL);
	delegate void FeatureHighlightCompletionHandler (bool accepted);

	// @interface MDCFeatureHighlightViewController : UIViewController
	[DisableDefaultCtor]
	[BaseType (typeof (UIViewController), Name = "MDCFeatureHighlightViewController")]
	interface FeatureHighlightViewController {
		// extern const CGFloat kMDCFeatureHighlightOuterHighlightAlpha;
		[Field ("kMDCFeatureHighlightOuterHighlightAlpha", "__Internal")]
		nfloat FeatureHighlightOuterHighlightAlpha { get; }

		// -(instancetype _Nonnull)initWithHighlightedView:(UIView * _Nonnull)highlightedView andShowView:(UIView * _Nonnull)displayedView completion:(MDCFeatureHighlightCompletion _Nullable)completion __attribute__((objc_designated_initializer));
		[DesignatedInitializer]
		[Export ("initWithHighlightedView:andShowView:completion:")]
		IntPtr Constructor (UIView highlightedView, UIView displayedView, [NullAllowed] FeatureHighlightCompletionHandler completion);

		// -(instancetype _Nonnull)initWithHighlightedView:(UIView * _Nonnull)highlightedView completion:(MDCFeatureHighlightCompletion _Nullable)completion;
		[Export ("initWithHighlightedView:completion:")]
		IntPtr Constructor (UIView highlightedView, [NullAllowed] FeatureHighlightCompletionHandler completion);

		// @property (copy, nonatomic) NSString * _Nullable titleText;
		[NullAllowed]
		[Export ("titleText")]
		string TitleText { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable bodyText;
		[NullAllowed]
		[Export ("bodyText")]
		string BodyText { get; set; }

		// @property (nonatomic, strong) UIColor * _Null_unspecified outerHighlightColor;
		[Export ("outerHighlightColor", ArgumentSemantic.Strong)]
		UIColor OuterHighlightColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Null_unspecified innerHighlightColor;
		[Export ("innerHighlightColor", ArgumentSemantic.Strong)]
		UIColor InnerHighlightColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable titleColor;
		[NullAllowed]
		[Export ("titleColor", ArgumentSemantic.Strong)]
		UIColor TitleColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable bodyColor;
		[NullAllowed]
		[Export ("bodyColor", ArgumentSemantic.Strong)]
		UIColor BodyColor { get; set; }

		// @property (nonatomic, strong) UIFont * _Nullable titleFont;
		[NullAllowed]
		[Export ("titleFont", ArgumentSemantic.Strong)]
		UIFont TitleFont { get; set; }

		// @property (nonatomic, strong) UIFont * _Nullable bodyFont;
		[NullAllowed]
		[Export ("bodyFont", ArgumentSemantic.Strong)]
		UIFont BodyFont { get; set; }

		// @property (readwrite, nonatomic, setter = mdc_setAdjustsFontForContentSizeCategory:) BOOL mdc_adjustsFontForContentSizeCategory __attribute__((annotate("ui_appearance_selector")));
		[Export ("mdc_adjustsFontForContentSizeCategory")]
		bool MdcAdjustsFontForContentSizeCategory { get; [Bind ("mdc_setAdjustsFontForContentSizeCategory:")] set; }

		// -(void)acceptFeature;
		[Export ("acceptFeature")]
		void AcceptFeature ();

		// -(void)rejectFeature;
		[Export ("rejectFeature")]
		void RejectFeature ();
	}

	// @interface MDCFilledTextFieldColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCFilledTextFieldColorThemer")]
	interface FilledTextFieldColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toTextInputControllerFilled:(MDCTextInputControllerFilled * _Nonnull)textInputControllerFilled;
		[Static]
		[Export ("applySemanticColorScheme:toTextInputControllerFilled:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, TextInputControllerFilled textInputControllerFilled);
	}

	// @interface MDCFlatButton : MDCButton
	[Obsolete ("This class will be deprecated soon. Consider using TextButtonThemer with a Button instead.")]
	[BaseType (typeof (Button), Name = "MDCFlatButton")]
	interface FlatButton {
		// @property (nonatomic) BOOL hasOpaqueBackground;
		[Export ("hasOpaqueBackground")]
		bool HasOpaqueBackground { get; set; }
	}

	// @interface MDCFlexibleHeaderColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCFlexibleHeaderColorThemer")]
	interface FlexibleHeaderColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toFlexibleHeaderView:(MDCFlexibleHeaderView * _Nonnull)flexibleHeaderView;
		[Static]
		[Export ("applySemanticColorScheme:toFlexibleHeaderView:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, FlexibleHeaderView flexibleHeaderView);

		// +(void)applySurfaceVariantWithColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toFlexibleHeaderView:(MDCFlexibleHeaderView * _Nonnull)flexibleHeaderView;
		[Static]
		[Export ("applySurfaceVariantWithColorScheme:toFlexibleHeaderView:")]
		void ApplySurfaceVariant (IColorScheming colorScheme, FlexibleHeaderView flexibleHeaderView);

		// +(void)applyColorScheme:(NSObject<MDCColorScheme> *)colorScheme toFlexibleHeaderView:(MDCFlexibleHeaderView *)flexibleHeaderView;
		[Obsolete ("This method will soon be deprecated. Consider using ApplySemanticColorScheme method instead.")]
		[Static]
		[Export ("applyColorScheme:toFlexibleHeaderView:")]
		void ApplyColorScheme (IColorScheme colorScheme, FlexibleHeaderView flexibleHeaderView);

		// +(void)applyColorScheme:(NSObject<MDCColorScheme> *)colorScheme toMDCFlexibleHeaderController:(MDCFlexibleHeaderViewController *)flexibleHeaderController;
		[Obsolete ("This method will soon be deprecated. Consider using ApplySemanticColorScheme method instead.")]
		[Static]
		[Export ("applyColorScheme:toMDCFlexibleHeaderController:")]
		void ApplyColorScheme (IColorScheme colorScheme, FlexibleHeaderViewController flexibleHeaderController);
	}

	// @interface MDCFlexibleHeaderContainerViewController : UIViewController
	[BaseType (typeof (UIViewController), Name = "MDCFlexibleHeaderContainerViewController")]
	interface FlexibleHeaderContainerViewController {
		// -(instancetype _Nonnull)initWithContentViewController:(UIViewController * _Nullable)contentViewController __attribute__((objc_designated_initializer));
		[DesignatedInitializer]
		[Export ("initWithContentViewController:")]
		IntPtr Constructor ([NullAllowed] UIViewController contentViewController);

		// @property (readonly, nonatomic, strong) MDCFlexibleHeaderViewController * _Nonnull headerViewController;
		[Export ("headerViewController", ArgumentSemantic.Strong)]
		FlexibleHeaderViewController HeaderViewController { get; }

		// @property (nonatomic, strong) UIViewController * _Nullable contentViewController;
		[NullAllowed]
		[Export ("contentViewController", ArgumentSemantic.Strong)]
		UIViewController ContentViewController { get; set; }

		// @property (getter = isTopLayoutGuideAdjustmentEnabled, nonatomic) BOOL topLayoutGuideAdjustmentEnabled;
		[Export ("topLayoutGuideAdjustmentEnabled")]
		bool TopLayoutGuideAdjustmentEnabled { [Bind ("isTopLayoutGuideAdjustmentEnabled")] get; set; }
	}

	// typedef void (^MDCFlexibleHeaderChangeContentInsetsBlock)();
	delegate void FlexibleHeaderChangeContentInsetsHandler ();

	// typedef void (^MDCFlexibleHeaderShadowIntensityChangeBlock)(CALayer * _Nonnull, CGFloat);
	delegate void FlexibleHeaderShadowIntensityChangeHandler (CALayer shadowLayer, nfloat intensity);

	// @interface MDCFlexibleHeaderView : UIView
	[BaseType (typeof (UIView),
		   Name = "MDCFlexibleHeaderView",
		   Delegates = new [] { "Delegate" },
		   Events = new [] { typeof (FlexibleHeaderViewDelegate) })]
	interface FlexibleHeaderView {
		// @property (nonatomic, strong) CALayer * _Nullable shadowLayer;
		[NullAllowed]
		[Export ("shadowLayer", ArgumentSemantic.Strong)]
		CALayer ShadowLayer { get; set; }

		// -(void)setShadowLayer:(CALayer * _Nonnull)shadowLayer intensityDidChangeBlock:(MDCFlexibleHeaderShadowIntensityChangeBlock _Nonnull)block;
		[Export ("setShadowLayer:intensityDidChangeBlock:")]
		void SetShadowLayer (CALayer shadowLayer, FlexibleHeaderShadowIntensityChangeHandler block);

		// -(void)trackingScrollViewDidScroll;
		[Advice ("Do not invoke this method if ObservesTrackingScrollViewScrollEvents property is set to true.")]
		[Export ("trackingScrollViewDidScroll")]
		void TrackingScrollViewDidScroll ();

		// -(void)trackingScrollWillChangeToScrollView:(UIScrollView * _Nullable)scrollView;
		[Export ("trackingScrollWillChangeToScrollView:")]
		void TrackingScrollWillChangeToScrollView ([NullAllowed] UIScrollView scrollView);

		// @property (readonly, nonatomic) BOOL prefersStatusBarHidden;
		[Export ("prefersStatusBarHidden")]
		bool PrefersStatusBarHidden { get; }

		// -(void)interfaceOrientationWillChange;
		[Export ("interfaceOrientationWillChange")]
		void InterfaceOrientationWillChange ();

		// -(void)interfaceOrientationIsChanging;
		[Export ("interfaceOrientationIsChanging")]
		void InterfaceOrientationIsChanging ();

		// -(void)interfaceOrientationDidChange;
		[Export ("interfaceOrientationDidChange")]
		void InterfaceOrientationDidChange ();

		// -(void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id<UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
		[Export ("viewWillTransitionToSize:withTransitionCoordinator:")]
		void ViewWillTransitionToSize (CGSize size, IUIViewControllerTransitionCoordinator coordinator);

		// -(void)changeContentInsets:(MDCFlexibleHeaderChangeContentInsetsBlock _Nonnull)block;
		[Export ("changeContentInsets:")]
		void ChangeContentInsets (FlexibleHeaderChangeContentInsetsHandler block);

		// -(void)forwardTouchEventsForView:(UIView * _Nonnull)view;
		[Export ("forwardTouchEventsForView:")]
		void ForwardTouchEventsForView (UIView view);

		// -(void)stopForwardingTouchEventsForView:(UIView * _Nonnull)view;
		[Export ("stopForwardingTouchEventsForView:")]
		void StopForwardingTouchEventsForView (UIView view);

		// @property (readonly, nonatomic) MDCFlexibleHeaderScrollPhase scrollPhase;
		[Export ("scrollPhase")]
		FlexibleHeaderScrollPhase ScrollPhase { get; }

		// @property (readonly, nonatomic) CGFloat scrollPhaseValue;
		[Export ("scrollPhaseValue")]
		nfloat ScrollPhaseValue { get; }

		// @property (readonly, nonatomic) CGFloat scrollPhasePercentage;
		[Export ("scrollPhasePercentage")]
		nfloat ScrollPhasePercentage { get; }

		// @property (nonatomic) CGFloat minimumHeight;
		[Export ("minimumHeight")]
		nfloat MinimumHeight { get; set; }

		// @property (nonatomic) CGFloat maximumHeight;
		[Export ("maximumHeight")]
		nfloat MaximumHeight { get; set; }

		// @property (nonatomic) BOOL minMaxHeightIncludesSafeArea;
		[Export ("minMaxHeightIncludesSafeArea")]
		bool MinMaxHeightIncludesSafeArea { get; set; }

		// @property (readonly, nonatomic) id _Nonnull topSafeAreaGuide;
		[Export ("topSafeAreaGuide")]
		NSObject TopSafeAreaGuide { get; }

		// @property (nonatomic) BOOL canOverExtend;
		[Export ("canOverExtend")]
		bool CanOverExtend { get; set; }

		// @property (nonatomic) float visibleShadowOpacity;
		[Export ("visibleShadowOpacity")]
		float VisibleShadowOpacity { get; set; }

		// @property (nonatomic) BOOL resetShadowAfterTrackingScrollViewIsReset;
		[Export ("resetShadowAfterTrackingScrollViewIsReset")]
		bool ResetShadowAfterTrackingScrollViewIsReset { get; set; }

		// @property (nonatomic, weak) UIScrollView * _Nullable trackingScrollView;
		[NullAllowed]
		[Export ("trackingScrollView", ArgumentSemantic.Weak)]
		UIScrollView TrackingScrollView { get; set; }

		// @property (nonatomic) BOOL observesTrackingScrollViewScrollEvents;
		[Export ("observesTrackingScrollViewScrollEvents")]
		bool ObservesTrackingScrollViewScrollEvents { get; set; }

		// @property (getter = isInFrontOfInfiniteContent, nonatomic) BOOL inFrontOfInfiniteContent;
		[Export ("inFrontOfInfiniteContent")]
		bool InFrontOfInfiniteContent { [Bind ("isInFrontOfInfiniteContent")] get; set; }

		// @property (nonatomic) BOOL sharedWithManyScrollViews;
		[Export ("sharedWithManyScrollViews")]
		bool SharedWithManyScrollViews { get; set; }

		// @property (nonatomic) BOOL disableContentInsetAdjustmentWhenContentInsetAdjustmentBehaviorIsNever __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
		[Introduced (PlatformName.iOS, 11,0)]
		[Introduced (PlatformName.TvOS, 11, 0)]
		[Export ("disableContentInsetAdjustmentWhenContentInsetAdjustmentBehaviorIsNever")]
		bool DisableContentInsetAdjustmentWhenContentInsetAdjustmentBehaviorIsNever { get; set; }

		// @property (nonatomic, weak) id<MDCFlexibleHeaderViewDelegate> _Nullable delegate;
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		IFlexibleHeaderViewDelegate Delegate { get; set; }

		//
		// From (MDCFlexibleHeaderView) Category
		//

		// @property (nonatomic) BOOL canAlwaysExpandToMaximumHeight;
		[Export ("canAlwaysExpandToMaximumHeight")]
		bool CanAlwaysExpandToMaximumHeight { get; set; }

		// @property (nonatomic) MDCFlexibleHeaderShiftBehavior shiftBehavior;
		[Export ("shiftBehavior", ArgumentSemantic.Assign)]
		FlexibleHeaderShiftBehavior ShiftBehavior { get; set; }

		// @property (nonatomic) MDCFlexibleHeaderContentImportance headerContentImportance;
		[Export ("headerContentImportance", ArgumentSemantic.Assign)]
		FlexibleHeaderContentImportance HeaderContentImportance { get; set; }

		// @property (nonatomic) BOOL trackingScrollViewIsBeingScrubbed;
		[Export ("trackingScrollViewIsBeingScrubbed")]
		bool TrackingScrollViewIsBeingScrubbed { get; set; }

		// @property (nonatomic) BOOL contentIsTranslucent;
		[Export ("contentIsTranslucent")]
		bool ContentIsTranslucent { get; set; }

		// @property (nonatomic) BOOL statusBarHintCanOverlapHeader;
		[Export ("statusBarHintCanOverlapHeader")]
		bool StatusBarHintCanOverlapHeader { get; set; }

		// -(void)hideViewWhenShifted:(UIView * _Nonnull)view;
		[Export ("hideViewWhenShifted:")]
		void HideViewWhenShifted (UIView view);

		// -(void)stopHidingViewWhenShifted:(UIView * _Nonnull)view;
		[Export ("stopHidingViewWhenShifted:")]
		void StopHidingViewWhenShifted (UIView view);

		// -(void)shiftHeaderOnScreenAnimated:(BOOL)animated;
		[Export ("shiftHeaderOnScreenAnimated:")]
		void ShiftHeaderOnScreen (bool animated);

		// -(void)shiftHeaderOffScreenAnimated:(BOOL)animated;
		[Export ("shiftHeaderOffScreenAnimated:")]
		void ShiftHeaderOffScreen (bool animated);

		// -(void)trackingScrollViewDidEndDraggingWillDecelerate:(BOOL)willDecelerate;
		[Advice ("Do not invoke this method if ObservesTrackingScrollViewScrollEvents property is set to true.")]
		[Export ("trackingScrollViewDidEndDraggingWillDecelerate:")]
		void TrackingScrollViewDidEndDragging (bool willDecelerate);

		// -(void)trackingScrollViewDidEndDecelerating;
		[Advice ("Do not invoke this method if ObservesTrackingScrollViewScrollEvents property is set to true.")]
		[Export ("trackingScrollViewDidEndDecelerating")]
		void TrackingScrollViewDidEndDecelerating ();

		// -(BOOL)trackingScrollViewWillEndDraggingWithVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
		[Advice ("Do not invoke this method if ObservesTrackingScrollViewScrollEvents property is set to true.")]
		[Export ("trackingScrollViewWillEndDraggingWithVelocity:targetContentOffset:")]
		bool TrackingScrollViewWillEndDragging (CGPoint velocity, ref CGPoint targetContentOffset);
	}

	interface IFlexibleHeaderViewDelegate { }

	// @protocol MDCFlexibleHeaderViewDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "MDCFlexibleHeaderViewDelegate")]
	interface FlexibleHeaderViewDelegate {
		// @required -(void)flexibleHeaderViewNeedsStatusBarAppearanceUpdate:(MDCFlexibleHeaderView * _Nonnull)headerView;
		[EventArgs ("FlexibleHeaderView")]
		[Abstract]
		[Export ("flexibleHeaderViewNeedsStatusBarAppearanceUpdate:")]
		void NeedsStatusBarAppearanceUpdate (FlexibleHeaderView headerView);

		// @required -(void)flexibleHeaderViewFrameDidChange:(MDCFlexibleHeaderView * _Nonnull)headerView;
		[EventArgs ("FlexibleHeaderView")]
		[EventName ("FrameChanged")]
		[Abstract]
		[Export ("flexibleHeaderViewFrameDidChange:")]
		void FrameDidChange (FlexibleHeaderView headerView);
	}

	// @interface MDCFlexibleHeaderViewController : UIViewController <UIScrollViewDelegate, UITableViewDelegate>
	[BaseType (typeof (UIViewController),
		   Name = "MDCFlexibleHeaderViewController",
		   Delegates = new [] { "LayoutDelegate" },
		   Events = new [] { typeof (FlexibleHeaderViewLayoutDelegate) })]
	interface FlexibleHeaderViewController : IUIScrollViewDelegate, IUITableViewDelegate {
		// @property (readonly, nonatomic, strong) MDCFlexibleHeaderView * _Nonnull headerView;
		[Export ("headerView", ArgumentSemantic.Strong)]
		FlexibleHeaderView HeaderView { get; }

		// @property (nonatomic, weak) id<MDCFlexibleHeaderViewLayoutDelegate> _Nullable layoutDelegate;
		[NullAllowed]
		[Export ("layoutDelegate", ArgumentSemantic.Weak)]
		IFlexibleHeaderViewLayoutDelegate LayoutDelegate { get; set; }

		// @property (getter = isTopLayoutGuideAdjustmentEnabled, nonatomic) BOOL topLayoutGuideAdjustmentEnabled;
		[Export ("topLayoutGuideAdjustmentEnabled")]
		bool TopLayoutGuideAdjustmentEnabled { [Bind ("isTopLayoutGuideAdjustmentEnabled")] get; set; }

		// @property (nonatomic, weak) UIViewController * _Nullable topLayoutGuideViewController;
		[NullAllowed]
		[Export ("topLayoutGuideViewController", ArgumentSemantic.Weak)]
		UIViewController TopLayoutGuideViewController { get; set; }

		// @property (nonatomic) BOOL inferTopSafeAreaInsetFromViewController;
		[Export ("inferTopSafeAreaInsetFromViewController")]
		bool InferTopSafeAreaInsetFromViewController { get; set; }

		// @property (nonatomic) BOOL useAdditionalSafeAreaInsetsForWebKitScrollViews;
		[Export ("useAdditionalSafeAreaInsetsForWebKitScrollViews")]
		bool UseAdditionalSafeAreaInsetsForWebKitScrollViews { get; set; }

		// -(BOOL)prefersStatusBarHidden;
		[New]
		[Export ("prefersStatusBarHidden")]
		bool PrefersStatusBarHidden { get; }

		// -(UIStatusBarStyle)preferredStatusBarStyle;
		[New]
		[Export ("preferredStatusBarStyle")]
		UIStatusBarStyle PreferredStatusBarStyle { get; }

		// @property (nonatomic) BOOL inferPreferredStatusBarStyle;
		[Export ("inferPreferredStatusBarStyle")]
		bool InferPreferredStatusBarStyle { get; set; }

		//
		// From ToBeDeprecated (MDCFlexibleHeaderViewController) Category
		//

		// -(void)updateTopLayoutGuide;
		[Export ("updateTopLayoutGuide")]
		void UpdateTopLayoutGuide ();
	}

	interface IFlexibleHeaderViewLayoutDelegate { }

	// @protocol MDCFlexibleHeaderViewLayoutDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "MDCFlexibleHeaderViewLayoutDelegate")]
	interface FlexibleHeaderViewLayoutDelegate {
		// @required -(void)flexibleHeaderViewController:(MDCFlexibleHeaderViewController * _Nonnull)flexibleHeaderViewController flexibleHeaderViewFrameDidChange:(MDCFlexibleHeaderView * _Nonnull)flexibleHeaderView;
		[EventArgs ("FlexibleHeaderViewLayoutFrameChanged")]
		[EventName ("FrameChanged")]
		[Abstract]
		[Export ("flexibleHeaderViewController:flexibleHeaderViewFrameDidChange:")]
		void FrameDidChange (FlexibleHeaderViewController flexibleHeaderViewController, FlexibleHeaderView flexibleHeaderView);
	}

	// @interface MDCFloatingActionButtonThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCFloatingActionButtonThemer")]
	interface FloatingActionButtonThemer {
		// +(void)applyScheme:(id<MDCButtonScheming> _Nonnull)scheme toButton:(MDCFloatingButton * _Nonnull)button;
		[Static]
		[Export ("applyScheme:toButton:")]
		void ApplyScheme (IButtonScheming scheme, FloatingButton button);
	}

	// @interface MDCFloatingButton : MDCButton
	[BaseType (typeof (Button), Name = "MDCFloatingButton")]
	interface FloatingButton {
		// @property (assign, nonatomic) MDCFloatingButtonMode mode;
		[Export ("mode", ArgumentSemantic.Assign)]
		FloatingButtonMode Mode { get; set; }

		// @property (assign, nonatomic) MDCFloatingButtonImageLocation imageLocation __attribute__((annotate("ui_appearance_selector")));
		[Export ("imageLocation", ArgumentSemantic.Assign)]
		FloatingButtonImageLocation ImageLocation { get; set; }

		// @property (assign, nonatomic) CGFloat imageTitleSpace __attribute__((annotate("ui_appearance_selector")));
		[Export ("imageTitleSpace")]
		nfloat ImageTitleSpace { get; set; }

		// +(instancetype _Nonnull)floatingButtonWithShape:(MDCFloatingButtonShape)shape;
		[Static]
		[Export ("floatingButtonWithShape:")]
		FloatingButton Create (FloatingButtonShape shape);

		// +(CGFloat)defaultDimension;
		[Static]
		[Export ("defaultDimension")]
		nfloat DefaultDimension { get; }

		// +(CGFloat)miniDimension;
		[Static]
		[Export ("miniDimension")]
		nfloat MiniDimension { get; }

		// -(instancetype _Nonnull)initWithFrame:(CGRect)frame shape:(MDCFloatingButtonShape)shape __attribute__((objc_designated_initializer));
		[DesignatedInitializer]
		[Export ("initWithFrame:shape:")]
		IntPtr Constructor (CGRect frame, FloatingButtonShape shape);

		// -(instancetype _Nonnull)initWithFrame:(CGRect)frame;
		[Export ("initWithFrame:")]
		IntPtr Constructor (CGRect frame);

		// -(void)setMinimumSize:(CGSize)minimumSize forShape:(MDCFloatingButtonShape)shape inMode:(MDCFloatingButtonMode)mode __attribute__((annotate("ui_appearance_selector")));
		[Export ("setMinimumSize:forShape:inMode:")]
		void SetMinimumSize (CGSize minimumSize, FloatingButtonShape shape, FloatingButtonMode mode);

		// -(void)setMaximumSize:(CGSize)maximumSize forShape:(MDCFloatingButtonShape)shape inMode:(MDCFloatingButtonMode)mode __attribute__((annotate("ui_appearance_selector")));
		[Export ("setMaximumSize:forShape:inMode:")]
		void SetMaximumSize (CGSize maximumSize, FloatingButtonShape shape, FloatingButtonMode mode);

		// -(void)setContentEdgeInsets:(UIEdgeInsets)contentEdgeInsets forShape:(MDCFloatingButtonShape)shape inMode:(MDCFloatingButtonMode)mode __attribute__((annotate("ui_appearance_selector")));
		[Export ("setContentEdgeInsets:forShape:inMode:")]
		void SetContentEdgeInsets (UIEdgeInsets contentEdgeInsets, FloatingButtonShape shape, FloatingButtonMode mode);

		// -(void)setHitAreaInsets:(UIEdgeInsets)hitAreaInsets forShape:(MDCFloatingButtonShape)shape inMode:(MDCFloatingButtonMode)mode __attribute__((annotate("ui_appearance_selector")));
		[Export ("setHitAreaInsets:forShape:inMode:")]
		void SetHitAreaInsets (UIEdgeInsets hitAreaInsets, FloatingButtonShape shape, FloatingButtonMode mode);

		//
		// Animation (MDCFloatingButton)
		//

		// -(void)expand:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
		[Export ("expand:completion:")]
		void Expand (bool animated, [NullAllowed] Action completion);

		// -(void)collapse:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
		[Export ("collapse:completion:")]
		void Collapse (bool animated, [NullAllowed] Action completion);
	}

	// @interface MDCFloatingButtonColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCFloatingButtonColorThemer")]
	interface FloatingButtonColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toButton:(MDCFloatingButton * _Nonnull)button;
		[Static]
		[Export ("applySemanticColorScheme:toButton:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, FloatingButton button);
	}

	// @interface MDCFloatingButtonShapeThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof(NSObject), Name = "MDCFloatingButtonShapeThemer")]
	interface FloatingButtonShapeThemer {
		// +(void)applyShapeScheme:(id<MDCShapeScheming> _Nonnull)shapeScheme toButton:(MDCFloatingButton * _Nonnull)button;
		[Static]
		[Export ("applyShapeScheme:toButton:")]
		void ApplyShapeScheme (IShapeScheming shapeScheme, FloatingButton button);
	}

	// @interface MDCHeaderStackView : UIView
	[BaseType (typeof (UIView), Name = "MDCHeaderStackView")]
	interface HeaderStackView {
		// @property (nonatomic, strong) UIView * _Nullable topBar;
		[NullAllowed]
		[Export ("topBar", ArgumentSemantic.Strong)]
		UIView TopBar { get; set; }

		// @property (nonatomic, strong) UIView * _Nullable bottomBar;
		[NullAllowed]
		[Export ("bottomBar", ArgumentSemantic.Strong)]
		UIView BottomBar { get; set; }
	}

	// @interface MDCHeaderStackViewColorThemer : NSObject
	[Obsolete ("This class will soon be deprecated. There will be no replacement API. Consider theming your flexible header view or app bar instead.")]
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCHeaderStackViewColorThemer")]
	interface HeaderStackViewColorThemer {
		// +(void)applyColorScheme:(NSObject<MDCColorScheme> *)colorScheme toHeaderStackView:(MDCHeaderStackView *)headerStackView;
		[Static]
		[Export ("applyColorScheme:toHeaderStackView:")]
		void ApplyColorScheme (IColorScheme colorScheme, HeaderStackView headerStackView);
	}

	// @interface MDCIcons : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCIcons")]
	interface Icons {
		//
		// From ic_arrow_back (MDCIcons) Category
		//

		// +(NSString * _Nonnull)pathFor_ic_arrow_back;
		[Static]
		[Export ("pathFor_ic_arrow_back")]
		string IcArrowBackPath { get; }

		// +(void)ic_arrow_backUseNewStyle:(BOOL)useNewStyle;
		[Static]
		[Export ("ic_arrow_backUseNewStyle:")]
		void IcArrowBackUseNewStyle (bool useNewStyle);

		// +(UIImage * _Nullable)imageFor_ic_arrow_back;
		[Static]
		[NullAllowed]
		[Export ("imageFor_ic_arrow_back")]
		UIImage IcArrowBackImage { get; }

		//
		// From ic_check_circle (MDCIcons) Category
		//

		// +(NSString * _Nonnull)pathFor_ic_check_circle;
		[Static]
		[Export ("pathFor_ic_check_circle")]
		string IcCheckCirclePath { get; }

		// +(UIImage * _Nullable)imageFor_ic_check_circle;
		[Static]
		[NullAllowed]
		[Export ("imageFor_ic_check_circle")]
		UIImage IcCheckCircleImage { get; }

		//
		// From ic_check (MDCIcons) Category
		//

		// +(NSString * _Nonnull)pathFor_ic_check;
		[Static]
		[Export ("pathFor_ic_check")]
		string IcCheckPath { get; }

		// +(UIImage * _Nullable)imageFor_ic_check;
		[Static]
		[NullAllowed]
		[Export ("imageFor_ic_check")]
		UIImage IcCheckImage { get; }

		//
		// From ic_chevron_right (MDCIcons) Category
		//

		// +(NSString * _Nonnull)pathFor_ic_chevron_right;
		[Static]
		[Export ("pathFor_ic_chevron_right")]
		string PathForIcChevronRight { get; }

		// +(UIImage * _Nullable)imageFor_ic_chevron_right;
		[Static]
		[NullAllowed]
		[Export ("imageFor_ic_chevron_right")]
		UIImage ImageForIcChevronRight { get; }

		//
		// From ic_color_lens (MDCIcons) Category
		//

		// +(NSString * _Nonnull)pathFor_ic_color_lens;
		[Static]
		[Export ("pathFor_ic_color_lens")]
		string IcColorLensPath { get; }

		// +(UIImage * _Nullable)imageFor_ic_color_lens;
		[Static]
		[NullAllowed, Export ("imageFor_ic_color_lens")]
		UIImage IcColorLensImage { get; }

		//
		// From ic_help_outline (MDCIcons) Category
		//

		// +(NSString * _Nonnull)pathFor_ic_help_outline;
		[Static]
		[Export ("pathFor_ic_help_outline")]
		string IcHelpOutlinePath { get; }

		// +(UIImage * _Nullable)imageFor_ic_help_outline;
		[Static]
		[NullAllowed, Export ("imageFor_ic_help_outline")]
		UIImage IcHelpOutlineImage { get; }

		//
		// From ic_info (MDCIcons) Category
		//

		// +(NSString * _Nonnull)pathFor_ic_info;
		[Static]
		[Export ("pathFor_ic_info")]
		string IcInfoPath { get; }

		// +(UIImage * _Nullable)imageFor_ic_info;
		[Static]
		[NullAllowed, Export ("imageFor_ic_info")]
		UIImage IcInfoImage { get; }

		//
		// From ic_more_horiz (MDCIcons) Category
		//

		// +(NSString * _Nonnull)pathFor_ic_more_horiz;
		[Static]
		[Export ("pathFor_ic_more_horiz")]
		string IcMoreHorizPath { get; }

		// +(UIImage * _Nullable)imageFor_ic_more_horiz;
		[Static]
		[NullAllowed, Export ("imageFor_ic_more_horiz")]
		UIImage IcMoreHorizImage { get; }

		//
		// From ic_radio_button_unchecked (MDCIcons) Category
		//

		// +(NSString * _Nonnull)pathFor_ic_radio_button_unchecked;
		[Static]
		[Export ("pathFor_ic_radio_button_unchecked")]
		string IcRadioButtonUncheckedPath { get; }

		// +(UIImage * _Nullable)imageFor_ic_radio_button_unchecked;
		[Static]
		[NullAllowed, Export ("imageFor_ic_radio_button_unchecked")]
		UIImage IcRadioButtonUncheckedImage { get; }

		//
		// From ic_reorder (MDCIcons) Category
		//

		// +(NSString * _Nonnull)pathFor_ic_reorder;
		[Static]
		[Export ("pathFor_ic_reorder")]
		string IcReorderPath { get; }

		// +(UIImage * _Nullable)imageFor_ic_reorder;
		[Static]
		[NullAllowed, Export ("imageFor_ic_reorder")]
		UIImage IcReorderImage { get; }

		//
		// From ic_settings (MDCIcons) Category
		//

		// +(NSString * _Nonnull)pathFor_ic_settings;
		[Static]
		[Export ("pathFor_ic_settings")]
		string IcSettingsPath { get; }

		// +(UIImage * _Nullable)imageFor_ic_settings;
		[Static]
		[NullAllowed, Export ("imageFor_ic_settings")]
		UIImage IcSettingsImage { get; }

		//
		// From BundleLoader (MDCIcons) Category
		//

		// +(NSString * _Nonnull)pathForIconName:(NSString * _Nonnull)iconName withBundleName:(NSString * _Nonnull)bundleName;
		[Static]
		[Export ("pathForIconName:withBundleName:")]
		string GetPath (string iconName, string bundleName);

		// +(NSBundle * _Nullable)bundleNamed:(NSString * _Nonnull)bundleName;
		[Static]
		[return: NullAllowed]
		[Export ("bundleNamed:")]
		NSBundle GetBundleNamed (string bundleName);
	}

	// @interface MDCInkColorThemer : NSObject
	[DisableDefaultCtor]
	[Obsolete ("This class will soon be deprecated. There is no direct replacement. Ink color needs to be set by the owning component in a context - specific manner.")]
	[BaseType (typeof (NSObject), Name = "MDCInkColorThemer")]
	interface InkColorThemer {
		// +(void)applyColorScheme:(NSObject<MDCColorScheme> *)colorScheme toInkView:(MDCInkView *)inkView;
		[Static]
		[Export ("applyColorScheme:toInkView:")]
		void ApplyColorScheme (IColorScheme colorScheme, InkView inkView);
	}

	// @interface MDCInkGestureRecognizer : UIGestureRecognizer
	[BaseType (typeof (UIGestureRecognizer), Name = "MDCInkGestureRecognizer")]
	interface InkGestureRecognizer {
		// @property (assign, nonatomic) CGFloat dragCancelDistance;
		[Export ("dragCancelDistance")]
		nfloat DragCancelDistance { get; set; }

		// @property (assign, nonatomic) BOOL cancelOnDragOut;
		[Export ("cancelOnDragOut")]
		bool CancelOnDragOut { get; set; }

		// @property (nonatomic) CGRect targetBounds;
		[Export ("targetBounds", ArgumentSemantic.Assign)]
		CGRect TargetBounds { get; set; }

		// -(CGPoint)touchStartLocationInView:(UIView *)view;
		[Export ("touchStartLocationInView:")]
		CGPoint GetTouchStartLocation (UIView view);

		// -(BOOL)isTouchWithinTargetBounds;
		[Export ("isTouchWithinTargetBounds")]
		bool IsTouchWithinTargetBounds { get; }
	}

	// @interface MDCInkTouchController : NSObject <UIGestureRecognizerDelegate>
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject),
		   Name = "MDCInkTouchController",
		   Delegates = new [] { "Delegate" },
		   Events = new [] { typeof (InkTouchControllerDelegate) })]
	interface InkTouchController : IUIGestureRecognizerDelegate {
		// @property (readonly, nonatomic, weak) UIView * _Nullable view;
		[NullAllowed]
		[Export ("view", ArgumentSemantic.Weak)]
		UIView View { get; }

		// @property (readonly, nonatomic, strong) MDCInkView * _Nonnull defaultInkView;
		[Export ("defaultInkView", ArgumentSemantic.Strong)]
		InkView DefaultInkView { get; }

		// @property (nonatomic, weak) id<MDCInkTouchControllerDelegate> _Nullable delegate;
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		IInkTouchControllerDelegate Delegate { get; set; }

		// @property (assign, nonatomic) BOOL delaysInkSpread;
		[Export ("delaysInkSpread")]
		bool DelaysInkSpread { get; set; }

		// @property (assign, nonatomic) CGFloat dragCancelDistance;
		[Export ("dragCancelDistance")]
		nfloat DragCancelDistance { get; set; }

		// @property (assign, nonatomic) BOOL cancelsOnDragOut;
		[Export ("cancelsOnDragOut")]
		bool CancelsOnDragOut { get; set; }

		// @property (nonatomic) CGRect targetBounds;
		[Export ("targetBounds", ArgumentSemantic.Assign)]
		CGRect TargetBounds { get; set; }

		// @property (readonly, nonatomic, strong) MDCInkGestureRecognizer * _Nonnull gestureRecognizer;
		[Export ("gestureRecognizer", ArgumentSemantic.Strong)]
		InkGestureRecognizer GestureRecognizer { get; }

		// -(instancetype _Nonnull)initWithView:(UIView * _Nonnull)view __attribute__((objc_designated_initializer));
		[DesignatedInitializer]
		[Export ("initWithView:")]
		IntPtr Constructor (UIView view);

		// -(void)addInkView;
		[Export ("addInkView")]
		void AddInkView ();

		// -(void)cancelInkTouchProcessing;
		[Export ("cancelInkTouchProcessing")]
		void CancelInkTouchProcessing ();

		// -(MDCInkView * _Nullable)inkViewAtTouchLocation:(CGPoint)location;
		[return: NullAllowed]
		[Export ("inkViewAtTouchLocation:")]
		InkView GetInkView (CGPoint location);
	}

	interface IInkTouchControllerDelegate { }

	// @protocol MDCInkTouchControllerDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "MDCInkTouchControllerDelegate")]
	interface InkTouchControllerDelegate {
		// @optional -(void)inkTouchController:(MDCInkTouchController * _Nonnull)inkTouchController insertInkView:(UIView * _Nonnull)inkView intoView:(UIView * _Nonnull)view;
		[EventArgs ("InkTouchControllerInsertInkView")]
		[Export ("inkTouchController:insertInkView:intoView:")]
		void InsertInkView (InkTouchController inkTouchController, UIView inkView, UIView view);

		// @optional -(MDCInkView * _Nullable)inkTouchController:(MDCInkTouchController * _Nonnull)inkTouchController inkViewAtTouchLocation:(CGPoint)location;
		[NoDefaultValue]
		[DelegateName ("InkTouchControllerGetInkViewAtTouchLocation")]
		[return: NullAllowed]
		[Export ("inkTouchController:inkViewAtTouchLocation:")]
		InkView GetInkViewAtTouchLocation (InkTouchController inkTouchController, CGPoint location);

		// @optional -(BOOL)inkTouchController:(MDCInkTouchController * _Nonnull)inkTouchController shouldProcessInkTouchesAtTouchLocation:(CGPoint)location;
		[DefaultValue (true)]
		[DelegateName ("InkTouchControllerShouldProcessInkTouches")]
		[Export ("inkTouchController:shouldProcessInkTouchesAtTouchLocation:")]
		bool ShouldProcessInkTouches (InkTouchController inkTouchController, CGPoint location);

		// @optional -(void)inkTouchController:(MDCInkTouchController * _Nonnull)inkTouchController didProcessInkView:(MDCInkView * _Nonnull)inkView atTouchLocation:(CGPoint)location;
		[EventArgs ("InkTouchControllerInkViewProcessed")]
		[EventName ("InkViewProcessed")]
		[Export ("inkTouchController:didProcessInkView:atTouchLocation:")]
		void DidProcessInkView (InkTouchController inkTouchController, InkView inkView, CGPoint location);
	}

	// typedef void (^MDCInkCompletionBlock)();
	delegate void InkCompletionHandler ();

	// @interface MDCInkView : UIView
	[BaseType (typeof (UIView),
		   Name = "MDCInkView",
		   Delegates = new [] { "AnimationDelegate" },
		   Events = new [] { typeof (InkViewDelegate) })]
	interface InkView {
		// @property (nonatomic, weak) id<MDCInkViewDelegate> _Nullable animationDelegate;
		[NullAllowed]
		[Export ("animationDelegate", ArgumentSemantic.Weak)]
		IInkViewDelegate AnimationDelegate { get; set; }

		// @property (assign, nonatomic) MDCInkStyle inkStyle;
		[Export ("inkStyle", ArgumentSemantic.Assign)]
		InkStyle InkStyle { get; set; }

		// @property (nonatomic, strong) UIColor * _Null_unspecified inkColor;
		[Export ("inkColor", ArgumentSemantic.Strong)]
		UIColor InkColor { get; set; }

		// @property (readonly, nonatomic, strong) UIColor * _Nonnull defaultInkColor;
		[Export ("defaultInkColor", ArgumentSemantic.Strong)]
		UIColor DefaultInkColor { get; }

		// @property (assign, nonatomic) CGFloat maxRippleRadius;
		[Export ("maxRippleRadius")]
		nfloat MaxRippleRadius { get; set; }

		// @property (assign, nonatomic) BOOL usesLegacyInkRipple;
		[Export ("usesLegacyInkRipple")]
		bool UsesLegacyInkRipple { get; set; }

		// @property (assign, nonatomic) BOOL usesCustomInkCenter;
		[Export ("usesCustomInkCenter")]
		bool UsesCustomInkCenter { get; set; }

		// @property (assign, nonatomic) CGPoint customInkCenter;
		[Export ("customInkCenter", ArgumentSemantic.Assign)]
		CGPoint CustomInkCenter { get; set; }

		// -(void)startTouchBeganAnimationAtPoint:(CGPoint)point completion:(MDCInkCompletionBlock _Nullable)completionBlock;
		[Export ("startTouchBeganAnimationAtPoint:completion:")]
		void StartTouchBeganAnimation (CGPoint point, [NullAllowed] InkCompletionHandler completionBlock);

		// -(void)startTouchEndedAnimationAtPoint:(CGPoint)point completion:(MDCInkCompletionBlock _Nullable)completionBlock;
		[Export ("startTouchEndedAnimationAtPoint:completion:")]
		void StartTouchEndedAnimation (CGPoint point, [NullAllowed] InkCompletionHandler completionBlock);

		// -(void)cancelAllAnimationsAnimated:(BOOL)animated;
		[Export ("cancelAllAnimationsAnimated:")]
		void CancelAllAnimations (bool animated);

		// -(void)startTouchBeganAtPoint:(CGPoint)point animated:(BOOL)animated withCompletion:(MDCInkCompletionBlock _Nullable)completionBlock;
		[Export ("startTouchBeganAtPoint:animated:withCompletion:")]
		void StartTouchBegan (CGPoint point, bool animated, [NullAllowed] InkCompletionHandler completionBlock);

		// -(void)startTouchEndAtPoint:(CGPoint)point animated:(BOOL)animated withCompletion:(MDCInkCompletionBlock _Nullable)completionBlock;
		[Export ("startTouchEndAtPoint:animated:withCompletion:")]
		void StartTouchEnd (CGPoint point, bool animated, [NullAllowed] InkCompletionHandler completionBlock);

		// +(MDCInkView * _Nonnull)injectedInkViewForView:(UIView * _Nonnull)view;
		[Static]
		[Export ("injectedInkViewForView:")]
		InkView GetInjectedInkView (UIView view);
	}

	interface IInkViewDelegate { }

	// @protocol MDCInkViewDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject))]
	interface InkViewDelegate {
		// @optional -(void)inkAnimationDidStart:(MDCInkView * _Nonnull)inkView;
		[EventArgs ("InkViewInkAnimationStarted")]
		[EventName ("InkAnimationStarted")]
		[Export ("inkAnimationDidStart:")]
		void InkAnimationDidStart (InkView inkView);

		// @optional -(void)inkAnimationDidEnd:(MDCInkView * _Nonnull)inkView;
		[EventArgs ("InkViewInkAnimationEnded")]
		[EventName ("InkAnimationEnded")]
		[Export ("inkAnimationDidEnd:")]
		void InkAnimationDidEnd (InkView inkView);
	}

	// @interface MDCIntrinsicHeightTextView : UITextView
	[BaseType (typeof (UITextView), Name = "MDCIntrinsicHeightTextView")]
	interface IntrinsicHeightTextView { }

	// @interface MDCKeyboardWatcher : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCKeyboardWatcher")]
	interface KeyboardWatcher {
		// extern NSString *const MDCKeyboardWatcherKeyboardWillShowNotification;
		[Notification]
		[Field ("MDCKeyboardWatcherKeyboardWillShowNotification", "__Internal")]
		NSString KeyboardWillShowNotification { get; }

		// extern NSString *const MDCKeyboardWatcherKeyboardWillHideNotification;
		[Notification]
		[Field ("MDCKeyboardWatcherKeyboardWillHideNotification", "__Internal")]
		NSString KeyboardWillHideNotification { get; }

		// extern NSString *const MDCKeyboardWatcherKeyboardWillChangeFrameNotification;
		[Notification]
		[Field ("MDCKeyboardWatcherKeyboardWillChangeFrameNotification", "__Internal")]
		NSString KeyboardWillChangeFrameNotification { get; }

		// +(instancetype)sharedKeyboardWatcher;
		[Static]
		[Export ("sharedKeyboardWatcher")]
		KeyboardWatcher SharedInstance { get; }

		// +(NSTimeInterval)animationDurationFromKeyboardNotification:(NSNotification *)notification;
		[Static]
		[Export ("animationDurationFromKeyboardNotification:")]
		double AnimationDurationFromNotification (NSNotification notification);

		// +(UIViewAnimationOptions)animationCurveOptionFromKeyboardNotification:(NSNotification *)notification;
		[Static]
		[Export ("animationCurveOptionFromKeyboardNotification:")]
		UIViewAnimationOptions AnimationCurveOptionFromNotification (NSNotification notification);

		// @property (readonly, nonatomic) CGFloat visibleKeyboardHeight;
		[Export ("visibleKeyboardHeight")]
		nfloat VisibleKeyboardHeight { get; }
	}

	interface IColorScheme { }

	// @protocol MDCColorScheme <NSObject>
	[Advice ("This class will soon be deprecated. Consider using IColorScheming interface instead.")]
	[Protocol (Name = "MDCColorScheme")]
	interface ColorScheme {
		// @required @property (readonly, nonatomic, strong) UIColor * _Nonnull primaryColor;
		[Abstract]
		[Export ("primaryColor")]
		UIColor PrimaryColor { get; }

		// @optional @property (readonly, nonatomic, strong) UIColor * _Nonnull primaryLightColor;
		[Export ("primaryLightColor")]
		UIColor PrimaryLightColor { get; }

		// @optional @property (readonly, nonatomic, strong) UIColor * _Nonnull primaryDarkColor;
		[Export ("primaryDarkColor")]
		UIColor PrimaryDarkColor { get; }

		// @optional @property (readonly, nonatomic, strong) UIColor * _Nonnull secondaryColor;
		[Export ("secondaryColor")]
		UIColor SecondaryColor { get; }

		// @optional @property (readonly, nonatomic, strong) UIColor * _Nonnull secondaryLightColor;
		[Export ("secondaryLightColor")]
		UIColor SecondaryLightColor { get; }

		// @optional @property (readonly, nonatomic, strong) UIColor * _Nonnull secondaryDarkColor;
		[Export ("secondaryDarkColor")]
		UIColor SecondaryDarkColor { get; }
	}

	// @interface MDCBasicColorScheme : NSObject <MDCColorScheme, NSCopying>
	[Obsolete ("This class will soon be deprecated. Consider using SemanticColorScheme class instead.")]
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCBasicColorScheme")]
	interface BasicColorScheme : ColorScheme, INSCopying {
		// @property (readonly, nonatomic, strong) UIColor * _Nonnull primaryColor;
		[Export ("primaryColor", ArgumentSemantic.Strong)]
		new UIColor PrimaryColor { get; }

		// @property (readonly, nonatomic, strong) UIColor * _Nonnull primaryLightColor;
		[Export ("primaryLightColor", ArgumentSemantic.Strong)]
		new UIColor PrimaryLightColor { get; }

		// @property (readonly, nonatomic, strong) UIColor * _Nonnull primaryDarkColor;
		[Export ("primaryDarkColor", ArgumentSemantic.Strong)]
		new UIColor PrimaryDarkColor { get; }

		// @property (readonly, nonatomic, strong) UIColor * _Nonnull secondaryColor;
		[Export ("secondaryColor", ArgumentSemantic.Strong)]
		new UIColor SecondaryColor { get; }

		// @property (readonly, nonatomic, strong) UIColor * _Nonnull secondaryLightColor;
		[Export ("secondaryLightColor", ArgumentSemantic.Strong)]
		new UIColor SecondaryLightColor { get; }

		// @property (readonly, nonatomic, strong) UIColor * _Nonnull secondaryDarkColor;
		[Export ("secondaryDarkColor", ArgumentSemantic.Strong)]
		new UIColor SecondaryDarkColor { get; }

		// -(instancetype _Nonnull)initWithPrimaryColor:(UIColor * _Nonnull)primaryColor primaryLightColor:(UIColor * _Nonnull)primaryLightColor primaryDarkColor:(UIColor * _Nonnull)primaryDarkColor secondaryColor:(UIColor * _Nonnull)secondaryColor secondaryLightColor:(UIColor * _Nonnull)secondaryLightColor secondaryDarkColor:(UIColor * _Nonnull)secondaryDarkColor __attribute__((objc_designated_initializer));
		[Export ("initWithPrimaryColor:primaryLightColor:primaryDarkColor:secondaryColor:secondaryLightColor:secondaryDarkColor:")]
		[DesignatedInitializer]
		IntPtr Constructor (UIColor primaryColor, UIColor primaryLightColor, UIColor primaryDarkColor, UIColor secondaryColor, UIColor secondaryLightColor, UIColor secondaryDarkColor);

		// -(instancetype _Nonnull)initWithPrimaryColor:(UIColor * _Nonnull)primaryColor;
		[Export ("initWithPrimaryColor:")]
		IntPtr Constructor (UIColor primaryColor);

		// -(instancetype _Nonnull)initWithPrimaryColor:(UIColor * _Nonnull)primaryColor primaryLightColor:(UIColor * _Nonnull)primaryLightColor primaryDarkColor:(UIColor * _Nonnull)primaryDarkColor;
		[Export ("initWithPrimaryColor:primaryLightColor:primaryDarkColor:")]
		IntPtr Constructor (UIColor primaryColor, UIColor primaryLightColor, UIColor primaryDarkColor);

		// -(instancetype _Nonnull)initWithPrimaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor;
		[Export ("initWithPrimaryColor:secondaryColor:")]
		IntPtr Constructor (UIColor primaryColor, UIColor secondaryColor);
	}

	interface IFontScheme { }

	// @protocol MDCFontScheme <NSObject>
	[Obsolete ("This class will soon be deprecated. Consider using ITypographyScheming interface instead.")]
	[Protocol (Name = "MDCFontScheme")]
	interface FontScheme {
		// @required @property (readonly, nonatomic, strong) UIFont * _Nullable headline1;
		[Abstract]
		[NullAllowed]
		[Export ("headline1", ArgumentSemantic.Strong)]
		UIFont Headline1 { get; }

		// @required @property (readonly, nonatomic, strong) UIFont * _Nullable headline2;
		[Abstract]
		[NullAllowed]
		[Export ("headline2", ArgumentSemantic.Strong)]
		UIFont Headline2 { get; }

		// @required @property (readonly, nonatomic, strong) UIFont * _Nullable headline3;
		[Abstract]
		[NullAllowed]
		[Export ("headline3", ArgumentSemantic.Strong)]
		UIFont Headline3 { get; }

		// @required @property (readonly, nonatomic, strong) UIFont * _Nullable headline4;
		[Abstract]
		[NullAllowed]
		[Export ("headline4", ArgumentSemantic.Strong)]
		UIFont Headline4 { get; }

		// @required @property (readonly, nonatomic, strong) UIFont * _Nullable headline5;
		[Abstract]
		[NullAllowed]
		[Export ("headline5", ArgumentSemantic.Strong)]
		UIFont Headline5 { get; }

		// @required @property (readonly, nonatomic, strong) UIFont * _Nullable headline6;
		[Abstract]
		[NullAllowed]
		[Export ("headline6", ArgumentSemantic.Strong)]
		UIFont Headline6 { get; }

		// @required @property (readonly, nonatomic, strong) UIFont * _Nullable subtitle1;
		[Abstract]
		[NullAllowed]
		[Export ("subtitle1", ArgumentSemantic.Strong)]
		UIFont Subtitle1 { get; }

		// @required @property (readonly, nonatomic, strong) UIFont * _Nullable subtitle2;
		[Abstract]
		[NullAllowed]
		[Export ("subtitle2", ArgumentSemantic.Strong)]
		UIFont Subtitle2 { get; }

		// @required @property (readonly, nonatomic, strong) UIFont * _Nullable body1;
		[Abstract]
		[NullAllowed]
		[Export ("body1", ArgumentSemantic.Strong)]
		UIFont Body1 { get; }

		// @required @property (readonly, nonatomic, strong) UIFont * _Nullable body2;
		[Abstract]
		[NullAllowed]
		[Export ("body2", ArgumentSemantic.Strong)]
		UIFont Body2 { get; }

		// @required @property (readonly, nonatomic, strong) UIFont * _Nullable caption;
		[Abstract]
		[NullAllowed]
		[Export ("caption", ArgumentSemantic.Strong)]
		UIFont Caption { get; }

		// @required @property (readonly, nonatomic, strong) UIFont * _Nullable button;
		[Abstract]
		[NullAllowed]
		[Export ("button", ArgumentSemantic.Strong)]
		UIFont Button { get; }

		// @required @property (readonly, nonatomic, strong) UIFont * _Nullable overline;
		[Abstract]
		[NullAllowed]
		[Export ("overline", ArgumentSemantic.Strong)]
		UIFont Overline { get; }
	}

	// @interface MDCBasicFontScheme : NSObject <MDCFontScheme>
	[Obsolete ("This class will soon be deprecated. Consider using TypographyScheme class instead.")]
	[BaseType (typeof (NSObject), Name = "MDCBasicFontScheme")]
	interface BasicFontScheme : FontScheme {
		// @property (nonatomic) UIFont * _Nullable headline1;
		[NullAllowed]
		[Export ("headline1", ArgumentSemantic.Assign)]
		new UIFont Headline1 { get; set; }

		// @property (nonatomic) UIFont * _Nullable headline2;
		[NullAllowed]
		[Export ("headline2", ArgumentSemantic.Assign)]
		new UIFont Headline2 { get; set; }

		// @property (nonatomic) UIFont * _Nullable headline3;
		[NullAllowed]
		[Export ("headline3", ArgumentSemantic.Assign)]
		new UIFont Headline3 { get; set; }

		// @property (nonatomic) UIFont * _Nullable headline4;
		[NullAllowed]
		[Export ("headline4", ArgumentSemantic.Assign)]
		new UIFont Headline4 { get; set; }

		// @property (nonatomic) UIFont * _Nullable headline5;
		[NullAllowed]
		[Export ("headline5", ArgumentSemantic.Assign)]
		new UIFont Headline5 { get; set; }

		// @property (nonatomic) UIFont * _Nullable headline6;
		[NullAllowed]
		[Export ("headline6", ArgumentSemantic.Assign)]
		new UIFont Headline6 { get; set; }

		// @property (nonatomic) UIFont * _Nullable subtitle1;
		[NullAllowed]
		[Export ("subtitle1", ArgumentSemantic.Assign)]
		new UIFont Subtitle1 { get; set; }

		// @property (nonatomic) UIFont * _Nullable subtitle2;
		[NullAllowed]
		[Export ("subtitle2", ArgumentSemantic.Assign)]
		new UIFont Subtitle2 { get; set; }

		// @property (nonatomic) UIFont * _Nullable body1;
		[NullAllowed]
		[Export ("body1", ArgumentSemantic.Assign)]
		new UIFont Body1 { get; set; }

		// @property (nonatomic) UIFont * _Nullable body2;
		[NullAllowed]
		[Export ("body2", ArgumentSemantic.Assign)]
		new UIFont Body2 { get; set; }

		// @property (nonatomic) UIFont * _Nullable caption;
		[NullAllowed]
		[Export ("caption", ArgumentSemantic.Assign)]
		new UIFont Caption { get; set; }

		// @property (nonatomic) UIFont * _Nullable button;
		[NullAllowed]
		[Export ("button", ArgumentSemantic.Assign)]
		new UIFont Button { get; set; }

		// @property (nonatomic) UIFont * _Nullable overline;
		[NullAllowed]
		[Export ("overline", ArgumentSemantic.Assign)]
		new UIFont Overline { get; set; }
	}

	// @interface MDCTonalColorScheme : NSObject <MDCColorScheme, NSCopying>
	[Obsolete ("This class will soon be deprecated. Consider using IColorScheming interface instead.")]
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCTonalColorScheme")]
	interface TonalColorScheme : ColorScheme, INSCopying {
		// @property (readonly, nonatomic, strong) UIColor * _Nonnull primaryColor;
		[Export ("primaryColor", ArgumentSemantic.Strong)]
		new UIColor PrimaryColor { get; }

		// @property (readonly, nonatomic, strong) UIColor * _Nonnull primaryLightColor;
		[Export ("primaryLightColor", ArgumentSemantic.Strong)]
		new UIColor PrimaryLightColor { get; }

		// @property (readonly, nonatomic, strong) UIColor * _Nonnull primaryDarkColor;
		[Export ("primaryDarkColor", ArgumentSemantic.Strong)]
		new UIColor PrimaryDarkColor { get; }

		// @property (readonly, nonatomic, strong) UIColor * _Nonnull secondaryColor;
		[Export ("secondaryColor", ArgumentSemantic.Strong)]
		new UIColor SecondaryColor { get; }

		// @property (readonly, nonatomic, strong) UIColor * _Nonnull secondaryLightColor;
		[Export ("secondaryLightColor", ArgumentSemantic.Strong)]
		new UIColor SecondaryLightColor { get; }

		// @property (readonly, nonatomic, strong) UIColor * _Nonnull secondaryDarkColor;
		[Export ("secondaryDarkColor", ArgumentSemantic.Strong)]
		new UIColor SecondaryDarkColor { get; }

		// @property (readonly, nonatomic, strong) MDCTonalPalette * _Nonnull primaryTonalPalette;
		[Export ("primaryTonalPalette", ArgumentSemantic.Strong)]
		TonalPalette PrimaryTonalPalette { get; }

		// @property (readonly, nonatomic, strong) MDCTonalPalette * _Nonnull secondaryTonalPalette;
		[Export ("secondaryTonalPalette", ArgumentSemantic.Strong)]
		TonalPalette SecondaryTonalPalette { get; }

		// -(instancetype _Nonnull)initWithPrimaryTonalPalette:(MDCTonalPalette * _Nonnull)primaryTonalPalette secondaryTonalPalette:(MDCTonalPalette * _Nonnull)secondaryTonalPalette __attribute__((objc_designated_initializer));
		[DesignatedInitializer]
		[Export ("initWithPrimaryTonalPalette:secondaryTonalPalette:")]
		IntPtr Constructor (TonalPalette primaryTonalPalette, TonalPalette secondaryTonalPalette);
	}

	// @interface MDCTonalPalette : NSObject <NSCopying>
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCTonalPalette")]
	interface TonalPalette : INSCopying {
		// @property (readonly, copy, nonatomic) NSArray<UIColor *> * _Nonnull colors;
		[Export ("colors", ArgumentSemantic.Copy)]
		UIColor [] Colors { get; }

		// @property (readonly, nonatomic) NSUInteger mainColorIndex;
		[Export ("mainColorIndex")]
		nuint MainColorIndex { get; }

		// @property (readonly, nonatomic) NSUInteger lightColorIndex;
		[Export ("lightColorIndex")]
		nuint LightColorIndex { get; }

		// @property (readonly, nonatomic) NSUInteger darkColorIndex;
		[Export ("darkColorIndex")]
		nuint DarkColorIndex { get; }

		// @property (readonly, nonatomic, strong) UIColor * _Nonnull mainColor;
		[Export ("mainColor", ArgumentSemantic.Strong)]
		UIColor MainColor { get; }

		// @property (readonly, nonatomic, strong) UIColor * _Nonnull lightColor;
		[Export ("lightColor", ArgumentSemantic.Strong)]
		UIColor LightColor { get; }

		// @property (readonly, nonatomic, strong) UIColor * _Nonnull darkColor;
		[Export ("darkColor", ArgumentSemantic.Strong)]
		UIColor DarkColor { get; }

		// -(instancetype _Nonnull)initWithColors:(NSArray<UIColor *> * _Nonnull)colors mainColorIndex:(NSUInteger)mainColorIndex lightColorIndex:(NSUInteger)lightColorIndex darkColorIndex:(NSUInteger)darkColorIndex __attribute__((objc_designated_initializer));
		[DesignatedInitializer]
		[Export ("initWithColors:mainColorIndex:lightColorIndex:darkColorIndex:")]
		IntPtr Constructor (UIColor [] colors, nuint mainColorIndex, nuint lightColorIndex, nuint darkColorIndex);
	}

	// @interface MDCLibraryInfo : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCLibraryInfo")]
	interface LibraryInfo {
		// @property (readonly, nonatomic, class) NSString * _Nonnull versionString;
		[Static]
		[Export ("versionString")]
		string VersionString { get; }
	}

	// @interface MDCMaskedTransitionController : NSObject <UIViewControllerTransitioningDelegate>
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCMaskedTransitionController")]
	interface MaskedTransitionController : IUIViewControllerTransitioningDelegate {
		// -(instancetype _Nonnull)initWithSourceView:(UIView * _Nullable)sourceView;
		[Export ("initWithSourceView:")]
		IntPtr Constructor ([NullAllowed] UIView sourceView);

		// -(instancetype _Nonnull)initWithSourceView:(UIView * _Nullable)sourceView;
		[DesignatedInitializer]
		[Export ("init")]
		IntPtr Constructor ();

		// @property (readonly, nonatomic, strong) UIView * _Nullable sourceView;
		[NullAllowed]
		[Export ("sourceView", ArgumentSemantic.Strong)]
		UIView SourceView { get; }

		// @property (copy, nonatomic) CGRect (^ _Nullable)(UIPresentationController * _Nonnull) calculateFrameOfPresentedView;
		[NullAllowed]
		[Export ("calculateFrameOfPresentedView", ArgumentSemantic.Copy)]
		Func<UIPresentationController, CGRect> CalculateFrameOfPresentedView { get; set; }
	}

	// @interface MDCMultilineTextField : UIView <MDCTextInput, MDCMultilineTextInput>
	[BaseType (typeof (UIView), Name = "MDCMultilineTextField")]
	interface MultilineTextField : TextInput, MultilineTextInput {
		// @property (assign, nonatomic) BOOL adjustsFontForContentSizeCategory;
		[Export ("adjustsFontForContentSizeCategory")]
		bool AdjustsFontForContentSizeCategory { get; set; }

		// @property (assign, nonatomic) BOOL expandsOnOverflow;
		[Export ("expandsOnOverflow")]
		new bool ExpandsOnOverflow { get; set; }

		// @property (nonatomic, weak) id<MDCMultilineTextInputLayoutDelegate> _Nullable layoutDelegate __attribute__((iboutlet));
		[NullAllowed]
		[Export ("layoutDelegate", ArgumentSemantic.Weak)]
		IMultilineTextInputLayoutDelegate LayoutDelegate { get; set; }

		// @property (nonatomic, weak) id<MDCMultilineTextInputDelegate> _Nullable multilineDelegate __attribute__((iboutlet));
		[NullAllowed]
		[Export ("multilineDelegate", ArgumentSemantic.Weak)]
		IMultilineTextInputDelegate MultilineDelegate { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable placeholder;
		[NullAllowed]
		[Export ("placeholder")]
		new string Placeholder { get; set; }

		// @property (readonly, assign, nonatomic) UIEdgeInsets textInsets;
		[Export ("textInsets", ArgumentSemantic.Assign)]
		new UIEdgeInsets TextInsets { get; }

		// @property (nonatomic, strong) MDCIntrinsicHeightTextView * _Nullable textView __attribute__((iboutlet));
		[NullAllowed]
		[Export ("textView", ArgumentSemantic.Strong)]
		IntrinsicHeightTextView TextView { get; set; }
	}

	interface IMultilineTextInputLayoutDelegate { }

	// @protocol MDCMultilineTextInputLayoutDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "MDCMultilineTextInputLayoutDelegate")]
	interface MultilineTextInputLayoutDelegate {
		// @optional -(void)multilineTextField:(id<MDCMultilineTextInput> _Nonnull)multilineTextField didChangeContentSize:(CGSize)size;
		[Export ("multilineTextField:didChangeContentSize:")]
		void DidChangeContentSize (IMultilineTextInput multilineTextField, CGSize size);
	}

	interface IMultilineTextInputDelegate { }

	// @protocol MDCMultilineTextInputDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "MDCMultilineTextInputDelegate")]
	interface MultilineTextInputDelegate {
		// @optional -(BOOL)multilineTextFieldShouldClear:(UIView<MDCTextInput> *)textField;
		[Export ("multilineTextFieldShouldClear:")]
		bool MultilineTextFieldShouldClear (ITextInput textField);
	}

	interface IUINavigationItemObservables { }

	// @protocol MDCUINavigationItemObservables <NSObject>
	[Protocol (Name = "MDCUINavigationItemObservables")]
	interface UINavigationItemObservables {
		// @required @property (copy, nonatomic) NSString * _Nullable title;
		[Abstract]
		[NullAllowed]
		[Export ("title")]
		string Title { get; set; }

		// @required @property (nonatomic, strong) UIView * _Nullable titleView;
		[Abstract]
		[NullAllowed]
		[Export ("titleView", ArgumentSemantic.Strong)]
		UIView TitleView { get; set; }

		// @required @property (nonatomic) BOOL hidesBackButton;
		[Abstract]
		[Export ("hidesBackButton")]
		bool HidesBackButton { get; set; }

		// @required @property (copy, nonatomic) NSArray<UIBarButtonItem *> * _Nullable leftBarButtonItems;
		[Abstract]
		[NullAllowed]
		[Export ("leftBarButtonItems", ArgumentSemantic.Copy)]
		UIBarButtonItem [] LeftBarButtonItems { get; set; }

		// @required @property (copy, nonatomic) NSArray<UIBarButtonItem *> * _Nullable rightBarButtonItems;
		[Abstract]
		[NullAllowed]
		[Export ("rightBarButtonItems", ArgumentSemantic.Copy)]
		UIBarButtonItem [] RightBarButtonItems { get; set; }

		// @required @property (nonatomic) BOOL leftItemsSupplementBackButton;
		[Abstract]
		[Export ("leftItemsSupplementBackButton")]
		bool LeftItemsSupplementBackButton { get; set; }

		// @required @property (nonatomic, strong) UIBarButtonItem * _Nullable leftBarButtonItem;
		[Abstract]
		[NullAllowed]
		[Export ("leftBarButtonItem", ArgumentSemantic.Strong)]
		UIBarButtonItem LeftBarButtonItem { get; set; }

		// @required @property (nonatomic, strong) UIBarButtonItem * _Nullable rightBarButtonItem;
		[Abstract]
		[NullAllowed]
		[Export ("rightBarButtonItem", ArgumentSemantic.Strong)]
		UIBarButtonItem RightBarButtonItem { get; set; }
	}

	// @interface MDCNavigationBarTextColorAccessibilityMutator : NSObject
	[BaseType (typeof (NSObject), Name = "MDCNavigationBarTextColorAccessibilityMutator")]
	interface NavigationBarTextColorAccessibilityMutator {
		// -(void)mutate:(MDCNavigationBar * _Nonnull)navBar;
		[Export ("mutate:")]
		void Mutate (NavigationBar navBar);
	}

	// @interface MDCNavigationBar : UIView
	[BaseType (typeof (UIView), Name = "MDCNavigationBar")]
	interface NavigationBar {
		// @property (copy, nonatomic) NSString * _Nullable title;
		[NullAllowed]
		[Export ("title")]
		string Title { get; set; }

		// @property (nonatomic, strong) UIView * _Nullable titleView;
		[NullAllowed]
		[Export ("titleView", ArgumentSemantic.Strong)]
		UIView TitleView { get; set; }

		// @property (nonatomic) MDCNavigationBarTitleViewLayoutBehavior titleViewLayoutBehavior;
		[Export ("titleViewLayoutBehavior", ArgumentSemantic.Assign)]
		NavigationBarTitleViewLayoutBehavior TitleViewLayoutBehavior { get; set; }

		// @property (nonatomic, strong) UIFont * _Null_unspecified titleFont;
		[Export ("titleFont", ArgumentSemantic.Strong)]
		UIFont TitleFont { get; set; }

		// @property (nonatomic) BOOL allowAnyTitleFontSize;
		[Export ("allowAnyTitleFontSize")]
		bool AllowAnyTitleFontSize { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable titleTextColor;
		[NullAllowed]
		[Export ("titleTextColor", ArgumentSemantic.Strong)]
		UIColor TitleTextColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable inkColor;
		[NullAllowed]
		[Export ("inkColor", ArgumentSemantic.Strong)]
		UIColor InkColor { get; set; }

		// @property (nonatomic) BOOL uppercasesButtonTitles;
		[Export ("uppercasesButtonTitles")]
		bool UppercasesButtonTitles { get; set; }

		// -(void)setButtonsTitleFont:(UIFont * _Nullable)font forState:(UIControlState)state;
		[Export ("setButtonsTitleFont:forState:")]
		void SetButtonsTitleFont ([NullAllowed] UIFont font, UIControlState state);

		// -(UIFont * _Nullable)buttonsTitleFontForState:(UIControlState)state;
		[return: NullAllowed]
		[Export ("buttonsTitleFontForState:")]
		UIFont GetButtonsTitleFont (UIControlState state);

		// -(void)setButtonsTitleColor:(UIColor * _Nullable)color forState:(UIControlState)state;
		[Export ("setButtonsTitleColor:forState:")]
		void SetButtonsTitleColor ([NullAllowed] UIColor color, UIControlState state);

		// @property (nonatomic, strong) UIColor * _Nullable leadingBarItemsTintColor;
		[NullAllowed, Export ("leadingBarItemsTintColor", ArgumentSemantic.Strong)]
		UIColor LeadingBarItemsTintColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable trailingBarItemsTintColor;
		[NullAllowed, Export ("trailingBarItemsTintColor", ArgumentSemantic.Strong)]
		UIColor TrailingBarItemsTintColor { get; set; }

		// -(UIColor * _Nullable)buttonsTitleColorForState:(UIControlState)state;
		[return: NullAllowed]
		[Export ("buttonsTitleColorForState:")]
		UIColor GetButtonsTitleColor (UIControlState state);

		// @property (nonatomic, strong) UIBarButtonItem * _Nullable backItem;
		[NullAllowed]
		[Export ("backItem", ArgumentSemantic.Strong)]
		UIBarButtonItem BackItem { get; set; }

		// @property (nonatomic) BOOL hidesBackButton;
		[Export ("hidesBackButton")]
		bool HidesBackButton { get; set; }

		// @property (copy, nonatomic) NSArray<UIBarButtonItem *> * _Nullable leadingBarButtonItems;
		[NullAllowed]
		[Export ("leadingBarButtonItems", ArgumentSemantic.Copy)]
		UIBarButtonItem [] LeadingBarButtonItems { get; set; }

		// @property (copy, nonatomic) NSArray<UIBarButtonItem *> * _Nullable trailingBarButtonItems;
		[NullAllowed]
		[Export ("trailingBarButtonItems", ArgumentSemantic.Copy)]
		UIBarButtonItem [] TrailingBarButtonItems { get; set; }

		// @property (nonatomic) BOOL leadingItemsSupplementBackButton;
		[Export ("leadingItemsSupplementBackButton")]
		bool LeadingItemsSupplementBackButton { get; set; }

		// @property (nonatomic, strong) UIBarButtonItem * _Nullable leadingBarButtonItem;
		[NullAllowed]
		[Export ("leadingBarButtonItem", ArgumentSemantic.Strong)]
		UIBarButtonItem LeadingBarButtonItem { get; set; }

		// @property (nonatomic, strong) UIBarButtonItem * _Nullable trailingBarButtonItem;
		[NullAllowed]
		[Export ("trailingBarButtonItem", ArgumentSemantic.Strong)]
		UIBarButtonItem TrailingBarButtonItem { get; set; }

		// @property (nonatomic) MDCNavigationBarTitleAlignment titleAlignment;
		[Export ("titleAlignment", ArgumentSemantic.Assign)]
		NavigationBarTitleAlignment TitleAlignment { get; set; }

		// -(void)observeNavigationItem:(UINavigationItem * _Nonnull)navigationItem;
		[Export ("observeNavigationItem:")]
		void ObserveNavigationItem (UINavigationItem navigationItem);

		// -(void)unobserveNavigationItem;
		[Export ("unobserveNavigationItem")]
		void UnobserveNavigationItem ();

		// @property (copy, nonatomic) NSArray<UIBarButtonItem *> * _Nullable leftBarButtonItems;
		[NullAllowed]
		[Export ("leftBarButtonItems", ArgumentSemantic.Copy)]
		UIBarButtonItem [] LeftBarButtonItems { get; set; }

		// @property (copy, nonatomic) NSArray<UIBarButtonItem *> * _Nullable rightBarButtonItems;
		[NullAllowed]
		[Export ("rightBarButtonItems", ArgumentSemantic.Copy)]
		UIBarButtonItem [] RightBarButtonItems { get; set; }

		// @property (nonatomic, strong) UIBarButtonItem * _Nullable leftBarButtonItem;
		[NullAllowed]
		[Export ("leftBarButtonItem", ArgumentSemantic.Strong)]
		UIBarButtonItem LeftBarButtonItem { get; set; }

		// @property (nonatomic, strong) UIBarButtonItem * _Nullable rightBarButtonItem;
		[NullAllowed]
		[Export ("rightBarButtonItem", ArgumentSemantic.Strong)]
		UIBarButtonItem RightBarButtonItem { get; set; }

		// @property (nonatomic) BOOL leftItemsSupplementBackButton;
		[Export ("leftItemsSupplementBackButton")]
		bool LeftItemsSupplementBackButton { get; set; }

		// @property (copy, nonatomic) NSDictionary<NSAttributedStringKey,id> * _Nullable titleTextAttributes __attribute__((annotate("ui_appearance_selector")));
		[Obsolete ("This property will be deprecated in future, please use TitleFont and TitleTextColor properties instead.")]
		[NullAllowed]
		[Export ("titleTextAttributes", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> TitleTextAttributes { get; set; }
	}

	// @interface MDCNavigationBarColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCNavigationBarColorThemer")]
	interface NavigationBarColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toNavigationBar:(MDCNavigationBar * _Nonnull)navigationBar;
		[Static]
		[Export ("applySemanticColorScheme:toNavigationBar:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, NavigationBar navigationBar);

		// +(void)applySurfaceVariantWithColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toNavigationBar:(MDCNavigationBar * _Nonnull)navigationBar;
		[Static]
		[Export ("applySurfaceVariantWithColorScheme:toNavigationBar:")]
		void ApplySurfaceVariant (IColorScheming colorScheme, NavigationBar navigationBar);

		// +(void)applyColorScheme:(NSObject<MDCColorScheme> *)colorScheme toNavigationBar:(MDCNavigationBar *)navigationBar;
		[Obsolete ("This method will soon be deprecated. Consider using ApplySemanticColorScheme instead.")]
		[Static]
		[Export ("applyColorScheme:toNavigationBar:")]
		void ApplyColorScheme (IColorScheme colorScheme, NavigationBar navigationBar);
	}

	// @interface MDCNavigationBarTypographyThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCNavigationBarTypographyThemer")]
	interface NavigationBarTypographyThemer {
		// +(void)applyTypographyScheme:(id<MDCTypographyScheming> _Nonnull)typographyScheme toNavigationBar:(MDCNavigationBar * _Nonnull)navigationBar;
		[Static]
		[Export ("applyTypographyScheme:toNavigationBar:")]
		void ApplyTypographyScheme (ITypographyScheming typographyScheme, NavigationBar navigationBar);
	}

	// @interface MDCNumericValueLabel : UIView
	[BaseType (typeof (UIView), Name = "MDCNumericValueLabel")]
	interface NumericValueLabel {
		// @property (retain, nonatomic) UIColor * backgroundColor;
		[New]
		[Export ("backgroundColor", ArgumentSemantic.Retain)]
		UIColor BackgroundColor { get; set; }

		// @property (retain, nonatomic) UIColor * textColor;
		[Export ("textColor", ArgumentSemantic.Retain)]
		UIColor TextColor { get; set; }

		// @property (nonatomic) CGFloat fontSize;
		[Export ("fontSize")]
		nfloat FontSize { get; set; }

		// @property (copy, nonatomic) NSString * text;
		[Export ("text")]
		string Text { get; set; }
	}

	// @interface MDCOutlinedButtonColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCOutlinedButtonColorThemer")]
	interface OutlinedButtonColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toButton:(MDCButton * _Nonnull)button;
		[Static]
		[Export ("applySemanticColorScheme:toButton:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, Button button);
	}

	// @interface MDCOutlinedButtonThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCOutlinedButtonThemer")]
	interface OutlinedButtonThemer {
		// +(void)applyScheme:(id<MDCButtonScheming> _Nonnull)scheme toButton:(MDCButton * _Nonnull)button;
		[Static]
		[Export ("applyScheme:toButton:")]
		void ApplyScheme (IButtonScheming scheme, Button button);
	}

	// @interface MDCOutlinedTextFieldColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCOutlinedTextFieldColorThemer")]
	interface OutlinedTextFieldColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toTextInputController:(id<MDCTextInputController> _Nonnull)textInputController;
		[Static]
		[Export ("applySemanticColorScheme:toTextInputController:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, ITextInputController textInputController);
	}

	// @interface MDCOverlayObserver : NSObject
	[BaseType (typeof (NSObject), Name = "MDCOverlayObserver")]
	interface OverlayObserver {
		// +(instancetype)observerForScreen:(UIScreen *)screen;
		[Static]
		[Export ("observerForScreen:")]
		OverlayObserver FromScreen (UIScreen screen);

		// -(void)addTarget:(id)target action:(SEL)action;
		[Export ("addTarget:action:")]
		void AddTarget (NSObject target, Selector action);

		// -(void)removeTarget:(id)target action:(SEL)action;
		[Export ("removeTarget:action:")]
		void RemoveTarget (NSObject target, Selector action);

		// -(void)removeTarget:(id)target;
		[Export ("removeTarget:")]
		void RemoveTarget (NSObject target);
	}

	interface IOverlay { }

	// @protocol MDCOverlay <NSObject>
	[Protocol (Name = "MDCOverlay")]
	interface Overlay {
		// @required @property (readonly, copy, nonatomic) NSString * identifier;
		[Abstract]
		[Export ("identifier")]
		string Identifier { get; }

		// @required @property (readonly, nonatomic) CGRect frame;
		[Abstract]
		[Export ("frame")]
		CGRect Frame { get; }
	}

	delegate void EnumerateOverlaysHandler (IOverlay overlay, nuint idx, ref bool stop);

	interface IOverlayTransitioning { }

	// @protocol MDCOverlayTransitioning <NSObject>
	[Protocol (Name = "MDCOverlayTransitioning")]
	interface OverlayTransitioning {
		// @required @property (readonly, nonatomic) NSTimeInterval duration;
		[Abstract]
		[Export ("duration")]
		double Duration { get; }

		// @required @property (readonly, nonatomic) CAMediaTimingFunction * customTimingFunction;
		[Abstract]
		[Export ("customTimingFunction")]
		CAMediaTimingFunction CustomTimingFunction { get; }

		// @required @property (readonly, nonatomic) UIViewAnimationCurve animationCurve;
		[Abstract]
		[Export ("animationCurve")]
		UIViewAnimationCurve AnimationCurve { get; }

		// @required @property (readonly, nonatomic) CGRect compositeFrame;
		[Abstract]
		[Export ("compositeFrame")]
		CGRect CompositeFrame { get; }

		// @required -(CGRect)compositeFrameInView:(UIView *)targetView;
		[Abstract]
		[Export ("compositeFrameInView:")]
		CGRect GetCompositeFrame (UIView targetView);

		// @required -(void)enumerateOverlays:(void (^)(id<MDCOverlay>, NSUInteger, BOOL *))handler;
		[Abstract]
		[Export ("enumerateOverlays:")]
		void EnumerateOverlays (EnumerateOverlaysHandler handler);

		// @required -(void)animateAlongsideTransition:(void (^)(void))animations;
		[Abstract]
		[Export ("animateAlongsideTransition:")]
		void AnimateAlongsideTransition (Action animations);

		// @required -(void)animateAlongsideTransitionWithOptions:(UIViewAnimationOptions)options animations:(void (^)(void))animations completion:(void (^)(BOOL))completion;
		[Abstract]
		[Export ("animateAlongsideTransitionWithOptions:animations:completion:")]
		void AnimateAlongsideTransition (UIViewAnimationOptions options, Action animations, Action<bool> completion);
	}

	// @interface MDCOverlayWindow : UIWindow
	[BaseType (typeof (UIWindow), Name = "MDCOverlayWindow")]
	interface OverlayWindow {
		// -(void)activateOverlay:(UIView *)overlay withLevel:(UIWindowLevel)level;
		[Export ("activateOverlay:withLevel:")]
		void ActivateOverlay (UIView overlay, double level);

		// -(void)deactivateOverlay:(UIView *)overlay;
		[Export ("deactivateOverlay:")]
		void DeactivateOverlay (UIView overlay);
	}

	// @interface MDCPageControl : UIControl <UIScrollViewDelegate>
	[BaseType (typeof (UIControl), Name = "MDCPageControl")]
	interface PageControl : IUIScrollViewDelegate {
		// @property (nonatomic) NSInteger numberOfPages;
		[Export ("numberOfPages")]
		nint NumberOfPages { get; set; }

		// @property (nonatomic) NSInteger currentPage;
		[Export ("currentPage")]
		nint CurrentPage { get; set; }

		// -(void)setCurrentPage:(NSInteger)currentPage animated:(BOOL)animated;
		[Export ("setCurrentPage:animated:")]
		void SetCurrentPage (nint currentPage, bool animated);

		// @property (nonatomic) BOOL hidesForSinglePage;
		[Export ("hidesForSinglePage")]
		bool HidesForSinglePage { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable pageIndicatorTintColor __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("pageIndicatorTintColor", ArgumentSemantic.Strong)]
		UIColor PageIndicatorTintColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable currentPageIndicatorTintColor __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("currentPageIndicatorTintColor", ArgumentSemantic.Strong)]
		UIColor CurrentPageIndicatorTintColor { get; set; }

		// @property (nonatomic) BOOL defersCurrentPageDisplay;
		[Export ("defersCurrentPageDisplay")]
		bool DefersCurrentPageDisplay { get; set; }

		// @property (nonatomic) BOOL respectsUserInterfaceLayoutDirection;
		[Export ("respectsUserInterfaceLayoutDirection")]
		bool RespectsUserInterfaceLayoutDirection { get; set; }

		// -(void)updateCurrentPageDisplay;
		[Export ("updateCurrentPageDisplay")]
		void UpdateCurrentPageDisplay ();

		// +(CGSize)sizeForNumberOfPages:(NSInteger)pageCount;
		[Static]
		[Export ("sizeForNumberOfPages:")]
		CGSize GetSizeForNumberOfPages (nint pageCount);

		// -(void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
		[Export ("scrollViewDidScroll:")]
		void ScrollViewDidScroll (UIScrollView scrollView);

		// -(void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
		[Export ("scrollViewDidEndDecelerating:")]
		void ScrollViewDidEndDecelerating (UIScrollView scrollView);

		// -(void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
		[Export ("scrollViewDidEndScrollingAnimation:")]
		void ScrollViewDidEndScrollingAnimation (UIScrollView scrollView);
	}

	// @interface MDCPageControlColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCPageControlColorThemer")]
	interface PageControlColorThemer {
		// +(void)applyColorScheme:(NSObject<MDCColorScheme> *)colorScheme toPageControl:(MDCPageControl *)pageControl;
		[Obsolete ("This method will soon be deprecated. There is no replacement yet.")]
		[Static]
		[Export ("applyColorScheme:toPageControl:")]
		void ApplyColorScheme (IColorScheme colorScheme, PageControl pageControl);
	}

	// @interface MDCPalette : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCPalette")]
	interface Palette {
		// extern MDCPaletteTint  _Nonnull const MDCPaletteTint50Name;
		[Field ("MDCPaletteTint50Name", "__Internal")]
		NSString Tint50Name { get; }

		// extern MDCPaletteTint  _Nonnull const MDCPaletteTint100Name;
		[Field ("MDCPaletteTint100Name", "__Internal")]
		NSString Tint100Name { get; }

		// extern MDCPaletteTint  _Nonnull const MDCPaletteTint200Name;
		[Field ("MDCPaletteTint200Name", "__Internal")]
		NSString Tint200Name { get; }

		// extern MDCPaletteTint  _Nonnull const MDCPaletteTint300Name;
		[Field ("MDCPaletteTint300Name", "__Internal")]
		NSString Tint300Name { get; }

		// extern MDCPaletteTint  _Nonnull const MDCPaletteTint400Name;
		[Field ("MDCPaletteTint400Name", "__Internal")]
		NSString Tint400Name { get; }

		// extern MDCPaletteTint  _Nonnull const MDCPaletteTint500Name;
		[Field ("MDCPaletteTint500Name", "__Internal")]
		NSString Tint500Name { get; }

		// extern MDCPaletteTint  _Nonnull const MDCPaletteTint600Name;
		[Field ("MDCPaletteTint600Name", "__Internal")]
		NSString Tint600Name { get; }

		// extern MDCPaletteTint  _Nonnull const MDCPaletteTint700Name;
		[Field ("MDCPaletteTint700Name", "__Internal")]
		NSString Tint700Name { get; }

		// extern MDCPaletteTint  _Nonnull const MDCPaletteTint800Name;
		[Field ("MDCPaletteTint800Name", "__Internal")]
		NSString Tint800Name { get; }

		// extern MDCPaletteTint  _Nonnull const MDCPaletteTint900Name;
		[Field ("MDCPaletteTint900Name", "__Internal")]
		NSString Tint900Name { get; }

		// extern MDCPaletteAccent  _Nonnull const MDCPaletteAccent100Name;
		[Field ("MDCPaletteAccent100Name", "__Internal")]
		NSString Accent100Name { get; }

		// extern MDCPaletteAccent  _Nonnull const MDCPaletteAccent200Name;
		[Field ("MDCPaletteAccent200Name", "__Internal")]
		NSString Accent200Name { get; }

		// extern MDCPaletteAccent  _Nonnull const MDCPaletteAccent400Name;
		[Field ("MDCPaletteAccent400Name", "__Internal")]
		NSString Accent400Name { get; }

		// extern MDCPaletteAccent  _Nonnull const MDCPaletteAccent700Name;
		[Field ("MDCPaletteAccent700Name", "__Internal")]
		NSString Accent700Name { get; }

		// @property (readonly, strong, class) MDCPalette * _Nonnull redPalette;
		[Static]
		[Export ("redPalette", ArgumentSemantic.Strong)]
		Palette RedPalette { get; }

		// @property (readonly, strong, class) MDCPalette * _Nonnull pinkPalette;
		[Static]
		[Export ("pinkPalette", ArgumentSemantic.Strong)]
		Palette PinkPalette { get; }

		// @property (readonly, strong, class) MDCPalette * _Nonnull purplePalette;
		[Static]
		[Export ("purplePalette", ArgumentSemantic.Strong)]
		Palette PurplePalette { get; }

		// @property (readonly, strong, class) MDCPalette * _Nonnull deepPurplePalette;
		[Static]
		[Export ("deepPurplePalette", ArgumentSemantic.Strong)]
		Palette DeepPurplePalette { get; }

		// @property (readonly, strong, class) MDCPalette * _Nonnull indigoPalette;
		[Static]
		[Export ("indigoPalette", ArgumentSemantic.Strong)]
		Palette IndigoPalette { get; }

		// @property (readonly, strong, class) MDCPalette * _Nonnull bluePalette;
		[Static]
		[Export ("bluePalette", ArgumentSemantic.Strong)]
		Palette BluePalette { get; }

		// @property (readonly, strong, class) MDCPalette * _Nonnull lightBluePalette;
		[Static]
		[Export ("lightBluePalette", ArgumentSemantic.Strong)]
		Palette LightBluePalette { get; }

		// @property (readonly, strong, class) MDCPalette * _Nonnull cyanPalette;
		[Static]
		[Export ("cyanPalette", ArgumentSemantic.Strong)]
		Palette CyanPalette { get; }

		// @property (readonly, strong, class) MDCPalette * _Nonnull tealPalette;
		[Static]
		[Export ("tealPalette", ArgumentSemantic.Strong)]
		Palette TealPalette { get; }

		// @property (readonly, strong, class) MDCPalette * _Nonnull greenPalette;
		[Static]
		[Export ("greenPalette", ArgumentSemantic.Strong)]
		Palette GreenPalette { get; }

		// @property (readonly, strong, class) MDCPalette * _Nonnull lightGreenPalette;
		[Static]
		[Export ("lightGreenPalette", ArgumentSemantic.Strong)]
		Palette LightGreenPalette { get; }

		// @property (readonly, strong, class) MDCPalette * _Nonnull limePalette;
		[Static]
		[Export ("limePalette", ArgumentSemantic.Strong)]
		Palette LimePalette { get; }

		// @property (readonly, strong, class) MDCPalette * _Nonnull yellowPalette;
		[Static]
		[Export ("yellowPalette", ArgumentSemantic.Strong)]
		Palette YellowPalette { get; }

		// @property (readonly, strong, class) MDCPalette * _Nonnull amberPalette;
		[Static]
		[Export ("amberPalette", ArgumentSemantic.Strong)]
		Palette AmberPalette { get; }

		// @property (readonly, strong, class) MDCPalette * _Nonnull orangePalette;
		[Static]
		[Export ("orangePalette", ArgumentSemantic.Strong)]
		Palette OrangePalette { get; }

		// @property (readonly, strong, class) MDCPalette * _Nonnull deepOrangePalette;
		[Static]
		[Export ("deepOrangePalette", ArgumentSemantic.Strong)]
		Palette DeepOrangePalette { get; }

		// @property (readonly, strong, class) MDCPalette * _Nonnull brownPalette;
		[Static]
		[Export ("brownPalette", ArgumentSemantic.Strong)]
		Palette BrownPalette { get; }

		// @property (readonly, strong, class) MDCPalette * _Nonnull greyPalette;
		[Static]
		[Export ("greyPalette", ArgumentSemantic.Strong)]
		Palette GreyPalette { get; }

		// @property (readonly, strong, class) MDCPalette * _Nonnull blueGreyPalette;
		[Static]
		[Export ("blueGreyPalette", ArgumentSemantic.Strong)]
		Palette BlueGreyPalette { get; }

		// +(instancetype _Nonnull)paletteGeneratedFromColor:(UIColor * _Nonnull)target500Color;
		[Static]
		[Export ("paletteGeneratedFromColor:")]
		Palette FromColor (UIColor target500Color);

		// +(instancetype _Nonnull)paletteWithTints:(NSDictionary<MDCPaletteTint,UIColor *> * _Nonnull)tints accents:(NSDictionary<MDCPaletteAccent,UIColor *> * _Nullable)accents;
		[Static]
		[Export ("paletteWithTints:accents:")]
		Palette FromTints (NSDictionary<NSString, UIColor> tints, [NullAllowed] NSDictionary<NSString, UIColor> accents);

		// -(instancetype _Nonnull)initWithTints:(NSDictionary<MDCPaletteTint,UIColor *> * _Nonnull)tints accents:(NSDictionary<MDCPaletteAccent,UIColor *> * _Nullable)accents;
		[Export ("initWithTints:accents:")]
		IntPtr Constructor (NSDictionary<NSString, UIColor> tints, [NullAllowed] NSDictionary<NSString, UIColor> accents);

		// @property (readonly, nonatomic) UIColor * _Nonnull tint50;
		[Export ("tint50")]
		UIColor Tint50 { get; }

		// @property (readonly, nonatomic) UIColor * _Nonnull tint100;
		[Export ("tint100")]
		UIColor Tint100 { get; }

		// @property (readonly, nonatomic) UIColor * _Nonnull tint200;
		[Export ("tint200")]
		UIColor Tint200 { get; }

		// @property (readonly, nonatomic) UIColor * _Nonnull tint300;
		[Export ("tint300")]
		UIColor Tint300 { get; }

		// @property (readonly, nonatomic) UIColor * _Nonnull tint400;
		[Export ("tint400")]
		UIColor Tint400 { get; }

		// @property (readonly, nonatomic) UIColor * _Nonnull tint500;
		[Export ("tint500")]
		UIColor Tint500 { get; }

		// @property (readonly, nonatomic) UIColor * _Nonnull tint600;
		[Export ("tint600")]
		UIColor Tint600 { get; }

		// @property (readonly, nonatomic) UIColor * _Nonnull tint700;
		[Export ("tint700")]
		UIColor Tint700 { get; }

		// @property (readonly, nonatomic) UIColor * _Nonnull tint800;
		[Export ("tint800")]
		UIColor Tint800 { get; }

		// @property (readonly, nonatomic) UIColor * _Nonnull tint900;
		[Export ("tint900")]
		UIColor Tint900 { get; }

		// @property (readonly, nonatomic) UIColor * _Nullable accent100;
		[NullAllowed]
		[Export ("accent100")]
		UIColor Accent100 { get; }

		// @property (readonly, nonatomic) UIColor * _Nullable accent200;
		[NullAllowed]
		[Export ("accent200")]
		UIColor Accent200 { get; }

		// @property (readonly, nonatomic) UIColor * _Nullable accent400;
		[NullAllowed]
		[Export ("accent400")]
		UIColor Accent400 { get; }

		// @property (readonly, nonatomic) UIColor * _Nullable accent700;
		[NullAllowed]
		[Export ("accent700")]
		UIColor Accent700 { get; }
	}

	// @interface MDCPathGenerator : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCPathGenerator")]
	interface PathGenerator {
		// @property (readonly, nonatomic) CGPoint startPoint;
		[Export ("startPoint")]
		CGPoint StartPoint { get; }

		// @property (readonly, nonatomic) CGPoint endPoint;
		[Export ("endPoint")]
		CGPoint EndPoint { get; }

		// +(instancetype _Nonnull)pathGenerator;
		[Static]
		[Export ("pathGenerator")]
		PathGenerator Create ();

		// +(instancetype _Nonnull)pathGeneratorWithStartPoint:(CGPoint)startPoint;
		[Static]
		[Export ("pathGeneratorWithStartPoint:")]
		PathGenerator Create (CGPoint startPoint);

		// -(void)addLineToPoint:(CGPoint)point;
		[Export ("addLineToPoint:")]
		void AddLine (CGPoint point);

		// -(void)addArcWithCenter:(CGPoint)center radius:(CGFloat)radius startAngle:(CGFloat)startAngle endAngle:(CGFloat)endAngle clockwise:(BOOL)clockwise;
		[Export ("addArcWithCenter:radius:startAngle:endAngle:clockwise:")]
		void AddArc (CGPoint center, nfloat radius, nfloat startAngle, nfloat endAngle, bool clockwise);

		// -(void)addArcWithTangentPoint:(CGPoint)tangentPoint toPoint:(CGPoint)toPoint radius:(CGFloat)radius;
		[Export ("addArcWithTangentPoint:toPoint:radius:")]
		void AddArc (CGPoint tangentPoint, CGPoint toPoint, nfloat radius);

		// -(void)addCurveWithControlPoint1:(CGPoint)controlPoint1 controlPoint2:(CGPoint)controlPoint2 toPoint:(CGPoint)toPoint;
		[Export ("addCurveWithControlPoint1:controlPoint2:toPoint:")]
		void AddCurve (CGPoint controlPoint1, CGPoint controlPoint2, CGPoint toPoint);

		// -(void)addQuadCurveWithControlPoint:(CGPoint)controlPoint toPoint:(CGPoint)toPoint;
		[Export ("addQuadCurveWithControlPoint:toPoint:")]
		void AddQuadCurve (CGPoint controlPoint, CGPoint toPoint);

		// TODO: Check
		// -(void)appendToCGPath:(CGMutablePathRef _Nonnull)cgPath transform:(CGAffineTransform * _Nullable)transform;
		[Export ("appendToCGPath:transform:")]
		void AppendTo (CGPath cgPath, [NullAllowed] CGAffineTransform transform);
	}

	// @interface MDCPillShapeGenerator : NSObject <MDCShapeGenerating>
	[BaseType (typeof (NSObject), Name = "MDCPillShapeGenerator")]
	interface PillShapeGenerator : ShapeGenerating { }

	// @interface MDCProgressView : UIView
	[BaseType (typeof (UIView), Name = "MDCProgressView")]
	interface ProgressView {
		// @property (nonatomic, strong) UIColor * _Null_unspecified progressTintColor __attribute__((annotate("ui_appearance_selector")));
		[Export ("progressTintColor", ArgumentSemantic.Strong)]
		UIColor ProgressTintColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Null_unspecified trackTintColor __attribute__((annotate("ui_appearance_selector")));
		[Export ("trackTintColor", ArgumentSemantic.Strong)]
		UIColor TrackTintColor { get; set; }

		// @property (assign, nonatomic) float progress;
		[Export ("progress")]
		float Progress { get; set; }

		// @property (assign, nonatomic) MDCProgressViewBackwardAnimationMode backwardProgressAnimationMode;
		[Export ("backwardProgressAnimationMode", ArgumentSemantic.Assign)]
		ProgressViewBackwardAnimationMode BackwardProgressAnimationMode { get; set; }

		// -(void)setProgress:(float)progress animated:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion;
		[Export ("setProgress:animated:completion:")]
		void SetProgress (float progress, bool animated, [NullAllowed] Action<bool> completion);

		// -(void)setHidden:(BOOL)hidden animated:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion;
		[Export ("setHidden:animated:completion:")]
		void SetHidden (bool hidden, bool animated, [NullAllowed] Action<bool> completion);
	}

	// @interface MDCProgressViewColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCProgressViewColorThemer")]
	interface ProgressViewColorThemer {
		// +(void)applyColorScheme:(NSObject<MDCColorScheme> *)colorScheme toProgressView:(MDCProgressView *)progressView;
		[Obsolete ("This method will soon be deprecated. There is no replacement yet.")]
		[Static]
		[Export ("applyColorScheme:toProgressView:")]
		void ApplyColorScheme (IColorScheme colorScheme, ProgressView progressView);
	}

	// @interface MDCRaisedButton : MDCButton
	[Obsolete ("This class will be deprecated soon. Consider using ContainedButtonThemer with a Button instead.")]
	[BaseType (typeof (Button), Name = "MDCRaisedButton")]
	interface RaisedButton { }

	// @interface MDCRectangleShapeGenerator : NSObject <MDCShapeGenerating>
	[BaseType (typeof (NSObject), Name = "MDCRectangleShapeGenerator")]
	interface RectangleShapeGenerator : ShapeGenerating {
		// @property (nonatomic, strong) MDCCornerTreatment * topLeftCorner;
		[Export ("topLeftCorner", ArgumentSemantic.Strong)]
		CornerTreatment TopLeftCorner { get; set; }

		// @property (nonatomic, strong) MDCCornerTreatment * topRightCorner;
		[Export ("topRightCorner", ArgumentSemantic.Strong)]
		CornerTreatment TopRightCorner { get; set; }

		// @property (nonatomic, strong) MDCCornerTreatment * bottomLeftCorner;
		[Export ("bottomLeftCorner", ArgumentSemantic.Strong)]
		CornerTreatment BottomLeftCorner { get; set; }

		// @property (nonatomic, strong) MDCCornerTreatment * bottomRightCorner;
		[Export ("bottomRightCorner", ArgumentSemantic.Strong)]
		CornerTreatment BottomRightCorner { get; set; }

		// @property (assign, nonatomic) CGPoint topLeftCornerOffset;
		[Export ("topLeftCornerOffset", ArgumentSemantic.Assign)]
		CGPoint TopLeftCornerOffset { get; set; }

		// @property (assign, nonatomic) CGPoint topRightCornerOffset;
		[Export ("topRightCornerOffset", ArgumentSemantic.Assign)]
		CGPoint TopRightCornerOffset { get; set; }

		// @property (assign, nonatomic) CGPoint bottomLeftCornerOffset;
		[Export ("bottomLeftCornerOffset", ArgumentSemantic.Assign)]
		CGPoint BottomLeftCornerOffset { get; set; }

		// @property (assign, nonatomic) CGPoint bottomRightCornerOffset;
		[Export ("bottomRightCornerOffset", ArgumentSemantic.Assign)]
		CGPoint BottomRightCornerOffset { get; set; }

		// @property (nonatomic, strong) MDCEdgeTreatment * topEdge;
		[Export ("topEdge", ArgumentSemantic.Strong)]
		EdgeTreatment TopEdge { get; set; }

		// @property (nonatomic, strong) MDCEdgeTreatment * rightEdge;
		[Export ("rightEdge", ArgumentSemantic.Strong)]
		EdgeTreatment RightEdge { get; set; }

		// @property (nonatomic, strong) MDCEdgeTreatment * bottomEdge;
		[Export ("bottomEdge", ArgumentSemantic.Strong)]
		EdgeTreatment BottomEdge { get; set; }

		// @property (nonatomic, strong) MDCEdgeTreatment * leftEdge;
		[Export ("leftEdge", ArgumentSemantic.Strong)]
		EdgeTreatment LeftEdge { get; set; }

		// -(void)setCorners:(MDCCornerTreatment *)cornerShape;
		[Export ("setCorners:")]
		void SetCorners (CornerTreatment cornerShape);

		// -(void)setEdges:(MDCEdgeTreatment *)edgeShape;
		[Export ("setEdges:")]
		void SetEdges (EdgeTreatment edgeShape);
	}

	// @interface MDCRoundedCornerTreatment : MDCCornerTreatment
	[BaseType (typeof (CornerTreatment), Name = "MDCRoundedCornerTreatment")]
	interface RoundedCornerTreatment {
		// @property (assign, nonatomic) CGFloat radius;
		[Export ("radius")]
		nfloat Radius { get; set; }

		// -(instancetype _Nonnull)initWithRadius:(CGFloat)radius __attribute__((objc_designated_initializer));
		[DesignatedInitializer]
		[Export ("initWithRadius:")]
		IntPtr Constructor (nfloat radius);
	}

	interface IColorScheming { }

	// @protocol MDCColorScheming
	[Protocol (Name = "MDCColorScheming")]
	interface ColorScheming {
		// @required @property (readonly, copy, nonatomic) UIColor * _Nonnull primaryColor;
		[Abstract]
		[Export ("primaryColor", ArgumentSemantic.Copy)]
		UIColor PrimaryColor { get; }

		// @required @property (readonly, copy, nonatomic) UIColor * _Nonnull primaryColorVariant;
		[Abstract]
		[Export ("primaryColorVariant", ArgumentSemantic.Copy)]
		UIColor PrimaryColorVariant { get; }

		// @required @property (readonly, copy, nonatomic) UIColor * _Nonnull secondaryColor;
		[Abstract]
		[Export ("secondaryColor", ArgumentSemantic.Copy)]
		UIColor SecondaryColor { get; }

		// @required @property (readonly, copy, nonatomic) UIColor * _Nonnull errorColor;
		[Abstract]
		[Export ("errorColor", ArgumentSemantic.Copy)]
		UIColor ErrorColor { get; }

		// @required @property (readonly, copy, nonatomic) UIColor * _Nonnull surfaceColor;
		[Abstract]
		[Export ("surfaceColor", ArgumentSemantic.Copy)]
		UIColor SurfaceColor { get; }

		// @required @property (readonly, copy, nonatomic) UIColor * _Nonnull backgroundColor;
		[Abstract]
		[Export ("backgroundColor", ArgumentSemantic.Copy)]
		UIColor BackgroundColor { get; }

		// @required @property (readonly, copy, nonatomic) UIColor * _Nonnull onPrimaryColor;
		[Abstract]
		[Export ("onPrimaryColor", ArgumentSemantic.Copy)]
		UIColor OnPrimaryColor { get; }

		// @required @property (readonly, copy, nonatomic) UIColor * _Nonnull onSecondaryColor;
		[Abstract]
		[Export ("onSecondaryColor", ArgumentSemantic.Copy)]
		UIColor OnSecondaryColor { get; }

		// @required @property (readonly, copy, nonatomic) UIColor * _Nonnull onSurfaceColor;
		[Abstract]
		[Export ("onSurfaceColor", ArgumentSemantic.Copy)]
		UIColor OnSurfaceColor { get; }

		// @required @property (readonly, copy, nonatomic) UIColor * _Nonnull onBackgroundColor;
		[Abstract]
		[Export ("onBackgroundColor", ArgumentSemantic.Copy)]
		UIColor OnBackgroundColor { get; }
	}

	// @interface MDCSemanticColorScheme : NSObject <MDCColorScheming, NSCopying>
	[BaseType (typeof (NSObject), Name = "MDCSemanticColorScheme")]
	interface SemanticColorScheme : ColorScheming, INSCopying {
		// @property (readwrite, copy, nonatomic) UIColor * _Nonnull primaryColor;
		[Export ("primaryColor", ArgumentSemantic.Copy)]
		new UIColor PrimaryColor { get; set; }

		// @property (readwrite, copy, nonatomic) UIColor * _Nonnull primaryColorVariant;
		[Export ("primaryColorVariant", ArgumentSemantic.Copy)]
		new UIColor PrimaryColorVariant { get; set; }

		// @property (readwrite, copy, nonatomic) UIColor * _Nonnull secondaryColor;
		[Export ("secondaryColor", ArgumentSemantic.Copy)]
		new UIColor SecondaryColor { get; set; }

		// @property (readwrite, copy, nonatomic) UIColor * _Nonnull errorColor;
		[Export ("errorColor", ArgumentSemantic.Copy)]
		new UIColor ErrorColor { get; set; }

		// @property (readwrite, copy, nonatomic) UIColor * _Nonnull surfaceColor;
		[Export ("surfaceColor", ArgumentSemantic.Copy)]
		new UIColor SurfaceColor { get; set; }

		// @property (readwrite, copy, nonatomic) UIColor * _Nonnull backgroundColor;
		[Export ("backgroundColor", ArgumentSemantic.Copy)]
		new UIColor BackgroundColor { get; set; }

		// @property (readwrite, copy, nonatomic) UIColor * _Nonnull onPrimaryColor;
		[Export ("onPrimaryColor", ArgumentSemantic.Copy)]
		new UIColor OnPrimaryColor { get; set; }

		// @property (readwrite, copy, nonatomic) UIColor * _Nonnull onSecondaryColor;
		[Export ("onSecondaryColor", ArgumentSemantic.Copy)]
		new UIColor OnSecondaryColor { get; set; }

		// @property (readwrite, copy, nonatomic) UIColor * _Nonnull onSurfaceColor;
		[Export ("onSurfaceColor", ArgumentSemantic.Copy)]
		new UIColor OnSurfaceColor { get; set; }

		// @property (readwrite, copy, nonatomic) UIColor * _Nonnull onBackgroundColor;
		[Export ("onBackgroundColor", ArgumentSemantic.Copy)]
		new UIColor OnBackgroundColor { get; set; }

		// -(instancetype _Nonnull)initWithDefaults:(MDCColorSchemeDefaults)defaults;
		[Export ("initWithDefaults:")]
		IntPtr Constructor (ColorSchemeDefaults defaults);

		// +(UIColor * _Nonnull)blendColor:(UIColor * _Nonnull)color withBackgroundColor:(UIColor * _Nonnull)backgroundColor;
		[Static]
		[Export ("blendColor:withBackgroundColor:")]
		UIColor BlendColor (UIColor color, UIColor backgroundColor);
	}

	// @interface MDCShadowMetrics : NSObject
	[BaseType (typeof (NSObject), Name = "MDCShadowMetrics")]
	interface ShadowMetrics {
		// @property (readonly, nonatomic) CGFloat topShadowRadius;
		[Export ("topShadowRadius")]
		nfloat TopShadowRadius { get; }

		// @property (readonly, nonatomic) CGSize topShadowOffset;
		[Export ("topShadowOffset")]
		CGSize TopShadowOffset { get; }

		// @property (readonly, nonatomic) float topShadowOpacity;
		[Export ("topShadowOpacity")]
		float TopShadowOpacity { get; }

		// @property (readonly, nonatomic) CGFloat bottomShadowRadius;
		[Export ("bottomShadowRadius")]
		nfloat BottomShadowRadius { get; }

		// @property (readonly, nonatomic) CGSize bottomShadowOffset;
		[Export ("bottomShadowOffset")]
		CGSize BottomShadowOffset { get; }

		// @property (readonly, nonatomic) float bottomShadowOpacity;
		[Export ("bottomShadowOpacity")]
		float BottomShadowOpacity { get; }

		// +(MDCShadowMetrics * _Nonnull)metricsWithElevation:(CGFloat)elevation;
		[Static]
		[Export ("metricsWithElevation:")]
		ShadowMetrics Create (nfloat elevation);
	}

	// @interface MDCShadowLayer : CALayer
	[BaseType (typeof (CALayer), Name = "MDCShadowLayer")]
	interface ShadowLayer : ICALayerDelegate {
		// @property (assign, nonatomic) MDCShadowElevation elevation;
		[Export ("elevation")]
		nfloat Elevation { get; set; }

		// @property (getter = isShadowMaskEnabled, assign, nonatomic) BOOL shadowMaskEnabled;
		[Export ("shadowMaskEnabled")]
		bool ShadowMaskEnabled { [Bind ("isShadowMaskEnabled")] get; set; }

		// -(void)animateCornerRadius:(CGFloat)cornerRadius withTimingFunction:(CAMediaTimingFunction * _Nonnull)timingFunction duration:(NSTimeInterval)duration;
		[Export ("animateCornerRadius:withTimingFunction:duration:")]
		void AnimateCornerRadius (nfloat cornerRadius, CAMediaTimingFunction timingFunction, double duration);
	}

	// @interface MDCShapedShadowLayer : MDCShadowLayer
	[BaseType (typeof (ShadowLayer), Name = "MDCShapedShadowLayer")]
	interface ShapedShadowLayer {
		// @property (nonatomic, strong) UIColor * _Nullable shapedBackgroundColor;
		[NullAllowed]
		[Export ("shapedBackgroundColor", ArgumentSemantic.Strong)]
		UIColor ShapedBackgroundColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable shapedBorderColor;
		[NullAllowed]
		[Export ("shapedBorderColor", ArgumentSemantic.Strong)]
		UIColor ShapedBorderColor { get; set; }

		// @property (assign, nonatomic) CGFloat shapedBorderWidth;
		[Export ("shapedBorderWidth")]
		nfloat ShapedBorderWidth { get; set; }

		// @property (nonatomic, strong) id<MDCShapeGenerating> _Nullable shapeGenerator;
		[NullAllowed]
		[Export ("shapeGenerator", ArgumentSemantic.Strong)]
		IShapeGenerating ShapeGenerator { get; set; }

		// @property (nonatomic, strong) CAShapeLayer * _Nonnull shapeLayer;
		[Export ("shapeLayer", ArgumentSemantic.Strong)]
		CAShapeLayer ShapeLayer { get; set; }

		// @property (nonatomic, strong) CAShapeLayer * _Nonnull colorLayer;
		[Export ("colorLayer", ArgumentSemantic.Strong)]
		CAShapeLayer ColorLayer { get; set; }
	}

	// @interface MDCShapedView : UIView
	[BaseType (typeof (UIView), Name = "MDCShapedView")]
	interface ShapedView {
		// @property (assign, nonatomic) MDCShadowElevation elevation;
		[Export ("elevation")]
		nfloat Elevation { get; set; }

		// @property (nonatomic, strong) id<MDCShapeGenerating> _Nullable shapeGenerator __attribute__((iboutlet));
		[NullAllowed]
		[Export ("shapeGenerator", ArgumentSemantic.Strong)]
		IShapeGenerating ShapeGenerator { get; set; }

		// -(instancetype _Nonnull)initWithFrame:(CGRect)frame shapeGenerator:(id<MDCShapeGenerating> _Nullable)shapeGenerator __attribute__((objc_designated_initializer));
		[Export ("initWithFrame:shapeGenerator:")]
		[DesignatedInitializer]
		IntPtr Constructor (CGRect frame, [NullAllowed] IShapeGenerating shapeGenerator);

		[Wrap ("this (frame, null)")]
		IntPtr Constructor (CGRect frame);
	}

	interface IShapeGenerating { }

	// @protocol MDCShapeGenerating <NSCopying>
	[Protocol (Name = "MDCShapeGenerating")]
	interface ShapeGenerating : INSCopying {
		// TODO: Check this
		// @required -(CGPathRef _Nullable)pathForSize:(CGSize)size;
		[Abstract]
		[return: NullAllowed]
		[Export ("pathForSize:")]
		CGPath GetPath (CGSize size);
	}

	// @interface MDCSlantedRectShapeGenerator : NSObject <MDCShapeGenerating>
	[BaseType (typeof (NSObject), Name = "MDCSlantedRectShapeGenerator")]
	interface SlantedRectShapeGenerator : ShapeGenerating {
		// @property (assign, nonatomic) CGFloat slant;
		[Export ("slant")]
		nfloat Slant { get; set; }
	}

	// @interface MDCSlider : UIControl
	[BaseType (typeof (UIControl), Name = "MDCSlider")]
	interface Slider {
		// @property (getter = isStatefulAPIEnabled, assign, nonatomic) BOOL statefulAPIEnabled;
		[Export ("statefulAPIEnabled")]
		bool StatefulApiEnabled { [Bind ("isStatefulAPIEnabled")] get; set; }

		// @property (nonatomic, weak) id<MDCSliderDelegate> _Nullable delegate;
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		ISliderDelegate Delegate { get; set; }

		// -(void)setThumbColor:(UIColor * _Nullable)thumbColor forState:(UIControlState)state;
		[Export ("setThumbColor:forState:")]
		void SetThumbColor ([NullAllowed] UIColor thumbColor, UIControlState state);

		// -(UIColor * _Nullable)thumbColorForState:(UIControlState)state;
		[return: NullAllowed]
		[Export ("thumbColorForState:")]
		UIColor GetThumbColor (UIControlState state);

		// -(void)setTrackFillColor:(UIColor * _Nullable)fillColor forState:(UIControlState)state;
		[Export ("setTrackFillColor:forState:")]
		void SetTrackFillColor ([NullAllowed] UIColor fillColor, UIControlState state);

		// -(UIColor * _Nullable)trackFillColorForState:(UIControlState)state;
		[return: NullAllowed]
		[Export ("trackFillColorForState:")]
		UIColor GetTrackFillColor (UIControlState state);

		// -(void)setTrackBackgroundColor:(UIColor * _Nullable)backgroundColor forState:(UIControlState)state;
		[Export ("setTrackBackgroundColor:forState:")]
		void SetTrackBackgroundColor ([NullAllowed] UIColor backgroundColor, UIControlState state);

		// -(UIColor * _Nullable)trackBackgroundColorForState:(UIControlState)state;
		[return: NullAllowed]
		[Export ("trackBackgroundColorForState:")]
		UIColor GetTrackBackgroundColor (UIControlState state);

		// -(void)setFilledTrackTickColor:(UIColor * _Nullable)tickColor forState:(UIControlState)state;
		[Export ("setFilledTrackTickColor:forState:")]
		void SetFilledTrackTickColor ([NullAllowed] UIColor tickColor, UIControlState state);

		// -(UIColor * _Nullable)filledTrackTickColorForState:(UIControlState)state;
		[return: NullAllowed]
		[Export ("filledTrackTickColorForState:")]
		UIColor GetFilledTrackTickColor (UIControlState state);

		// -(void)setBackgroundTrackTickColor:(UIColor * _Nullable)tickColor forState:(UIControlState)state;
		[Export ("setBackgroundTrackTickColor:forState:")]
		void SetBackgroundTrackTickColor ([NullAllowed] UIColor tickColor, UIControlState state);

		// -(UIColor * _Nullable)backgroundTrackTickColorForState:(UIControlState)state;
		[return: NullAllowed]
		[Export ("backgroundTrackTickColorForState:")]
		UIColor GetBackgroundTrackTickColor (UIControlState state);

		// @property (nonatomic, strong) UIColor * _Nullable inkColor;
		[NullAllowed]
		[Export ("inkColor", ArgumentSemantic.Strong)]
		UIColor InkColor { get; set; }

		// @property (assign, nonatomic) CGFloat thumbRadius __attribute__((annotate("ui_appearance_selector")));
		[Export ("thumbRadius")]
		nfloat ThumbRadius { get; set; }

		// @property (assign, nonatomic) MDCShadowElevation thumbElevation __attribute__((annotate("ui_appearance_selector")));
		[Export ("thumbElevation")]
		nfloat ThumbElevation { get; set; }

		// @property (assign, nonatomic) NSUInteger numberOfDiscreteValues;
		[Export ("numberOfDiscreteValues")]
		nuint NumberOfDiscreteValues { get; set; }

		// @property (assign, nonatomic) CGFloat value;
		[Export ("value")]
		nfloat Value { get; set; }

		// -(void)setValue:(CGFloat)value animated:(BOOL)animated;
		[Export ("setValue:animated:")]
		void SetValue (nfloat value, bool animated);

		// @property (assign, nonatomic) CGFloat minimumValue;
		[Export ("minimumValue")]
		nfloat MinimumValue { get; set; }

		// @property (assign, nonatomic) CGFloat maximumValue;
		[Export ("maximumValue")]
		nfloat MaximumValue { get; set; }

		// @property (getter = isContinuous, assign, nonatomic) BOOL continuous;
		[Export ("continuous")]
		bool Continuous { [Bind ("isContinuous")] get; set; }

		// @property (assign, nonatomic) CGFloat filledTrackAnchorValue;
		[Export ("filledTrackAnchorValue")]
		nfloat FilledTrackAnchorValue { get; set; }

		// @property (assign, nonatomic) BOOL shouldDisplayDiscreteValueLabel;
		[Export ("shouldDisplayDiscreteValueLabel")]
		bool ShouldDisplayDiscreteValueLabel { get; set; }

		// @property (nonatomic, strong) UIColor * _Null_unspecified valueLabelTextColor;
		[Export ("valueLabelTextColor", ArgumentSemantic.Strong)]
		UIColor ValueLabelTextColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Null_unspecified valueLabelBackgroundColor;
		[Export ("valueLabelBackgroundColor", ArgumentSemantic.Strong)]
		UIColor ValueLabelBackgroundColor { get; set; }

		// @property (getter = isThumbHollowAtStart, assign, nonatomic) BOOL thumbHollowAtStart;
		[Export ("thumbHollowAtStart")]
		bool ThumbHollowAtStart { [Bind ("isThumbHollowAtStart")] get; set; }

		// @property (nonatomic, strong) UIColor * _Null_unspecified disabledColor __attribute__((annotate("ui_appearance_selector")));
		[Obsolete ("This API is planned for deprecation. Use SetThumbColor and SetTrackBackgroundColor methods instead.")]
		[Export ("disabledColor", ArgumentSemantic.Strong)]
		UIColor DisabledColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Null_unspecified color __attribute__((annotate("ui_appearance_selector")));
		[Obsolete ("This API is planned for deprecation. Use InkColor property, SetThumbColor and SetTrackFillColor methods instead.")]
		[Export ("color", ArgumentSemantic.Strong)]
		UIColor Color { get; set; }

		// @property (nonatomic, strong) UIColor * _Null_unspecified trackBackgroundColor __attribute__((annotate("ui_appearance_selector")));
		[Obsolete ("This API is planned for deprecation. Use SetTrackBackgroundColor method instead.")]
		[Export ("trackBackgroundColor", ArgumentSemantic.Strong)]
		UIColor TrackBackgroundColor { get; set; }
	}

	interface ISliderDelegate { }

	// @protocol MDCSliderDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "MDCSliderDelegate")]
	interface SliderDelegate {
		// @optional -(BOOL)slider:(MDCSlider * _Nonnull)slider shouldJumpToValue:(CGFloat)value;
		[Export ("slider:shouldJumpToValue:")]
		bool ShouldJumpToValue (Slider slider, nfloat value);

		// @optional -(NSString * _Nonnull)slider:(MDCSlider * _Nonnull)slider displayedStringForValue:(CGFloat)value;
		[Export ("slider:displayedStringForValue:")]
		string DisplayedStringForValue (Slider slider, nfloat value);

		// @optional -(NSString * _Nonnull)slider:(MDCSlider * _Nonnull)slider accessibilityLabelForValue:(CGFloat)value;
		[Export ("slider:accessibilityLabelForValue:")]
		string AccessibilityLabelForValue (Slider slider, nfloat value);
	}

	// @interface MDCSliderColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCSliderColorThemer")]
	interface SliderColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toSlider:(MDCSlider * _Nonnull)slider;
		[Static]
		[Export ("applySemanticColorScheme:toSlider:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, Slider slider);

		// +(void)applyColorScheme:(NSObject<MDCColorScheme> * _Nonnull)colorScheme toSlider:(MDCSlider * _Nonnull)slider;
		[Obsolete ("This method will soon be deprecated. Consider using ApplySemanticColorScheme method instead.")]
		[Static]
		[Export ("applyColorScheme:toSlider:")]
		void ApplyColorScheme (IColorScheme colorScheme, Slider slider);

		// +(MDCBasicColorScheme * _Nonnull)defaultSliderLightColorScheme;
		[Obsolete ("This method will soon be deprecated. Consider using SemanticColorScheme class instead.")]
		[Static]
		[Export ("defaultSliderLightColorScheme")]
		BasicColorScheme DefaultSliderLightColorScheme { get; }

		// +(MDCBasicColorScheme * _Nonnull)defaultSliderDarkColorScheme;
		[Obsolete ("This method will soon be deprecated. Consider using SemanticColorScheme class instead.")]
		[Static]
		[Export ("defaultSliderDarkColorScheme")]
		BasicColorScheme DefaultSliderDarkColorScheme { get; }
	}

	// @interface MDCSnackbarColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCSnackbarColorThemer")]
	interface SnackbarColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme;
		[Static]
		[Export ("applySemanticColorScheme:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme);

		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toSnackbarManager:(MDCSnackbarManager * _Nonnull)snackbarManager;
		[Static]
		[Export ("applySemanticColorScheme:toSnackbarManager:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, SnackbarManager snackbarManager);
	}

	// @interface MDCSnackbarFontThemer : NSObject
	[Obsolete ("This class will soon be deprecated. Please consider using SnackbarTypographyThemer class instead.")]
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCSnackbarFontThemer")]
	interface SnackbarFontThemer {
		// +(void)applyFontScheme:(id<MDCFontScheme> _Nonnull)fontScheme toSnackbarMessageView:(MDCSnackbarMessageView * _Nonnull)snackbarMessageView;
		[Static]
		[Export ("applyFontScheme:toSnackbarMessageView:")]
		void ApplyFontScheme (IFontScheme fontScheme, SnackbarMessageView snackbarMessageView);

		// +(void)applyFontScheme:(id<MDCFontScheme> _Nonnull)fontScheme;
		[Static]
		[Export ("applyFontScheme:")]
		void ApplyFontScheme (IFontScheme fontScheme);
	}

	interface ISnackbarManagerDelegate { }

	// @protocol MDCSnackbarManagerDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "MDCSnackbarManagerDelegate")]
	interface SnackbarManagerDelegate {
		// @required -(void)willPresentSnackbarWithMessageView:(MDCSnackbarMessageView * _Nullable)messageView;
		[Abstract]
		[Export ("willPresentSnackbarWithMessageView:")]
		void WillPresentSnackbar ([NullAllowed] SnackbarMessageView messageView);
	}

	// @interface MDCSnackbarManager : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCSnackbarManager")]
	interface SnackbarManager {
		// @property (readonly, nonatomic, strong, class) MDCSnackbarManager * _Nonnull defaultManager;
		[Static]
		[Export ("defaultManager", ArgumentSemantic.Strong)]
		SnackbarManager DefaultManager { get; }

		// @property (assign, nonatomic, class) MDCSnackbarAlignment alignment;
		[Export ("alignment", ArgumentSemantic.Assign)]
		SnackbarAlignment Alignment { get; set; }

		// +(void)showMessage:(MDCSnackbarMessage * _Nullable)message;
		[Export ("showMessage:")]
		void ShowMessage ([NullAllowed] SnackbarMessage message);

		// +(void)setPresentationHostView:(UIView * _Nullable)hostView;
		[Export ("setPresentationHostView:")]
		void SetPresentationHostView ([NullAllowed] UIView hostView);

		// +(BOOL)hasMessagesShowingOrQueued;
		[Export ("hasMessagesShowingOrQueued")]
		bool HasMessagesShowingOrQueued { get; }

		// +(void)dismissAndCallCompletionBlocksWithCategory:(NSString * _Nullable)category;
		[Export ("dismissAndCallCompletionBlocksWithCategory:")]
		void DismissAndCallCompletionBlocks ([NullAllowed] string category);

		// +(void)setBottomOffset:(CGFloat)offset;
		[Export ("setBottomOffset:")]
		void SetBottomOffset (nfloat offset);

		// +(id<MDCSnackbarSuspensionToken> _Nullable)suspendAllMessages;
		[NullAllowed]
		[Export ("suspendAllMessages")]
		ISnackbarSuspensionToken SuspendAllMessages ();

		// +(id<MDCSnackbarSuspensionToken> _Nullable)suspendMessagesWithCategory:(NSString * _Nullable)category;
		[Export ("suspendMessagesWithCategory:")]
		[return: NullAllowed]
		ISnackbarSuspensionToken SuspendMessages ([NullAllowed] string category);

		// +(void)resumeMessagesWithToken:(id<MDCSnackbarSuspensionToken> _Nullable)token;
		[Export ("resumeMessagesWithToken:")]
		void ResumeMessages ([NullAllowed] ISnackbarSuspensionToken token);

		// @property (nonatomic, strong, class) UIColor * _Nullable snackbarMessageViewBackgroundColor;
		[NullAllowed]
		[Export ("snackbarMessageViewBackgroundColor", ArgumentSemantic.Strong)]
		UIColor SnackbarMessageViewBackgroundColor { get; set; }

		// @property (nonatomic, strong, class) UIColor * _Nullable snackbarMessageViewShadowColor;
		[NullAllowed]
		[Export ("snackbarMessageViewShadowColor", ArgumentSemantic.Strong)]
		UIColor SnackbarMessageViewShadowColor { get; set; }

		// @property (nonatomic, strong, class) UIColor * _Nullable messageTextColor;
		[NullAllowed]
		[Export ("messageTextColor", ArgumentSemantic.Strong)]
		UIColor MessageTextColor { get; set; }

		// @property (nonatomic, strong, class) UIFont * _Nullable messageFont;
		[NullAllowed]
		[Export ("messageFont", ArgumentSemantic.Strong)]
		UIFont MessageFont { get; set; }

		// @property (nonatomic, strong, class) UIFont * _Nullable buttonFont;
		[NullAllowed]
		[Export ("buttonFont", ArgumentSemantic.Strong)]
		UIFont ButtonFont { get; set; }

		// @property (assign, nonatomic, class) BOOL shouldApplyStyleChangesToVisibleSnackbars;
		[Export ("shouldApplyStyleChangesToVisibleSnackbars")]
		bool ShouldApplyStyleChangesToVisibleSnackbars { get; set; }

		// +(UIColor * _Nullable)buttonTitleColorForState:(UIControlState)state;
		[return: NullAllowed]
		[Export ("buttonTitleColorForState:")]
		UIColor GetButtonTitleColor (UIControlState state);

		// +(void)setButtonTitleColor:(UIColor * _Nullable)titleColor forState:(UIControlState)state;
		[Export ("setButtonTitleColor:forState:")]
		void SetButtonTitleColor ([NullAllowed] UIColor titleColor, UIControlState state);

		// @property (readwrite, nonatomic, setter = mdc_setAdjustsFontForContentSizeCategory:, class) BOOL mdc_adjustsFontForContentSizeCategory;
		[Export ("mdc_adjustsFontForContentSizeCategory")]
		bool MdcAdjustsFontForContentSizeCategory { get; [Bind ("mdc_setAdjustsFontForContentSizeCategory:")] set; }

		// @property (assign, nonatomic) BOOL shouldEnableAccessibilityViewIsModal;
		[Export ("shouldEnableAccessibilityViewIsModal")]
		bool ShouldEnableAccessibilityViewIsModal { get; set; }

		// @property (nonatomic, weak, class) id<MDCSnackbarManagerDelegate> _Nullable delegate;
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		ISnackbarManagerDelegate Delegate { get; set; }
	}

	interface ISnackbarSuspensionToken { }

	// @protocol MDCSnackbarSuspensionToken <NSObject>
	[Protocol (Name = "MDCSnackbarSuspensionToken")]
	interface SnackbarSuspensionToken { }

	// typedef void (^MDCSnackbarMessageCompletionHandler)(BOOL);
	delegate void SnackbarMessageCompletionHandler (bool arg0);

	// typedef void (^MDCSnackbarMessageActionHandler)();
	delegate void SnackbarMessageActionHandler ();

	// @interface MDCSnackbarMessage : NSObject <NSCopying, UIAccessibilityIdentification>
	[BaseType (typeof (NSObject), Name = "MDCSnackbarMessage")]
	interface SnackbarMessage : INSCopying, IUIAccessibilityIdentification {
		// extern const NSTimeInterval MDCSnackbarMessageDurationMax;
		[Field ("MDCSnackbarMessageDurationMax", "__Internal")]
		double DurationMax { get; }

		// extern NSString *const MDCSnackbarMessageBoldAttributeName;
		[Field ("MDCSnackbarMessageBoldAttributeName", "__Internal")]
		NSString BoldAttributeName { get; }

		// +(instancetype _Nonnull)messageWithText:(NSString * _Nonnull)text;
		[Static]
		[Export ("messageWithText:")]
		SnackbarMessage Create (string text);

		// +(instancetype _Nonnull)messageWithAttributedText:(NSAttributedString * _Nonnull)attributedText;
		[Static]
		[Export ("messageWithAttributedText:")]
		SnackbarMessage Create (NSAttributedString attributedText);

		// @property (assign, nonatomic, class) BOOL usesLegacySnackbar;
		[Static]
		[Export ("usesLegacySnackbar")]
		bool UsesLegacySnackbar { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable text;
		[NullAllowed]
		[Export ("text")]
		string Text { get; set; }

		// @property (copy, nonatomic) NSAttributedString * _Nullable attributedText;
		[NullAllowed]
		[Export ("attributedText", ArgumentSemantic.Copy)]
		NSAttributedString AttributedText { get; set; }

		// @property (nonatomic, strong) MDCSnackbarMessageAction * _Nullable action;
		[NullAllowed]
		[Export ("action", ArgumentSemantic.Strong)]
		SnackbarMessageAction Action { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable buttonTextColor __attribute__((deprecated("Use MDCSnackbarMessageView's buttonTitleColorForState: instead.")));
		[NullAllowed]
		[Export ("buttonTextColor", ArgumentSemantic.Strong)]
		UIColor ButtonTextColor { get; set; }

		// @property (assign, nonatomic) NSTimeInterval duration;
		[Export ("duration")]
		double Duration { get; set; }

		// @property (copy, nonatomic) MDCSnackbarMessageCompletionHandler _Nullable completionHandler;
		[NullAllowed]
		[Export ("completionHandler", ArgumentSemantic.Copy)]
		SnackbarMessageCompletionHandler CompletionHandler { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable category;
		[NullAllowed]
		[Export ("category")]
		string Category { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable accessibilityLabel;
		[NullAllowed]
		[Export ("accessibilityLabel")]
		string AccessibilityLabel { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable accessibilityHint;
		[NullAllowed, Export ("accessibilityHint")]
		string AccessibilityHint { get; set; }

		// @property (readonly, nonatomic) NSString * _Nullable voiceNotificationText;
		[NullAllowed]
		[Export ("voiceNotificationText")]
		string VoiceNotificationText { get; }
	}

	// @interface MDCSnackbarMessageAction : NSObject <UIAccessibilityIdentification, NSCopying>
	[BaseType (typeof (NSObject), Name = "MDCSnackbarMessageAction")]
	interface SnackbarMessageAction : IUIAccessibilityIdentification, INSCopying {
		// @property (copy, nonatomic) NSString * title;
		[NullAllowed]
		[Export ("title")]
		string Title { get; set; }

		// @property (copy, nonatomic) MDCSnackbarMessageActionHandler handler;
		[NullAllowed]
		[Export ("handler", ArgumentSemantic.Copy)]
		SnackbarMessageActionHandler Handler { get; set; }
	}

	// @interface MDCSnackbarMessageView : UIView
	[BaseType (typeof (UIView), Name = "MDCSnackbarMessageView")]
	interface SnackbarMessageView {
		// @property (nonatomic, strong) UIColor * _Nullable snackbarMessageViewBackgroundColor __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("snackbarMessageViewBackgroundColor", ArgumentSemantic.Strong)]
		UIColor SnackbarMessageViewBackgroundColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable snackbarMessageViewShadowColor __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("snackbarMessageViewShadowColor", ArgumentSemantic.Strong)]
		UIColor SnackbarMessageViewShadowColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable messageTextColor __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("messageTextColor", ArgumentSemantic.Strong)]
		UIColor MessageTextColor { get; set; }

		// @property (nonatomic, strong) UIFont * _Nullable messageFont __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("messageFont", ArgumentSemantic.Strong)]
		UIFont MessageFont { get; set; }

		// @property (nonatomic, strong) UIFont * _Nullable buttonFont __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("buttonFont", ArgumentSemantic.Strong)]
		UIFont ButtonFont { get; set; }

		// @property (nonatomic, strong) NSMutableArray<MDCButton *> * _Nullable actionButtons;
		[NullAllowed]
		[Export ("actionButtons", ArgumentSemantic.Strong)]
		NSMutableArray<Button> ActionButtons { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable accessibilityLabel;
		[NullAllowed, Export ("accessibilityLabel")]
		string AccessibilityLabel { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable accessibilityHint;
		[NullAllowed, Export ("accessibilityHint")]
		string AccessibilityHint { get; set; }

		// -(UIColor * _Nullable)buttonTitleColorForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[return: NullAllowed]
		[Export ("buttonTitleColorForState:")]
		UIColor GetButtonTitleColor (UIControlState state);

		// -(void)setButtonTitleColor:(UIColor * _Nullable)titleColor forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
		[Export ("setButtonTitleColor:forState:")]
		void SetButtonTitleColor ([NullAllowed] UIColor titleColor, UIControlState state);

		// @property (readwrite, nonatomic, setter = mdc_setAdjustsFontForContentSizeCategory:) BOOL mdc_adjustsFontForContentSizeCategory __attribute__((annotate("ui_appearance_selector")));
		[Export ("mdc_adjustsFontForContentSizeCategory")]
		bool MdcAdjustsFontForContentSizeCategory { get; [Bind ("mdc_setAdjustsFontForContentSizeCategory:")] set; }
	}

	// @interface MDCSnackbarTypographyThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCSnackbarTypographyThemer")]
	interface SnackbarTypographyThemer {
		// +(void)applyTypographyScheme:(id<MDCTypographyScheming> _Nonnull)typographyScheme;
		[Static]
		[Export ("applyTypographyScheme:")]
		void ApplyTypographyScheme (ITypographyScheming typographyScheme);
	}

	// @interface MDCTabBar : UIView <UIBarPositioning>
	[BaseType (typeof (UIView),
		   Name = "MDCTabBar",
		   Delegates = new [] { "Delegate" },
		   Events = new [] { typeof (TabBarDelegate) })]
	interface TabBar : IUIBarPositioning {
		// +(CGFloat)defaultHeightForBarPosition:(UIBarPosition)position itemAppearance:(MDCTabBarItemAppearance)appearance;
		[Static]
		[Export ("defaultHeightForBarPosition:itemAppearance:")]
		nfloat GetDefaultHeight (UIBarPosition position, TabBarItemAppearance appearance);

		// +(CGFloat)defaultHeightForItemAppearance:(MDCTabBarItemAppearance)appearance;
		[Static]
		[Export ("defaultHeightForItemAppearance:")]
		nfloat GetDefaultHeight (TabBarItemAppearance appearance);

		// @property (copy, nonatomic) NSArray<UITabBarItem *> * _Nonnull items;
		[Export ("items", ArgumentSemantic.Copy)]
		UITabBarItem [] Items { get; set; }

		// @property (nonatomic, strong) UITabBarItem * _Nullable selectedItem;
		[NullAllowed]
		[Export ("selectedItem", ArgumentSemantic.Strong)]
		UITabBarItem SelectedItem { get; set; }

		// @property (nonatomic, weak) id<MDCTabBarDelegate> _Nullable delegate __attribute__((iboutlet));
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		ITabBarDelegate Delegate { get; set; }

		// @property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
		[New]
		[Export ("tintColor", ArgumentSemantic.Strong)]
		UIColor TintColor { get; set; }

		// @property (nonatomic) UIColor * _Nullable selectedItemTintColor __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("selectedItemTintColor", ArgumentSemantic.Assign)]
		UIColor SelectedItemTintColor { get; set; }

		// @property (nonatomic) UIColor * _Nonnull unselectedItemTintColor __attribute__((annotate("ui_appearance_selector")));
		[Export ("unselectedItemTintColor", ArgumentSemantic.Assign)]
		UIColor UnselectedItemTintColor { get; set; }

		// @property (nonatomic) UIColor * _Nonnull inkColor __attribute__((annotate("ui_appearance_selector")));
		[Export ("inkColor", ArgumentSemantic.Assign)]
		UIColor InkColor { get; set; }

		// @property (nonatomic) UIColor * _Nonnull bottomDividerColor;
		[Export ("bottomDividerColor", ArgumentSemantic.Assign)]
		UIColor BottomDividerColor { get; set; }

		// @property (nonatomic, strong) UIFont * _Nonnull selectedItemTitleFont __attribute__((annotate("ui_appearance_selector")));
		[Export ("selectedItemTitleFont", ArgumentSemantic.Strong)]
		UIFont SelectedItemTitleFont { get; set; }

		// @property (nonatomic, strong) UIFont * _Nonnull unselectedItemTitleFont __attribute__((annotate("ui_appearance_selector")));
		[Export ("unselectedItemTitleFont", ArgumentSemantic.Strong)]
		UIFont UnselectedItemTitleFont { get; set; }

		// @property (nonatomic) UIColor * _Nullable barTintColor __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("barTintColor", ArgumentSemantic.Assign)]
		UIColor BarTintColor { get; set; }

		// @property (nonatomic) MDCTabBarAlignment alignment;
		[Export ("alignment", ArgumentSemantic.Assign)]
		TabBarAlignment Alignment { get; set; }

		// @property (nonatomic) MDCTabBarItemAppearance itemAppearance;
		[Export ("itemAppearance", ArgumentSemantic.Assign)]
		TabBarItemAppearance ItemAppearance { get; set; }

		// @property (nonatomic) BOOL displaysUppercaseTitles;
		[Obsolete ("This property will be deprecated in a future release. Use TitleTextTransform property instead.")]
		[Export ("displaysUppercaseTitles")]
		bool DisplaysUppercaseTitles { get; set; }

		// @property (nonatomic) MDCTabBarTextTransform titleTextTransform __attribute__((annotate("ui_appearance_selector")));
		[Export ("titleTextTransform", ArgumentSemantic.Assign)]
		TabBarTextTransform TitleTextTransform { get; set; }

		// @property (nonatomic) id<MDCTabBarIndicatorTemplate> _Null_unspecified selectionIndicatorTemplate __attribute__((annotate("ui_appearance_selector")));
		[Export ("selectionIndicatorTemplate", ArgumentSemantic.Assign)]
		TabBarIndicatorTemplate SelectionIndicatorTemplate { get; set; }

		// -(void)setSelectedItem:(UITabBarItem * _Nullable)selectedItem animated:(BOOL)animated;
		[Export ("setSelectedItem:animated:")]
		void SetSelectedItem ([NullAllowed] UITabBarItem selectedItem, bool animated);

		// -(void)setAlignment:(MDCTabBarAlignment)alignment animated:(BOOL)animated;
		[Export ("setAlignment:animated:")]
		void SetAlignment (TabBarAlignment alignment, bool animated);

		// -(void)setTitleColor:(UIColor * _Nullable)color forState:(MDCTabBarItemState)state;
		[Export ("setTitleColor:forState:")]
		void SetTitleColor ([NullAllowed] UIColor color, TabBarItemState state);

		// -(UIColor * _Nullable)titleColorForState:(MDCTabBarItemState)state;
		[return: NullAllowed]
		[Export ("titleColorForState:")]
		UIColor GetTitleColor (TabBarItemState state);

		// -(void)setImageTintColor:(UIColor * _Nullable)color forState:(MDCTabBarItemState)state;
		[Export ("setImageTintColor:forState:")]
		void SetImageTintColor ([NullAllowed] UIColor color, TabBarItemState state);

		// -(UIColor * _Nullable)imageTintColorForState:(MDCTabBarItemState)state;
		[return: NullAllowed]
		[Export ("imageTintColorForState:")]
		UIColor GetImageTintColor (TabBarItemState state);

		//
		// From MDCAccessibility (MDCTabBar) Category
		//

		// -(id _Nullable)accessibilityElementForItem:(UITabBarItem * _Nonnull)item;
		[return: NullAllowed]
		[Export ("accessibilityElementForItem:")]
		NSObject GetAccessibilityElement (UITabBarItem item);
	}

	interface ITabBarDelegate { }

	// @protocol MDCTabBarDelegate <UIBarPositioningDelegate>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "MDCTabBarDelegate")]
	interface TabBarDelegate : IUIBarPositioningDelegate {
		// @optional -(BOOL)tabBar:(MDCTabBar * _Nonnull)tabBar shouldSelectItem:(UITabBarItem * _Nonnull)item;
		[DefaultValue (true)]
		[DelegateName ("TabBarShouldSelectItem")]
		[Export ("tabBar:shouldSelectItem:")]
		bool ShouldSelectItem (TabBar tabBar, UITabBarItem item);

		// @optional -(void)tabBar:(MDCTabBar * _Nonnull)tabBar willSelectItem:(UITabBarItem * _Nonnull)item;
		[Obsolete ("Will be deprecated. Use ShouldSelectItem method instead.")]
		[EventArgs ("TabBarWillSelectItem")]
		[Export ("tabBar:willSelectItem:")]
		void WillSelectItem (TabBar tabBar, UITabBarItem item);

		// @optional -(void)tabBar:(MDCTabBar * _Nonnull)tabBar didSelectItem:(UITabBarItem * _Nonnull)item;
		[EventArgs ("TabBarItemSelected")]
		[EventName ("ItemSelected")]
		[Export ("tabBar:didSelectItem:")]
		void DidSelectItem (TabBar tabBar, UITabBarItem item);
	}

	// @interface MDCTabBarColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCTabBarColorThemer")]
	interface TabBarColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toTabs:(MDCTabBar * _Nonnull)tabBar;
		[Static]
		[Export ("applySemanticColorScheme:toTabs:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, TabBar tabBar);

		// +(void)applySurfaceVariantWithColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toTabs:(MDCTabBar * _Nonnull)tabBar;
		[Static]
		[Export ("applySurfaceVariantWithColorScheme:toTabs:")]
		void ApplySurfaceVariant (IColorScheming colorScheme, TabBar tabBar);

		// +(void)applyColorScheme:(NSObject<MDCColorScheme> *)colorScheme toTabBar:(MDCTabBar *)tabBar;
		[Obsolete ("This method will soon be deprecated. Consider using ApplySemanticColorScheme method instead.")]
		[Static]
		[Export ("applyColorScheme:toTabBar:")]
		void ApplyColorScheme (IColorScheme colorScheme, TabBar tabBar);
	}

	// @interface MDCTabBarFontThemer : NSObject
	[Obsolete ("This class will soon be deprecated. Please consider using TabBarTypographyThemer class instead.")]
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCTabBarFontThemer")]
	interface TabBarFontThemer {
		// +(void)applyFontScheme:(id<MDCFontScheme> _Nonnull)fontScheme toTabBar:(MDCTabBar * _Nonnull)tabBar;
		[Static]
		[Export ("applyFontScheme:toTabBar:")]
		void ApplyFontScheme (IFontScheme fontScheme, TabBar tabBar);
	}

	// @interface MDCTabBarIndicatorAttributes : NSObject <NSCopying>
	[BaseType (typeof (NSObject), Name = "MDCTabBarIndicatorAttributes")]
	interface TabBarIndicatorAttributes : INSCopying {
		// @property (nonatomic) UIBezierPath * _Nullable path;
		[NullAllowed]
		[Export ("path", ArgumentSemantic.Assign)]
		UIBezierPath Path { get; set; }
	}

	interface ITabBarIndicatorContext { }

	// @protocol MDCTabBarIndicatorContext <NSObject>
	[Protocol (Name = "MDCTabBarIndicatorContext")]
	interface TabBarIndicatorContext {
		// @required @property (readonly, nonatomic) UITabBarItem * _Nonnull item;
		[Abstract]
		[Export ("item")]
		UITabBarItem Item { get; }

		// @required @property (readonly, nonatomic) CGRect bounds;
		[Abstract]
		[Export ("bounds")]
		CGRect Bounds { get; }

		// @required @property (readonly, nonatomic) CGRect contentFrame;
		[Abstract]
		[Export ("contentFrame")]
		CGRect ContentFrame { get; }
	}

	interface ITabBarIndicatorTemplate { }

	// @protocol MDCTabBarIndicatorTemplate <NSObject>
	[Protocol (Name = "MDCTabBarIndicatorTemplate")]
	[BaseType (typeof (NSObject))]
	interface TabBarIndicatorTemplate {
		// @required -(MDCTabBarIndicatorAttributes * _Nonnull)indicatorAttributesForContext:(id<MDCTabBarIndicatorContext> _Nonnull)context;
		[Abstract]
		[Export ("indicatorAttributesForContext:")]
		TabBarIndicatorAttributes IndicatorAttributesForContext (ITabBarIndicatorContext context);
	}

	// @interface MDCTabBarTypographyThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCTabBarTypographyThemer")]
	interface TabBarTypographyThemer {
		// +(void)applyTypographyScheme:(id<MDCTypographyScheming> _Nonnull)typographyScheme toTabBar:(MDCTabBar * _Nonnull)tabBar;
		[Static]
		[Export ("applyTypographyScheme:toTabBar:")]
		void ApplyTypographyScheme (ITypographyScheming typographyScheme, TabBar tabBar);
	}

	// @interface MDCTabBarUnderlineIndicatorTemplate : NSObject <MDCTabBarIndicatorTemplate>
	[BaseType (typeof (NSObject), Name = "MDCTabBarUnderlineIndicatorTemplate")]
	interface TabBarUnderlineIndicatorTemplate : TabBarIndicatorTemplate { }

	// @interface MDCTabBarViewController : UIViewController <MDCTabBarDelegate, UIBarPositioningDelegate>
	[BaseType (typeof (UIViewController),
		   Name = "MDCTabBarViewController",
		   Delegates = new [] { "Delegate" },
		   Events = new [] { typeof (TabBarControllerDelegate) })]
	interface TabBarViewController : TabBarDelegate, IUIBarPositioningDelegate {
		// extern const CGFloat MDCTabBarViewControllerAnimationDuration;
		[Field ("MDCTabBarViewControllerAnimationDuration", "__Internal")]
		nfloat AnimationDuration { get; }

		// @property (nonatomic, weak) id<MDCTabBarControllerDelegate> _Nullable delegate;
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		ITabBarControllerDelegate Delegate { get; set; }

		// @property (copy, nonatomic) NSArray<UIViewController *> * _Nonnull viewControllers;
		[Export ("viewControllers", ArgumentSemantic.Copy)]
		UIViewController [] ViewControllers { get; set; }

		// @property (nonatomic, weak) UIViewController * _Nullable selectedViewController;
		[NullAllowed]
		[Export ("selectedViewController", ArgumentSemantic.Weak)]
		UIViewController SelectedViewController { get; set; }

		// @property (readonly, nonatomic) MDCTabBar * _Nullable tabBar;
		[NullAllowed]
		[Export ("tabBar")]
		TabBar TabBar { get; }

		// @property (nonatomic) BOOL tabBarHidden;
		[Export ("tabBarHidden")]
		bool TabBarHidden { get; set; }

		// -(void)setTabBarHidden:(BOOL)hidden animated:(BOOL)animated;
		[Export ("setTabBarHidden:animated:")]
		void SetTabBarHidden (bool hidden, bool animated);
	}

	interface ITabBarControllerDelegate { }

	// @protocol MDCTabBarControllerDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "MDCTabBarControllerDelegate")]
	interface TabBarControllerDelegate {
		// @optional -(BOOL)tabBarController:(MDCTabBarViewController * _Nonnull)tabBarController shouldSelectViewController:(UIViewController * _Nonnull)viewController;
		[DefaultValue (true)]
		[DelegateName ("TabBarControllerShouldSelectViewController")]
		[Export ("tabBarController:shouldSelectViewController:")]
		bool ShouldSelectViewController (TabBarViewController tabBarController, UIViewController viewController);

		// @optional -(void)tabBarController:(MDCTabBarViewController * _Nonnull)tabBarController didSelectViewController:(UIViewController * _Nonnull)viewController;
		[EventArgs ("TabBarControllerViewControllerSelected")]
		[EventName ("ViewControllerSelected")]
		[Export ("tabBarController:didSelectViewController:")]
		void DidSelectViewController (TabBarViewController tabBarController, UIViewController viewController);
	}

	// @interface MDCTextButtonColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCTextButtonColorThemer")]
	interface TextButtonColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toButton:(MDCButton * _Nonnull)button;
		[Static]
		[Export ("applySemanticColorScheme:toButton:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, Button button);
	}

	// @interface MDCTextButtonThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCTextButtonThemer")]
	interface TextButtonThemer {
		// +(void)applyScheme:(id<MDCButtonScheming> _Nonnull)scheme toButton:(MDCButton * _Nonnull)button;
		[Static]
		[Export ("applyScheme:toButton:")]
		void ApplyScheme (IButtonScheming scheme, Button button);
	}

	[Static]
	//[Verify (ConstantsInterfaceAssociation)]
	partial interface Constants11 {

	}

	// @interface MDCTextField : UITextField <MDCTextInput>
	[BaseType (typeof (UITextField), Name = "MDCTextField")]
	interface TextField : TextInput, LeadingViewTextInput {
		// extern NSString *const _Nonnull MDCTextFieldTextDidSetTextNotification;
		[Notification]
		[Field ("MDCTextFieldTextDidSetTextNotification", "__Internal")]
		NSString TextDidSetTextNotification { get; }

		// extern NSString *const _Nonnull MDCTextInputDidToggleEnabledNotification;
		[Notification]
		[Field ("MDCTextInputDidToggleEnabledNotification", "__Internal")]
		NSString TextInputDidToggleEnabledNotification { get; }

		// @property (readonly, nonatomic, strong) UILabel * _Nonnull inputLayoutStrut;
		[Export ("inputLayoutStrut", ArgumentSemantic.Strong)]
		UILabel InputLayoutStrut { get; }

		// @property (nonatomic, strong) UIView * _Nullable leadingView;
		[NullAllowed]
		[Export ("leadingView", ArgumentSemantic.Strong)]
		new UIView LeadingView { get; set; }

		// @property (assign, nonatomic) UITextFieldViewMode leadingViewMode;
		[Export ("leadingViewMode", ArgumentSemantic.Assign)]
		new UITextFieldViewMode LeadingViewMode { get; set; }
	}

	// @interface MDCTextFieldColorThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCTextFieldColorThemer")]
	interface TextFieldColorThemer {
		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toTextInputController:(id<MDCTextInputController> _Nonnull)textInputController;
		[Static]
		[Export ("applySemanticColorScheme:toTextInputController:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, ITextInputController textInputController);

		[Static]
		[Wrap ("ApplySemanticColorScheme (colorScheme, textInputController)")]
		[Obsolete ("Use ApplySemanticColorScheme instead.")]
		void ApplySemanticColorSchemeToTextInputController (IColorScheming colorScheme, ITextInputController textInputController);

		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toAllTextInputControllersOfClass:(Class<MDCTextInputController> _Nonnull)textInputControllerClass;
		[Static]
		[Export ("applySemanticColorScheme:toAllTextInputControllersOfClass:")]
		void ApplySemanticColorSchemeToAll (IColorScheming colorScheme, Class textInputControllerClass);

		[Static]
		[Wrap ("ApplySemanticColorSchemeToAll (colorScheme, new Class (textInputControllerType))")]
		void ApplySemanticColorSchemeToAll (IColorScheming colorScheme, Type textInputControllerType);

		// +(void)applySemanticColorScheme:(id<MDCColorScheming> _Nonnull)colorScheme toTextInput:(id<MDCTextInput> _Nonnull)textInput;
		[Static]
		[Export ("applySemanticColorScheme:toTextInput:")]
		void ApplySemanticColorScheme (IColorScheming colorScheme, ITextInput textInput);

		[Static]
		[Wrap ("ApplySemanticColorScheme (colorScheme, textInput)")]
		[Obsolete ("Use ApplySemanticColorScheme instead.")]
		void ApplySemanticColorSchemeToTextInput (IColorScheming colorScheme, ITextInput textInput);

		// +(void)applyColorScheme:(id<MDCColorScheme> _Nonnull)colorScheme toTextInputController:(id<MDCTextInputController> _Nonnull)textInputController;
		[Obsolete ("This method will soon be deprecated. Consider using ApplySemanticColorScheme method instead.")]
		[Static]
		[Export ("applyColorScheme:toTextInputController:")]
		void ApplyColorSchemeToTextInputController (IColorScheme colorScheme, ITextInputController textInputController);

		// +(void)applyColorScheme:(id<MDCColorScheme> _Nonnull)colorScheme toAllTextInputControllersOfClass:(Class<MDCTextInputController> _Nonnull)textInputControllerClass;
		[Obsolete ("This method will soon be deprecated. Consider using ApplySemanticColorSchemeToAll method instead.")]
		[Static]
		[Export ("applyColorScheme:toAllTextInputControllersOfClass:")]
		void ApplyColorSchemeoAllTextInputControllersOfClass (IColorScheme colorScheme, Class textInputControllerClass);
	}

	// @interface MDCTextFieldFontThemer : NSObject
	[Obsolete (" This class will soon be deprecated. Please consider using TextFieldTypographyThemer class instead.")]
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCTextFieldFontThemer")]
	interface TextFieldFontThemer {
		// +(void)applyFontScheme:(id<MDCFontScheme> _Nonnull)fontScheme toTextInputController:(id<MDCTextInputController> _Nonnull)textInputController;
		[Static]
		[Export ("applyFontScheme:toTextInputController:")]
		void ApplyFontScheme (IFontScheme fontScheme, ITextInputController textInputController);
		
		[Static]
		[Wrap ("ApplyFontScheme (fontScheme, textInputController)")]
		[Obsolete ("Use ApplyFontScheme instead.")]
		void ApplyFontSchemeToTextInputController (IFontScheme fontScheme, ITextInputController textInputController);

		// +(void)applyFontScheme:(id<MDCFontScheme> _Nonnull)fontScheme toAllTextInputControllersOfClass:(Class<MDCTextInputController> _Nonnull)textInputControllerClass;
		[Static]
		[Export ("applyFontScheme:toAllTextInputControllersOfClass:")]
		void ApplyFontSchemeToAll (IFontScheme fontScheme, Class textInputControllerClass);
		
		[Static]
		[Wrap ("ApplyFontSchemeToAll (fontScheme, new Class (textInputControllerType))")]
		void ApplyFontSchemeToAll (IFontScheme fontScheme, Type textInputControllerType);

		// +(void)applyFontScheme:(id<MDCFontScheme> _Nonnull)fontScheme toTextField:(MDCTextField * _Nullable)textField;
		[Static]
		[Export ("applyFontScheme:toTextField:")]
		void ApplyFontScheme (IFontScheme fontScheme, [NullAllowed] TextField textField);

		[Static]
		[Wrap ("ApplyFontScheme (fontScheme, textField)")]
		[Obsolete ("Use ApplyFontScheme instead.")]
		void ApplyFontSchemeToTextField (IFontScheme fontScheme, TextField textField);
	}

	interface ITextInputPositioningDelegate { }

	// @protocol MDCTextInputPositioningDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "MDCTextInputPositioningDelegate")]
	interface TextInputPositioningDelegate {
		// @optional -(UIEdgeInsets)textInsets:(UIEdgeInsets)defaultInsets;
		[Export ("textInsets:")]
		UIEdgeInsets TextInsets (UIEdgeInsets defaultInsets);

		// @optional -(CGRect)editingRectForBounds:(CGRect)bounds defaultRect:(CGRect)defaultRect;
		[Export ("editingRectForBounds:defaultRect:")]
		CGRect GetEditingRect (CGRect bounds, CGRect defaultRect);

		// @optional -(CGRect)leadingViewRectForBounds:(CGRect)bounds defaultRect:(CGRect)defaultRect;
		[Export ("leadingViewRectForBounds:defaultRect:")]
		CGRect GetLeadingViewRect (CGRect bounds, CGRect defaultRect);

		// @optional -(CGFloat)leadingViewTrailingPaddingConstant;
		[Export ("leadingViewTrailingPaddingConstant")]
		nfloat GetLeadingViewTrailingPaddingConstant ();

		// @optional -(void)textInputDidLayoutSubviews;
		[Export ("textInputDidLayoutSubviews")]
		void DidLayoutSubviews ();

		// @optional -(void)textInputDidUpdateConstraints;
		[Export ("textInputDidUpdateConstraints")]
		void DidUpdateConstraints ();

		// @optional -(CGRect)trailingViewRectForBounds:(CGRect)bounds defaultRect:(CGRect)defaultRect;
		[Export ("trailingViewRectForBounds:defaultRect:")]
		CGRect GetTrailingViewRect (CGRect bounds, CGRect defaultRect);

		// @optional -(CGFloat)trailingViewTrailingPaddingConstant;
		[Export ("trailingViewTrailingPaddingConstant")]
		nfloat GetTrailingViewTrailingPaddingConstant ();
	}

	// @interface MDCTextFieldTypographyThemer : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCTextFieldTypographyThemer")]
	interface TextFieldTypographyThemer {
		// +(void)applyTypographyScheme:(id<MDCTypographyScheming> _Nonnull)typographyScheme toTextInputController:(id<MDCTextInputController> _Nonnull)textInputController;
		[Static]
		[Export ("applyTypographyScheme:toTextInputController:")]
		void ApplyTypographyScheme (ITypographyScheming typographyScheme, ITextInputController textInputController);

		// +(void)applyTypographyScheme:(id<MDCTypographyScheming> _Nonnull)typographyScheme toAllTextInputControllersOfClass:(Class<MDCTextInputController> _Nonnull)textInputControllerClass;
		[Static]
		[Export ("applyTypographyScheme:toAllTextInputControllersOfClass:")]
		void ApplyTypographySchemeToAll (ITypographyScheming typographyScheme, Class textInputControllerClass);
		
		[Static]
		[Wrap ("ApplyTypographySchemeToAll (typographyScheme, new Class (textInputControllerType))")]
		void ApplyTypographySchemeToAll (ITypographyScheming typographyScheme, Type textInputControllerType);

		// +(void)applyTypographyScheme:(id<MDCTypographyScheming> _Nonnull)typographyScheme toTextInput:(id<MDCTextInput> _Nonnull)textInput;
		[Static]
		[Export ("applyTypographyScheme:toTextInput:")]
		void ApplyTypographyScheme (ITypographyScheming typographyScheme, ITextInput textInput);

		[Static]
		[Wrap ("ApplyTypographyScheme (typographyScheme, textInputController)")]
		[Obsolete ("Use ApplyTypographyScheme instead.")]
		void ApplyTypographySchemeToTextInputController (ITypographyScheming typographyScheme, ITextInputController textInputController);

		[Static]
		[Wrap ("ApplyTypographyScheme (typographyScheme, textInput)")]
		[Obsolete ("Use ApplyTypographyScheme instead.")]
		void ApplyTypographySchemeToTextInput (ITypographyScheming typographyScheme, ITextInput textInput);
	}

	interface ITextInput { }

	// @protocol MDCTextInput <NSObject>
	[Protocol (Name = "MDCTextInput")]
	interface TextInput {
		// @required @property (copy, nonatomic) NSAttributedString * _Nullable attributedPlaceholder;
		[Abstract]
		[NullAllowed]
		[Export ("attributedPlaceholder", ArgumentSemantic.Copy)]
		NSAttributedString AttributedPlaceholder { get; set; }

		// @required @property (copy, nonatomic) NSAttributedString * _Nullable attributedText;
		[Abstract]
		[NullAllowed]
		[Export ("attributedText", ArgumentSemantic.Copy)]
		NSAttributedString AttributedText { get; set; }

		// @required @property (copy, nonatomic) UIBezierPath * _Nullable borderPath __attribute__((annotate("ui_appearance_selector")));
		[Abstract]
		[NullAllowed]
		[Export ("borderPath", ArgumentSemantic.Copy)]
		UIBezierPath BorderPath { get; set; }

		// @required @property (nonatomic, strong) MDCTextInputBorderView * _Nullable borderView;
		[Abstract]
		[NullAllowed]
		[Export ("borderView", ArgumentSemantic.Strong)]
		TextInputBorderView BorderView { get; set; }

		// @required @property (readonly, nonatomic, strong) UIButton * _Nonnull clearButton;
		[Abstract]
		[Export ("clearButton", ArgumentSemantic.Strong)]
		UIButton ClearButton { get; }

		// @required @property (assign, nonatomic) UITextFieldViewMode clearButtonMode __attribute__((annotate("ui_appearance_selector")));
		[Abstract]
		[Export ("clearButtonMode", ArgumentSemantic.Assign)]
		UITextFieldViewMode ClearButtonMode { get; set; }

		// @required @property (nonatomic, strong) UIColor * _Nullable cursorColor __attribute__((annotate("ui_appearance_selector")));
		[Abstract]
		[NullAllowed]
		[Export ("cursorColor", ArgumentSemantic.Strong)]
		UIColor CursorColor { get; set; }

		// @required @property (readonly, getter = isEditing, assign, nonatomic) BOOL editing;
		[Abstract]
		[Export ("editing")]
		bool Editing { [Bind ("isEditing")] get; }

		// @required @property (getter = isEnabled, assign, nonatomic) BOOL enabled;
		[Abstract]
		[Export ("enabled")]
		bool Enabled { [Bind ("isEnabled")] get; set; }

		// @required @property (nonatomic, strong) UIFont * _Nullable font;
		[Abstract]
		[NullAllowed]
		[Export ("font", ArgumentSemantic.Strong)]
		UIFont Font { get; set; }

		// @required @property (assign, nonatomic) BOOL hidesPlaceholderOnInput;
		[Abstract]
		[Export ("hidesPlaceholderOnInput")]
		bool HidesPlaceholderOnInput { get; set; }

		// @required @property (readonly, nonatomic, strong) UILabel * _Nonnull leadingUnderlineLabel;
		[Abstract]
		[Export ("leadingUnderlineLabel", ArgumentSemantic.Strong)]
		UILabel LeadingUnderlineLabel { get; }

		// @required @property (nonatomic, setter = mdc_setAdjustsFontForContentSizeCategory:) BOOL mdc_adjustsFontForContentSizeCategory __attribute__((annotate("ui_appearance_selector")));
		[Abstract]
		[Export ("mdc_adjustsFontForContentSizeCategory")]
		bool MdcAdjustsFontForContentSizeCategory { get; [Bind ("mdc_setAdjustsFontForContentSizeCategory:")] set; }

		// @required @property (copy, nonatomic) NSString * _Nullable placeholder;
		[Abstract]
		[NullAllowed]
		[Export ("placeholder")]
		string Placeholder { get; set; }

		// @required @property (readonly, nonatomic, strong) UILabel * _Nonnull placeholderLabel;
		[Abstract]
		[Export ("placeholderLabel", ArgumentSemantic.Strong)]
		UILabel PlaceholderLabel { get; }

		// @required @property (nonatomic, weak) id<MDCTextInputPositioningDelegate> _Nullable positioningDelegate;
		[Abstract]
		[NullAllowed]
		[Export ("positioningDelegate", ArgumentSemantic.Weak)]
		ITextInputPositioningDelegate PositioningDelegate { get; set; }

		// @required @property (copy, nonatomic) NSString * _Nullable text;
		[Abstract]
		[NullAllowed]
		[Export ("text")]
		string Text { get; set; }

		// @required @property (nonatomic, strong) UIColor * _Nullable textColor;
		[Abstract]
		[NullAllowed]
		[Export ("textColor", ArgumentSemantic.Strong)]
		UIColor TextColor { get; set; }

		// @required @property (readonly, assign, nonatomic) UIEdgeInsets textInsets;
		[Abstract]
		[Export ("textInsets", ArgumentSemantic.Assign)]
		UIEdgeInsets TextInsets { get; }

		// @required @property (assign, nonatomic) MDCTextInputTextInsetsMode textInsetsMode __attribute__((annotate("ui_appearance_selector")));
		[Abstract]
		[Export ("textInsetsMode", ArgumentSemantic.Assign)]
		TextInputTextInsetsMode TextInsetsMode { get; set; }

		// @required @property (readonly, nonatomic, strong) UILabel * _Nonnull trailingUnderlineLabel;
		[Abstract]
		[Export ("trailingUnderlineLabel", ArgumentSemantic.Strong)]
		UILabel TrailingUnderlineLabel { get; }

		// @required @property (nonatomic, strong) UIView * _Nullable trailingView;
		[Abstract]
		[NullAllowed]
		[Export ("trailingView", ArgumentSemantic.Strong)]
		UIView TrailingView { get; set; }

		// @required @property (assign, nonatomic) UITextFieldViewMode trailingViewMode;
		[Abstract]
		[Export ("trailingViewMode", ArgumentSemantic.Assign)]
		UITextFieldViewMode TrailingViewMode { get; set; }

		// @required @property (readonly, nonatomic, strong) MDCTextInputUnderlineView * _Nullable underline;
		[Abstract]
		[NullAllowed]
		[Export ("underline", ArgumentSemantic.Strong)]
		TextInputUnderlineView Underline { get; }
	}

	interface ILeadingViewTextInput { }

	// @protocol MDCLeadingViewTextInput <MDCTextInput>
	[Protocol (Name = "MDCLeadingViewTextInput")]
	interface LeadingViewTextInput : TextInput {
		// @required @property (nonatomic, strong) UIView * _Nullable leadingView;
		[Abstract]
		[NullAllowed]
		[Export ("leadingView", ArgumentSemantic.Strong)]
		UIView LeadingView { get; set; }

		// @required @property (assign, nonatomic) UITextFieldViewMode leadingViewMode;
		[Abstract]
		[Export ("leadingViewMode", ArgumentSemantic.Assign)]
		UITextFieldViewMode LeadingViewMode { get; set; }
	}

	interface IMultilineTextInput { }

	// @protocol MDCMultilineTextInput <MDCTextInput>
	[Protocol (Name = "MDCMultilineTextInput")]
	interface MultilineTextInput : TextInput {
		// @required @property (assign, nonatomic) BOOL expandsOnOverflow;
		[Abstract]
		[Export ("expandsOnOverflow")]
		bool ExpandsOnOverflow { get; set; }

		// @required @property (assign, nonatomic) NSUInteger minimumLines __attribute__((annotate("ui_appearance_selector")));
		[Abstract]
		[Export ("minimumLines")]
		nuint MinimumLines { get; set; }
	}

	// @interface MDCTextInputBorderView : UIView <NSCopying>
	[BaseType (typeof (UIView), Name = "MDCTextInputBorderView")]
	interface TextInputBorderView : INSCopying {
		// @property (nonatomic, strong) UIColor * _Nullable borderFillColor __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("borderFillColor", ArgumentSemantic.Strong)]
		UIColor BorderFillColor { get; set; }

		// @property (nonatomic, strong) UIBezierPath * _Nullable borderPath __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("borderPath", ArgumentSemantic.Strong)]
		UIBezierPath BorderPath { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable borderStrokeColor __attribute__((annotate("ui_appearance_selector")));
		[NullAllowed]
		[Export ("borderStrokeColor", ArgumentSemantic.Strong)]
		UIColor BorderStrokeColor { get; set; }
	}

	interface ITextInputCharacterCounter { }

	// @protocol MDCTextInputCharacterCounter <NSObject>
	[Protocol (Name = "MDCTextInputCharacterCounter")]
	interface TextInputCharacterCounter {
		// @required -(NSUInteger)characterCountForTextInput:(UIView<MDCTextInput> * _Nullable)textInput;
		[Abstract]
		[Export ("characterCountForTextInput:")]
		nuint CharacterCount ([NullAllowed] ITextInput textInput);
	}

	// @interface MDCTextInputAllCharactersCounter : NSObject <MDCTextInputCharacterCounter>
	[BaseType (typeof (NSObject), Name = "MDCTextInputAllCharactersCounter")]
	interface TextInputAllCharactersCounter : TextInputCharacterCounter { }

	interface ITextInputController { }

	// @protocol MDCTextInputController <NSObject, NSCoding, NSCopying, MDCTextInputPositioningDelegate>
	[Protocol (Name = "MDCTextInputController")]
	interface TextInputController : INSCopying, TextInputPositioningDelegate {
		// @required @property (nonatomic, strong) UIColor * _Null_unspecified activeColor;
		[Abstract]
		[Export ("activeColor", ArgumentSemantic.Strong)]
		UIColor ActiveColor { get; set; }

		// @required @property (nonatomic, strong, class) UIColor * _Null_unspecified activeColorDefault;
		[Static]
		[Abstract]
		[Export ("activeColorDefault", ArgumentSemantic.Strong)]
		UIColor ActiveColorDefault { get; set; }

		// @required @property (nonatomic, weak) id<MDCTextInputCharacterCounter> _Null_unspecified characterCounter;
		[Abstract]
		[Export ("characterCounter", ArgumentSemantic.Weak)]
		ITextInputCharacterCounter CharacterCounter { get; set; }

		// @required @property (assign, nonatomic) NSUInteger characterCountMax;
		[Abstract]
		[Export ("characterCountMax")]
		nuint CharacterCountMax { get; set; }

		// @required @property (assign, nonatomic) UITextFieldViewMode characterCountViewMode;
		[Abstract]
		[Export ("characterCountViewMode", ArgumentSemantic.Assign)]
		UITextFieldViewMode CharacterCountViewMode { get; set; }

		// @required @property (nonatomic, strong) UIColor * _Null_unspecified disabledColor;
		[Abstract]
		[Export ("disabledColor", ArgumentSemantic.Strong)]
		UIColor DisabledColor { get; set; }

		// @required @property (nonatomic, strong, class) UIColor * _Null_unspecified disabledColorDefault;
		[Static]
		[Abstract]
		[Export ("disabledColorDefault", ArgumentSemantic.Strong)]
		UIColor DisabledColorDefault { get; set; }

		// @required @property (nonatomic, strong) UIColor * _Null_unspecified errorColor;
		[Abstract]
		[Export ("errorColor", ArgumentSemantic.Strong)]
		UIColor ErrorColor { get; set; }

		// @required @property (nonatomic, strong, class) UIColor * _Null_unspecified errorColorDefault;
		[Static]
		[Abstract]
		[Export ("errorColorDefault", ArgumentSemantic.Strong)]
		UIColor ErrorColorDefault { get; set; }

		// @required @property (readonly, copy, nonatomic) NSString * _Nullable errorText;
		[Abstract]
		[NullAllowed]
		[Export ("errorText")]
		string ErrorText { get; }

		// @required @property (copy, nonatomic) NSString * _Nullable helperText;
		[Abstract]
		[NullAllowed]
		[Export ("helperText")]
		string HelperText { get; set; }

		// @required @property (nonatomic, strong) UIColor * _Null_unspecified inlinePlaceholderColor;
		[Abstract]
		[Export ("inlinePlaceholderColor", ArgumentSemantic.Strong)]
		UIColor InlinePlaceholderColor { get; set; }

		// @required @property (nonatomic, strong, class) UIColor * _Null_unspecified inlinePlaceholderColorDefault;
		[Static]
		[Abstract]
		[Export ("inlinePlaceholderColorDefault", ArgumentSemantic.Strong)]
		UIColor InlinePlaceholderColorDefault { get; set; }

		// @required @property (nonatomic, strong) UIFont * _Null_unspecified textInputFont;
		[Abstract]
		[Export ("textInputFont", ArgumentSemantic.Strong)]
		UIFont TextInputFont { get; set; }

		// @required @property (nonatomic, strong, class) UIFont * _Nullable textInputFontDefault;
		[Static]
		[Abstract]
		[NullAllowed]
		[Export ("textInputFontDefault", ArgumentSemantic.Strong)]
		UIFont TextInputFontDefault { get; set; }

		// @required @property (nonatomic, strong) UIFont * _Null_unspecified inlinePlaceholderFont;
		[Abstract]
		[Export ("inlinePlaceholderFont", ArgumentSemantic.Strong)]
		UIFont InlinePlaceholderFont { get; set; }

		// @required @property (nonatomic, strong, class) UIFont * _Null_unspecified inlinePlaceholderFontDefault;
		[Static]
		[Abstract]
		[Export ("inlinePlaceholderFontDefault", ArgumentSemantic.Strong)]
		UIFont InlinePlaceholderFontDefault { get; set; }

		// @required @property (nonatomic, strong) UIFont * _Null_unspecified leadingUnderlineLabelFont;
		[Abstract]
		[Export ("leadingUnderlineLabelFont", ArgumentSemantic.Strong)]
		UIFont LeadingUnderlineLabelFont { get; set; }

		// @required @property (nonatomic, strong, class) UIFont * _Null_unspecified leadingUnderlineLabelFontDefault;
		[Static]
		[Abstract]
		[Export ("leadingUnderlineLabelFontDefault", ArgumentSemantic.Strong)]
		UIFont LeadingUnderlineLabelFontDefault { get; set; }

		// @required @property (nonatomic, strong) UIColor * _Null_unspecified leadingUnderlineLabelTextColor;
		[Abstract]
		[Export ("leadingUnderlineLabelTextColor", ArgumentSemantic.Strong)]
		UIColor LeadingUnderlineLabelTextColor { get; set; }

		// @required @property (nonatomic, strong, class) UIColor * _Null_unspecified leadingUnderlineLabelTextColorDefault;
		[Static]
		[Abstract]
		[Export ("leadingUnderlineLabelTextColorDefault", ArgumentSemantic.Strong)]
		UIColor LeadingUnderlineLabelTextColorDefault { get; set; }

		// @required @property (assign, readwrite, nonatomic, setter = mdc_setAdjustsFontForContentSizeCategory:) BOOL mdc_adjustsFontForContentSizeCategory;
		[Abstract]
		[Export ("mdc_adjustsFontForContentSizeCategory")]
		bool MdcAdjustsFontForContentSizeCategory { get; [Bind ("mdc_setAdjustsFontForContentSizeCategory:")] set; }

		// @required @property (assign, nonatomic, class) BOOL mdc_adjustsFontForContentSizeCategoryDefault;
		[Static]
		[Abstract]
		[Export ("mdc_adjustsFontForContentSizeCategoryDefault")]
		bool MdcAdjustsFontForContentSizeCategoryDefault { get; set; }

		// @required @property (nonatomic, strong) UIColor * _Null_unspecified normalColor;
		[Abstract]
		[Export ("normalColor", ArgumentSemantic.Strong)]
		UIColor NormalColor { get; set; }

		// @required @property (nonatomic, strong, class) UIColor * _Null_unspecified normalColorDefault;
		[Static]
		[Abstract]
		[Export ("normalColorDefault", ArgumentSemantic.Strong)]
		UIColor NormalColorDefault { get; set; }

		// @required @property (copy, nonatomic) NSString * _Nullable placeholderText;
		[Abstract]
		[NullAllowed]
		[Export ("placeholderText")]
		string PlaceholderText { get; set; }

		// @required @property (assign, nonatomic) UIRectCorner roundedCorners;
		[Abstract]
		[Export ("roundedCorners", ArgumentSemantic.Assign)]
		UIRectCorner RoundedCorners { get; set; }

		// @required @property (assign, nonatomic, class) UIRectCorner roundedCornersDefault;
		[Static]
		[Abstract]
		[Export ("roundedCornersDefault", ArgumentSemantic.Assign)]
		UIRectCorner RoundedCornersDefault { get; set; }

		// @required @property (nonatomic, strong) UIView<MDCTextInput> * _Nullable textInput;
		[Abstract]
		[NullAllowed]
		[Export ("textInput", ArgumentSemantic.Strong)]
		ITextInput TextInput { get; set; }

		// @required @property (nonatomic, strong) UIColor * _Null_unspecified textInputClearButtonTintColor;
		[Abstract]
		[Export ("textInputClearButtonTintColor", ArgumentSemantic.Strong)]
		UIColor TextInputClearButtonTintColor { get; set; }

		// @required @property (nonatomic, strong, class) UIColor * _Nullable textInputClearButtonTintColorDefault;
		[Static]
		[Abstract]
		[NullAllowed]
		[Export ("textInputClearButtonTintColorDefault", ArgumentSemantic.Strong)]
		UIColor TextInputClearButtonTintColorDefault { get; set; }

		// @required @property (nonatomic, strong) UIFont * _Null_unspecified trailingUnderlineLabelFont;
		[Abstract]
		[Export ("trailingUnderlineLabelFont", ArgumentSemantic.Strong)]
		UIFont TrailingUnderlineLabelFont { get; set; }

		// @required @property (nonatomic, strong, class) UIFont * _Null_unspecified trailingUnderlineLabelFontDefault;
		[Static]
		[Abstract]
		[Export ("trailingUnderlineLabelFontDefault", ArgumentSemantic.Strong)]
		UIFont TrailingUnderlineLabelFontDefault { get; set; }

		// @required @property (nonatomic, strong) UIColor * _Nullable trailingUnderlineLabelTextColor;
		[Abstract]
		[NullAllowed]
		[Export ("trailingUnderlineLabelTextColor", ArgumentSemantic.Strong)]
		UIColor TrailingUnderlineLabelTextColor { get; set; }

		// @required @property (nonatomic, strong, class) UIColor * _Nullable trailingUnderlineLabelTextColorDefault;
		[Static]
		[Abstract]
		[NullAllowed]
		[Export ("trailingUnderlineLabelTextColorDefault", ArgumentSemantic.Strong)]
		UIColor TrailingUnderlineLabelTextColorDefault { get; set; }

		// @required @property (assign, nonatomic) CGFloat underlineHeightActive;
		[Abstract]
		[Export ("underlineHeightActive")]
		nfloat UnderlineHeightActive { get; set; }

		// @required @property (assign, nonatomic, class) CGFloat underlineHeightActiveDefault;
		[Static]
		[Abstract]
		[Export ("underlineHeightActiveDefault")]
		nfloat UnderlineHeightActiveDefault { get; set; }

		// @required @property (assign, nonatomic) CGFloat underlineHeightNormal;
		[Abstract]
		[Export ("underlineHeightNormal")]
		nfloat UnderlineHeightNormal { get; set; }

		// @required @property (assign, nonatomic, class) CGFloat underlineHeightNormalDefault;
		[Static]
		[Abstract]
		[Export ("underlineHeightNormalDefault")]
		nfloat UnderlineHeightNormalDefault { get; set; }

		// @required @property (assign, nonatomic) UITextFieldViewMode underlineViewMode;
		[Abstract]
		[Export ("underlineViewMode", ArgumentSemantic.Assign)]
		UITextFieldViewMode UnderlineViewMode { get; set; }

		// @required @property (assign, nonatomic, class) UITextFieldViewMode underlineViewModeDefault;
		[Static]
		[Abstract]
		[Export ("underlineViewModeDefault", ArgumentSemantic.Assign)]
		UITextFieldViewMode UnderlineViewModeDefault { get; set; }

		//// @required -(instancetype _Nonnull)initWithTextInput:(UIView<MDCTextInput> * _Nullable)input;
		//[Abstract]
		//[Export ("initWithTextInput:")]
		//IntPtr Constructor ([NullAllowed] ITextInput input); TODO: Not valid

		// @required -(void)setErrorText:(NSString * _Nullable)errorText errorAccessibilityValue:(NSString * _Nullable)errorAccessibilityValue;
		[Abstract]
		[Export ("setErrorText:errorAccessibilityValue:")]
		void SetErrorText ([NullAllowed] string errorText, [NullAllowed] string errorAccessibilityValue);

		// @required -(void)setHelperText:(NSString * _Nullable)helperText helperAccessibilityLabel:(NSString * _Nullable)helperAccessibilityLabel;
		[Abstract]
		[Export ("setHelperText:helperAccessibilityLabel:")]
		void SetHelperText ([NullAllowed] string helperText, [NullAllowed] string helperAccessibilityLabel);
	}

	// @interface MDCTextInputControllerBase : NSObject <MDCTextInputControllerFloatingPlaceholder>
	[BaseType (typeof (NSObject), Name = "MDCTextInputControllerBase")]
	interface TextInputControllerBase : TextInputControllerFloatingPlaceholder {
		// extern const CGFloat MDCTextInputControllerBaseDefaultBorderRadius;
		[Field ("MDCTextInputControllerBaseDefaultBorderRadius", "__Internal")]
		nfloat DefaultBorderRadius { get; }

		// @property (nonatomic, strong) UIColor * _Nullable borderFillColor;
		[NullAllowed]
		[Export ("borderFillColor", ArgumentSemantic.Strong)]
		UIColor BorderFillColor { get; set; }

		// @property (nonatomic, strong, class) UIColor * _Null_unspecified borderFillColorDefault;
		[Static]
		[Export ("borderFillColorDefault", ArgumentSemantic.Strong)]
		UIColor BorderFillColorDefault { get; set; }

		// @property (assign, nonatomic) BOOL expandsOnOverflow;
		[Export ("expandsOnOverflow")]
		bool ExpandsOnOverflow { get; set; }

		// @property (assign, nonatomic) NSUInteger minimumLines;
		[Export ("minimumLines")]
		nuint MinimumLines { get; set; }

		//
		// From TextInputController Protocol
		//

		// @required -(instancetype _Nonnull)initWithTextInput:(UIView<MDCTextInput> * _Nullable)input;
		[Export ("initWithTextInput:")]
		IntPtr Constructor ([NullAllowed] ITextInput input);
	}

	// @interface MDCTextInputControllerFilled : MDCTextInputControllerDefault
	[BaseType (typeof (TextInputControllerBase), Name = "MDCTextInputControllerFilled")]
	interface TextInputControllerFilled {
		//
		// From TextInputController Protocol
		//

		// @required -(instancetype _Nonnull)initWithTextInput:(UIView<MDCTextInput> * _Nullable)input;
		[Export ("initWithTextInput:")]
		IntPtr Constructor ([NullAllowed] ITextInput input);
	}

	interface ITextInputControllerFloatingPlaceholder { }

	// @protocol MDCTextInputControllerFloatingPlaceholder <MDCTextInputController>
	[Protocol (Name = "MDCTextInputControllerFloatingPlaceholder")]
	interface TextInputControllerFloatingPlaceholder : TextInputController {
		// @required @property (nonatomic, strong) UIColor * _Null_unspecified floatingPlaceholderActiveColor;
		[Abstract]
		[Export ("floatingPlaceholderActiveColor", ArgumentSemantic.Strong)]
		UIColor FloatingPlaceholderActiveColor { get; set; }

		// @required @property (nonatomic, strong, class) UIColor * _Null_unspecified floatingPlaceholderActiveColorDefault;
		[Static]
		[Abstract]
		[Export ("floatingPlaceholderActiveColorDefault", ArgumentSemantic.Strong)]
		UIColor FloatingPlaceholderActiveColorDefault { get; set; }

		// @required @property (nonatomic, strong) UIColor * _Null_unspecified floatingPlaceholderNormalColor;
		[Abstract]
		[Export ("floatingPlaceholderNormalColor", ArgumentSemantic.Strong)]
		UIColor FloatingPlaceholderNormalColor { get; set; }

		// @required @property (nonatomic, strong, class) UIColor * _Null_unspecified floatingPlaceholderNormalColorDefault;
		[Static]
		[Abstract]
		[Export ("floatingPlaceholderNormalColorDefault", ArgumentSemantic.Strong)]
		UIColor FloatingPlaceholderNormalColorDefault { get; set; }

		// @required @property (readonly, nonatomic) UIOffset floatingPlaceholderOffset;
		[Abstract]
		[Export ("floatingPlaceholderOffset")]
		UIOffset FloatingPlaceholderOffset { get; }

		// @required @property (nonatomic, strong) NSNumber * _Null_unspecified floatingPlaceholderScale;
		[Abstract]
		[Export ("floatingPlaceholderScale", ArgumentSemantic.Strong)]
		NSNumber FloatingPlaceholderScale { get; set; }

		// @required @property (assign, nonatomic, class) CGFloat floatingPlaceholderScaleDefault;
		[Static]
		[Abstract]
		[Export ("floatingPlaceholderScaleDefault")]
		nfloat FloatingPlaceholderScaleDefault { get; set; }

		// @required @property (getter = isFloatingEnabled, assign, nonatomic) BOOL floatingEnabled;
		[Abstract]
		[Export ("floatingEnabled")]
		bool FloatingEnabled { [Bind ("isFloatingEnabled")] get; set; }

		// @required @property (getter = isFloatingEnabledDefault, assign, nonatomic, class) BOOL floatingEnabledDefault;
		[Static]
		[Abstract]
		[Export ("floatingEnabledDefault")]
		bool FloatingEnabledDefault { [Bind ("isFloatingEnabledDefault")] get; set; }
	}

	// @interface MDCTextInputControllerFullWidth : NSObject <MDCTextInputController>
	[BaseType (typeof (NSObject), Name = "MDCTextInputControllerFullWidth")]
	interface TextInputControllerFullWidth : TextInputController {
		// @property (nonatomic, strong) UIColor * _Null_unspecified backgroundColor;
		[Export ("backgroundColor", ArgumentSemantic.Strong)]
		UIColor BackgroundColor { get; set; }

		// @property (nonatomic, strong, class) UIColor * _Null_unspecified backgroundColorDefault;
		[Static]
		[Export ("backgroundColorDefault", ArgumentSemantic.Strong)]
		UIColor BackgroundColorDefault { get; set; }

		//
		// From TextInputController Protocol
		//

		// @required -(instancetype _Nonnull)initWithTextInput:(UIView<MDCTextInput> * _Nullable)input;
		[Export ("initWithTextInput:")]
		IntPtr Constructor ([NullAllowed] ITextInput input);
	}

	// @interface MDCTextInputControllerLegacyDefault : NSObject <MDCTextInputController>
	[BaseType (typeof (TextInputControllerBase), Name = "MDCTextInputControllerLegacyDefault")]
	interface TextInputControllerLegacyDefault : TextInputController {
		//
		// From TextInputController Protocol
		//

		// @required -(instancetype _Nonnull)initWithTextInput:(UIView<MDCTextInput> * _Nullable)input;
		[Export ("initWithTextInput:")]
		IntPtr Constructor ([NullAllowed] ITextInput input);
	}

	// @interface MDCTextInputControllerLegacyFullWidth : NSObject <MDCTextInputController>
	[BaseType (typeof (TextInputControllerFullWidth), Name = "MDCTextInputControllerLegacyFullWidth")]
	interface TextInputControllerLegacyFullWidth : TextInputController {
		//
		// From TextInputController Protocol
		//

		// @required -(instancetype _Nonnull)initWithTextInput:(UIView<MDCTextInput> * _Nullable)input;
		[Export ("initWithTextInput:")]
		IntPtr Constructor ([NullAllowed] ITextInput input);
	}

	// @interface MDCTextInputControllerOutlined : MDCTextInputControllerBase
	[BaseType (typeof (TextInputControllerBase), Name = "MDCTextInputControllerOutlined")]
	interface TextInputControllerOutlined {
		//
		// From TextInputController Protocol
		//

		// @required -(instancetype _Nonnull)initWithTextInput:(UIView<MDCTextInput> * _Nullable)input;
		[Export ("initWithTextInput:")]
		IntPtr Constructor ([NullAllowed] ITextInput input);
	}

	// @interface MDCTextInputControllerOutlinedTextArea : MDCTextInputControllerBase
	[BaseType (typeof (TextInputControllerBase), Name = "MDCTextInputControllerOutlinedTextArea")]
	interface TextInputControllerOutlinedTextArea {
		//
		// From TextInputController Protocol
		//

		// @required -(instancetype _Nonnull)initWithTextInput:(UIView<MDCTextInput> * _Nullable)input;
		[Export ("initWithTextInput:")]
		IntPtr Constructor ([NullAllowed] ITextInput input);
	}

	// @interface MDCTextInputControllerUnderline : MDCTextInputControllerBase
	[BaseType (typeof (TextInputControllerBase), Name = "MDCTextInputControllerUnderline")]
	interface TextInputControllerUnderline {
		//
		// From TextInputController Protocol
		//

		// @required -(instancetype _Nonnull)initWithTextInput:(UIView<MDCTextInput> * _Nullable)input;
		[Export ("initWithTextInput:")]
		IntPtr Constructor ([NullAllowed] ITextInput input);
	}

	// @interface MDCTextInputUnderlineView : UIView <NSCopying, NSCoding>
	[BaseType (typeof (UIView), Name = "MDCTextInputUnderlineView")]
	interface TextInputUnderlineView : INSCopying {
		// @property (nonatomic, strong) UIColor * color;
		[Export ("color", ArgumentSemantic.Strong)]
		UIColor Color { get; set; }

		// @property (nonatomic, strong) UIColor * disabledColor;
		[Export ("disabledColor", ArgumentSemantic.Strong)]
		UIColor DisabledColor { get; set; }

		// @property (assign, nonatomic) BOOL enabled;
		[Export ("enabled")]
		bool Enabled { get; set; }

		// @property (assign, nonatomic) CGFloat lineHeight;
		[Export ("lineHeight")]
		nfloat LineHeight { get; set; }
	}

	// @interface MDCThumbTrack : UIControl
	[BaseType (typeof (UIControl), Name = "MDCThumbTrack")]
	interface ThumbTrack {
		// @property (nonatomic, weak) id<MDCThumbTrackDelegate> _Nullable delegate;
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		IThumbTrackDelegate Delegate { get; set; }

		// @property (nonatomic, strong) UIColor * _Null_unspecified thumbEnabledColor;
		[Export ("thumbEnabledColor", ArgumentSemantic.Strong)]
		UIColor ThumbEnabledColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable thumbDisabledColor;
		[NullAllowed]
		[Export ("thumbDisabledColor", ArgumentSemantic.Strong)]
		UIColor ThumbDisabledColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Null_unspecified trackOnColor;
		[Export ("trackOnColor", ArgumentSemantic.Strong)]
		UIColor TrackOnColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable trackOffColor;
		[NullAllowed]
		[Export ("trackOffColor", ArgumentSemantic.Strong)]
		UIColor TrackOffColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable trackDisabledColor;
		[NullAllowed]
		[Export ("trackDisabledColor", ArgumentSemantic.Strong)]
		UIColor TrackDisabledColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable trackOnTickColor;
		[NullAllowed]
		[Export ("trackOnTickColor", ArgumentSemantic.Strong)]
		UIColor TrackOnTickColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable trackOffTickColor;
		[NullAllowed]
		[Export ("trackOffTickColor", ArgumentSemantic.Strong)]
		UIColor TrackOffTickColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nullable inkColor;
		[NullAllowed]
		[Export ("inkColor", ArgumentSemantic.Strong)]
		UIColor InkColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Null_unspecified valueLabelTextColor;
		[Export ("valueLabelTextColor", ArgumentSemantic.Strong)]
		UIColor ValueLabelTextColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Null_unspecified valueLabelBackgroundColor;
		[Export ("valueLabelBackgroundColor", ArgumentSemantic.Strong)]
		UIColor ValueLabelBackgroundColor { get; set; }

		// @property (assign, nonatomic) NSUInteger numDiscreteValues;
		[Export ("numDiscreteValues")]
		nuint NumDiscreteValues { get; set; }

		// @property (assign, nonatomic) CGFloat value;
		[Export ("value")]
		nfloat Value { get; set; }

		// @property (assign, nonatomic) CGFloat minimumValue;
		[Export ("minimumValue")]
		nfloat MinimumValue { get; set; }

		// @property (assign, nonatomic) CGFloat maximumValue;
		[Export ("maximumValue")]
		nfloat MaximumValue { get; set; }

		// @property (readonly, assign, nonatomic) CGPoint thumbPosition;
		[Export ("thumbPosition", ArgumentSemantic.Assign)]
		CGPoint ThumbPosition { get; }

		// @property (assign, nonatomic) CGFloat trackHeight;
		[Export ("trackHeight")]
		nfloat TrackHeight { get; set; }

		// @property (assign, nonatomic) CGFloat thumbRadius;
		[Export ("thumbRadius")]
		nfloat ThumbRadius { get; set; }

		// @property (assign, nonatomic) MDCShadowElevation thumbElevation;
		[Export ("thumbElevation")]
		nfloat ThumbElevation { get; set; }

		// @property (assign, nonatomic) BOOL thumbIsSmallerWhenDisabled;
		[Export ("thumbIsSmallerWhenDisabled")]
		bool ThumbIsSmallerWhenDisabled { get; set; }

		// @property (assign, nonatomic) BOOL thumbIsHollowAtStart;
		[Export ("thumbIsHollowAtStart")]
		bool ThumbIsHollowAtStart { get; set; }

		// @property (assign, nonatomic) BOOL thumbGrowsWhenDragging;
		[Export ("thumbGrowsWhenDragging")]
		bool ThumbGrowsWhenDragging { get; set; }

		// @property (assign, nonatomic) CGFloat thumbMaxRippleRadius;
		[Export ("thumbMaxRippleRadius")]
		nfloat ThumbMaxRippleRadius { get; set; }

		// @property (assign, nonatomic) BOOL shouldDisplayInk;
		[Export ("shouldDisplayInk")]
		bool ShouldDisplayInk { get; set; }

		// @property (assign, nonatomic) BOOL shouldDisplayDiscreteDots;
		[Export ("shouldDisplayDiscreteDots")]
		bool ShouldDisplayDiscreteDots { get; set; }

		// @property (assign, nonatomic) BOOL shouldDisplayDiscreteValueLabel;
		[Export ("shouldDisplayDiscreteValueLabel")]
		bool ShouldDisplayDiscreteValueLabel { get; set; }

		// @property (assign, nonatomic) BOOL shouldDisplayFilledTrack;
		[Export ("shouldDisplayFilledTrack")]
		bool ShouldDisplayFilledTrack { get; set; }

		// @property (assign, nonatomic) BOOL disabledTrackHasThumbGaps;
		[Export ("disabledTrackHasThumbGaps")]
		bool DisabledTrackHasThumbGaps { get; set; }

		// @property (assign, nonatomic) BOOL trackEndsAreRounded;
		[Export ("trackEndsAreRounded")]
		bool TrackEndsAreRounded { get; set; }

		// @property (assign, nonatomic) BOOL trackEndsAreInset;
		[Export ("trackEndsAreInset")]
		bool TrackEndsAreInset { get; set; }

		// @property (assign, nonatomic) CGFloat filledTrackAnchorValue;
		[Export ("filledTrackAnchorValue")]
		nfloat FilledTrackAnchorValue { get; set; }

		// @property (nonatomic, strong) MDCThumbView * _Nullable thumbView;
		[NullAllowed]
		[Export ("thumbView", ArgumentSemantic.Strong)]
		ThumbView ThumbView { get; set; }

		// @property (assign, nonatomic) BOOL continuousUpdateEvents;
		[Export ("continuousUpdateEvents")]
		bool ContinuousUpdateEvents { get; set; }

		// @property (assign, nonatomic) BOOL panningAllowedOnEntireControl;
		[Export ("panningAllowedOnEntireControl")]
		bool PanningAllowedOnEntireControl { get; set; }

		// @property (assign, nonatomic) BOOL tapsAllowedOnThumb;
		[Export ("tapsAllowedOnThumb")]
		bool TapsAllowedOnThumb { get; set; }

		// -(instancetype _Nonnull)initWithFrame:(CGRect)frame onTintColor:(UIColor * _Nullable)onTintColor;
		[Export ("initWithFrame:onTintColor:")]
		IntPtr Constructor (CGRect frame, [NullAllowed] UIColor onTintColor);

		// -(void)setValue:(CGFloat)value animated:(BOOL)animated;
		[Export ("setValue:animated:")]
		void SetValue (nfloat value, bool animated);

		// -(void)setValue:(CGFloat)value animated:(BOOL)animated animateThumbAfterMove:(BOOL)animateThumbAfterMove userGenerated:(BOOL)userGenerated completion:(void (^ _Nullable)(void))completion;
		[Export ("setValue:animated:animateThumbAfterMove:userGenerated:completion:")]
		void SetValue (nfloat value, bool animated, bool animateThumbAfterMove, bool userGenerated, [NullAllowed] Action completion);

		// -(void)setIcon:(UIImage * _Nullable)icon;
		[Export ("setIcon:")]
		void SetIcon ([NullAllowed] UIImage icon);

		// @property (nonatomic, strong) UIColor * _Nullable primaryColor;
		[Obsolete ("This API will be deprecated. Use ThumbEnabledColor, TrackOnColor, and InkColor properties instead.")]
		[NullAllowed]
		[Export ("primaryColor", ArgumentSemantic.Strong)]
		UIColor PrimaryColor { get; set; }
	}

	interface IThumbTrackDelegate { }

	// @protocol MDCThumbTrackDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "MDCThumbTrackDelegate")]
	interface ThumbTrackDelegate {
		// @optional -(NSString * _Nonnull)thumbTrack:(MDCThumbTrack * _Nonnull)thumbTrack stringForValue:(CGFloat)value;
		[Export ("thumbTrack:stringForValue:")]
		string GetStringForValue (ThumbTrack thumbTrack, nfloat value);

		// @optional -(BOOL)thumbTrack:(MDCThumbTrack * _Nonnull)thumbTrack shouldJumpToValue:(CGFloat)value;
		[Export ("thumbTrack:shouldJumpToValue:")]
		bool ShouldJumpToValue (ThumbTrack thumbTrack, nfloat value);

		// @optional -(void)thumbTrack:(MDCThumbTrack * _Nonnull)thumbTrack willJumpToValue:(CGFloat)value;
		[Export ("thumbTrack:willJumpToValue:")]
		void WillJumpToValue (ThumbTrack thumbTrack, nfloat value);

		// @optional -(void)thumbTrack:(MDCThumbTrack * _Nonnull)thumbTrack willAnimateToValue:(CGFloat)value;
		[Export ("thumbTrack:willAnimateToValue:")]
		void WillAnimateToValue (ThumbTrack thumbTrack, nfloat value);

		// @optional -(void)thumbTrack:(MDCThumbTrack * _Nonnull)thumbTrack didAnimateToValue:(CGFloat)value;
		[Export ("thumbTrack:didAnimateToValue:")]
		void DidAnimateToValue (ThumbTrack thumbTrack, nfloat value);
	}

	// @interface MDCThumbView : UIView
	[BaseType (typeof (UIView), Name = "MDCThumbView")]
	interface ThumbView {
		// @property (assign, nonatomic) MDCShadowElevation elevation;
		[Export ("elevation")]
		nfloat Elevation { get; set; }

		// @property (assign, nonatomic) CGFloat borderWidth;
		[Export ("borderWidth")]
		nfloat BorderWidth { get; set; }

		// @property (assign, nonatomic) CGFloat cornerRadius;
		[Export ("cornerRadius")]
		nfloat CornerRadius { get; set; }

		// -(void)setIcon:(UIImage * _Nullable)icon;
		[Export ("setIcon:")]
		void SetIcon ([NullAllowed] UIImage icon);
	}

	// @interface MDCTriangleEdgeTreatment : MDCEdgeTreatment
	[BaseType (typeof (EdgeTreatment), Name = "MDCTriangleEdgeTreatment")]
	[DisableDefaultCtor]
	interface TriangleEdgeTreatment {
		// @property (assign, nonatomic) CGFloat size;
		[Export ("size")]
		nfloat Size { get; set; }

		// @property (assign, nonatomic) MDCTriangleEdgeStyle style;
		[Export ("style", ArgumentSemantic.Assign)]
		TriangleEdgeStyle Style { get; set; }

		// -(instancetype _Nonnull)initWithSize:(CGFloat)size style:(MDCTriangleEdgeStyle)style __attribute__((objc_designated_initializer));
		[DesignatedInitializer]
		[Export ("initWithSize:style:")]
		IntPtr Constructor (nfloat size, TriangleEdgeStyle style);
	}

	interface ITypographyFontLoading { }

	// @protocol MDCTypographyFontLoading <NSObject>
	[Obsolete ("This interface will soon be deprecated. Consider using TypographyScheme from the schemes/Typography component instead.")]
	[Protocol (Name = "MDCTypographyFontLoading")]
	interface TypographyFontLoading {
		// @required -(UIFont * _Nullable)lightFontOfSize:(CGFloat)fontSize;
		[Abstract]
		[return: NullAllowed]
		[Export ("lightFontOfSize:")]
		UIFont GetLightFont (nfloat fontSize);

		// @required -(UIFont * _Nonnull)regularFontOfSize:(CGFloat)fontSize;
		[Abstract]
		[Export ("regularFontOfSize:")]
		UIFont GetRegularFont (nfloat fontSize);

		// @required -(UIFont * _Nullable)mediumFontOfSize:(CGFloat)fontSize;
		[Abstract]
		[return: NullAllowed]
		[Export ("mediumFontOfSize:")]
		UIFont GetMediumFont (nfloat fontSize);

		// @optional -(UIFont * _Nonnull)boldFontOfSize:(CGFloat)fontSize;
		[Export ("boldFontOfSize:")]
		UIFont GetBoldFont (nfloat fontSize);

		// @optional -(UIFont * _Nonnull)italicFontOfSize:(CGFloat)fontSize;
		[Export ("italicFontOfSize:")]
		UIFont GetItalicFont (nfloat fontSize);

		// @optional -(UIFont * _Nullable)boldItalicFontOfSize:(CGFloat)fontSize;
		[return: NullAllowed]
		[Export ("boldItalicFontOfSize:")]
		UIFont GetBoldItalicFont (nfloat fontSize);

		// @optional -(UIFont * _Nonnull)boldFontFromFont:(UIFont * _Nonnull)font;
		[Export ("boldFontFromFont:")]
		UIFont GetBoldFont (UIFont font);

		// @optional -(UIFont * _Nonnull)italicFontFromFont:(UIFont * _Nonnull)font;
		[Export ("italicFontFromFont:")]
		UIFont GetItalicFont (UIFont font);

		// @optional -(BOOL)isLargeForContrastRatios:(UIFont * _Nonnull)font;
		[Export ("isLargeForContrastRatios:")]
		bool IsLargeForContrastRatios (UIFont font);
	}

	// @interface MDCTypography : NSObject
	[Obsolete ("This class will soon be deprecated. Consider using TypographyScheme from the schemes/Typography component instead.")]
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "MDCTypography")]
	interface Typography {
		// +(id<MDCTypographyFontLoading> _Nonnull)fontLoader;
		// +(void)setFontLoader:(id<MDCTypographyFontLoading> _Nonnull)fontLoader;
		[Static]
		[Export ("fontLoader")]
		ITypographyFontLoading FontLoader { get; set; }

		// +(UIFont * _Nonnull)display4Font;
		[Static]
		[Export ("display4Font")]
		UIFont Display4Font { get; }

		// +(CGFloat)display4FontOpacity;
		[Static]
		[Export ("display4FontOpacity")]
		nfloat Display4FontOpacity { get; }

		// +(UIFont * _Nonnull)display3Font;
		[Static]
		[Export ("display3Font")]
		UIFont Display3Font { get; }

		// +(CGFloat)display3FontOpacity;
		[Static]
		[Export ("display3FontOpacity")]
		nfloat Display3FontOpacity { get; }

		// +(UIFont * _Nonnull)display2Font;
		[Static]
		[Export ("display2Font")]
		UIFont Display2Font { get; }

		// +(CGFloat)display2FontOpacity;
		[Static]
		[Export ("display2FontOpacity")]
		nfloat Display2FontOpacity { get; }

		// +(UIFont * _Nonnull)display1Font;
		[Static]
		[Export ("display1Font")]
		UIFont Display1Font { get; }

		// +(CGFloat)display1FontOpacity;
		[Static]
		[Export ("display1FontOpacity")]
		nfloat Display1FontOpacity { get; }

		// +(UIFont * _Nonnull)headlineFont;
		[Static]
		[Export ("headlineFont")]
		UIFont HeadlineFont { get; }

		// +(CGFloat)headlineFontOpacity;
		[Static]
		[Export ("headlineFontOpacity")]
		nfloat HeadlineFontOpacity { get; }

		// +(UIFont * _Nonnull)titleFont;
		[Static]
		[Export ("titleFont")]
		UIFont TitleFont { get; }

		// +(CGFloat)titleFontOpacity;
		[Static]
		[Export ("titleFontOpacity")]
		nfloat TitleFontOpacity { get; }

		// +(UIFont * _Nonnull)subheadFont;
		[Static]
		[Export ("subheadFont")]
		UIFont SubheadFont { get; }

		// +(CGFloat)subheadFontOpacity;
		[Static]
		[Export ("subheadFontOpacity")]
		nfloat SubheadFontOpacity { get; }

		// +(UIFont * _Nonnull)body2Font;
		[Static]
		[Export ("body2Font")]
		UIFont Body2Font { get; }

		// +(CGFloat)body2FontOpacity;
		[Static]
		[Export ("body2FontOpacity")]
		nfloat Body2FontOpacity { get; }

		// +(UIFont * _Nonnull)body1Font;
		[Static]
		[Export ("body1Font")]
		UIFont Body1Font { get; }

		// +(CGFloat)body1FontOpacity;
		[Static]
		[Export ("body1FontOpacity")]
		nfloat Body1FontOpacity { get; }

		// +(UIFont * _Nonnull)captionFont;
		[Static]
		[Export ("captionFont")]
		UIFont CaptionFont { get; }

		// +(CGFloat)captionFontOpacity;
		[Static]
		[Export ("captionFontOpacity")]
		nfloat CaptionFontOpacity { get; }

		// +(UIFont * _Nonnull)buttonFont;
		[Static]
		[Export ("buttonFont")]
		UIFont ButtonFont { get; }

		// +(CGFloat)buttonFontOpacity;
		[Static]
		[Export ("buttonFontOpacity")]
		nfloat ButtonFontOpacity { get; }

		// +(UIFont * _Nonnull)boldFontFromFont:(UIFont * _Nonnull)font;
		[Static]
		[Export ("boldFontFromFont:")]
		UIFont GetBoldFont (UIFont font);

		// +(UIFont * _Nonnull)italicFontFromFont:(UIFont * _Nonnull)font;
		[Static]
		[Export ("italicFontFromFont:")]
		UIFont GetItalicFont (UIFont font);

		// +(BOOL)isLargeForContrastRatios:(UIFont * _Nonnull)font;
		[Static]
		[Export ("isLargeForContrastRatios:")]
		bool IsLargeForContrastRatios (UIFont font);
	}

	// @interface MDCSystemFontLoader : NSObject <MDCTypographyFontLoading>
	[Obsolete ("This class will soon be deprecated. Consider using TypographyScheme from the schemes/Typography component instead.")]
	[BaseType (typeof (NSObject), Name = "MDCSystemFontLoader")]
	interface SystemFontLoader : TypographyFontLoading { }

	interface ITypographyScheming { }

	// @protocol MDCTypographyScheming
	[Protocol (Name = "MDCTypographyScheming")]
	interface TypographyScheming {
		// @required @property (readonly, copy, nonatomic) UIFont * _Nonnull headline1;
		[Abstract]
		[Export ("headline1", ArgumentSemantic.Copy)]
		UIFont Headline1 { get; }

		// @required @property (readonly, copy, nonatomic) UIFont * _Nonnull headline2;
		[Abstract]
		[Export ("headline2", ArgumentSemantic.Copy)]
		UIFont Headline2 { get; }

		// @required @property (readonly, copy, nonatomic) UIFont * _Nonnull headline3;
		[Abstract]
		[Export ("headline3", ArgumentSemantic.Copy)]
		UIFont Headline3 { get; }

		// @required @property (readonly, copy, nonatomic) UIFont * _Nonnull headline4;
		[Abstract]
		[Export ("headline4", ArgumentSemantic.Copy)]
		UIFont Headline4 { get; }

		// @required @property (readonly, copy, nonatomic) UIFont * _Nonnull headline5;
		[Abstract]
		[Export ("headline5", ArgumentSemantic.Copy)]
		UIFont Headline5 { get; }

		// @required @property (readonly, copy, nonatomic) UIFont * _Nonnull headline6;
		[Abstract]
		[Export ("headline6", ArgumentSemantic.Copy)]
		UIFont Headline6 { get; }

		// @required @property (readonly, copy, nonatomic) UIFont * _Nonnull subtitle1;
		[Abstract]
		[Export ("subtitle1", ArgumentSemantic.Copy)]
		UIFont Subtitle1 { get; }

		// @required @property (readonly, copy, nonatomic) UIFont * _Nonnull subtitle2;
		[Abstract]
		[Export ("subtitle2", ArgumentSemantic.Copy)]
		UIFont Subtitle2 { get; }

		// @required @property (readonly, copy, nonatomic) UIFont * _Nonnull body1;
		[Abstract]
		[Export ("body1", ArgumentSemantic.Copy)]
		UIFont Body1 { get; }

		// @required @property (readonly, copy, nonatomic) UIFont * _Nonnull body2;
		[Abstract]
		[Export ("body2", ArgumentSemantic.Copy)]
		UIFont Body2 { get; }

		// @required @property (readonly, copy, nonatomic) UIFont * _Nonnull caption;
		[Abstract]
		[Export ("caption", ArgumentSemantic.Copy)]
		UIFont Caption { get; }

		// @required @property (readonly, copy, nonatomic) UIFont * _Nonnull button;
		[Abstract]
		[Export ("button", ArgumentSemantic.Copy)]
		UIFont Button { get; }

		// @required @property (readonly, copy, nonatomic) UIFont * _Nonnull overline;
		[Abstract]
		[Export ("overline", ArgumentSemantic.Copy)]
		UIFont Overline { get; }
	}

	// @interface MDCTypographyScheme : NSObject <MDCTypographyScheming, NSCopying>
	[BaseType (typeof (NSObject), Name = "MDCTypographyScheme")]
	interface TypographyScheme : TypographyScheming, INSCopying {
		// @property (readwrite, copy, nonatomic) UIFont * _Nonnull headline1;
		[Export ("headline1", ArgumentSemantic.Copy)]
		new UIFont Headline1 { get; set; }

		// @property (readwrite, copy, nonatomic) UIFont * _Nonnull headline2;
		[Export ("headline2", ArgumentSemantic.Copy)]
		new UIFont Headline2 { get; set; }

		// @property (readwrite, copy, nonatomic) UIFont * _Nonnull headline3;
		[Export ("headline3", ArgumentSemantic.Copy)]
		new UIFont Headline3 { get; set; }

		// @property (readwrite, copy, nonatomic) UIFont * _Nonnull headline4;
		[Export ("headline4", ArgumentSemantic.Copy)]
		new UIFont Headline4 { get; set; }

		// @property (readwrite, copy, nonatomic) UIFont * _Nonnull headline5;
		[Export ("headline5", ArgumentSemantic.Copy)]
		new UIFont Headline5 { get; set; }

		// @property (readwrite, copy, nonatomic) UIFont * _Nonnull headline6;
		[Export ("headline6", ArgumentSemantic.Copy)]
		new UIFont Headline6 { get; set; }

		// @property (readwrite, copy, nonatomic) UIFont * _Nonnull subtitle1;
		[Export ("subtitle1", ArgumentSemantic.Copy)]
		new UIFont Subtitle1 { get; set; }

		// @property (readwrite, copy, nonatomic) UIFont * _Nonnull subtitle2;
		[Export ("subtitle2", ArgumentSemantic.Copy)]
		new UIFont Subtitle2 { get; set; }

		// @property (readwrite, copy, nonatomic) UIFont * _Nonnull body1;
		[Export ("body1", ArgumentSemantic.Copy)]
		new UIFont Body1 { get; set; }

		// @property (readwrite, copy, nonatomic) UIFont * _Nonnull body2;
		[Export ("body2", ArgumentSemantic.Copy)]
		new UIFont Body2 { get; set; }

		// @property (readwrite, copy, nonatomic) UIFont * _Nonnull caption;
		[Export ("caption", ArgumentSemantic.Copy)]
		new UIFont Caption { get; set; }

		// @property (readwrite, copy, nonatomic) UIFont * _Nonnull button;
		[Export ("button", ArgumentSemantic.Copy)]
		new UIFont Button { get; set; }

		// @property (readwrite, copy, nonatomic) UIFont * _Nonnull overline;
		[Export ("overline", ArgumentSemantic.Copy)]
		new UIFont Overline { get; set; }

		// -(instancetype _Nonnull)initWithDefaults:(MDCTypographySchemeDefaults)defaults;
		[Export ("initWithDefaults:")]
		IntPtr Constructor (TypographySchemeDefaults defaults);
	}

	// @interface AppExtensions (UIApplication)
	[Static]
	interface UIApplicationAppExtensions {
		// +(UIApplication *)mdc_safeSharedApplication;
		[Static]
		[Export ("mdc_safeSharedApplication")]
		UIApplication MdcSafeSharedApplication { get; }

		// +(BOOL)mdc_isAppExtension;
		[Static]
		[Export ("mdc_isAppExtension")]
		bool MdcIsAppExtension { get; }
	}

	// @interface MDCCardReordering (UICollectionViewController) <UIGestureRecognizerDelegate>
	[Category]
	[BaseType (typeof (UICollectionViewController))]
	interface UICollectionViewController_MDCCardReordering {
		// -(void)mdc_setupCardReordering;
		[Export ("mdc_setupCardReordering")]
		void MdcSetupCardReordering ();
	}

	// @interface MaterialSimpleEquality (UIFont)
	[Category]
	[BaseType (typeof (UIFont))]
	interface UIFont_MaterialSimpleEquality {
		// -(BOOL)mdc_isSimplyEqual:(UIFont *)font;
		[Export ("mdc_isSimplyEqual:")]
		bool MdcIsSimplyEqual (UIFont font);
	}

	// @interface MaterialTypography (UIFont)
	[Static]
	interface UIFontMaterialTypography {
		// +(UIFont * _Nonnull)mdc_preferredFontForMaterialTextStyle:(MDCFontTextStyle)style;
		[Static]
		[Export ("mdc_preferredFontForMaterialTextStyle:")]
		UIFont MdcGetPreferredFont (FontTextStyle style);

		// +(UIFont * _Nonnull)mdc_standardFontForMaterialTextStyle:(MDCFontTextStyle)style;
		[Static]
		[Export ("mdc_standardFontForMaterialTextStyle:")]
		UIFont MdcGetStandardFont (FontTextStyle style);
	}

	// @interface MaterialTypography (UIFont)
	[Category]
	[BaseType (typeof (UIFont))]
	interface UIFont_MaterialTypography {
		// -(UIFont * _Nonnull)mdc_fontSizedForMaterialTextStyle:(MDCFontTextStyle)style scaledForDynamicType:(BOOL)scaled;
		[Export ("mdc_fontSizedForMaterialTextStyle:scaledForDynamicType:")]
		UIFont MdcGetFontSized (FontTextStyle style, bool scaled);
	}

	// @interface MaterialTypography (UIFontDescriptor)
	[Static]
	interface UIFontDescriptorMaterialTypography {
		// +(UIFontDescriptor * _Nonnull)mdc_preferredFontDescriptorForMaterialTextStyle:(MDCFontTextStyle)style;
		[Static]
		[Export ("mdc_preferredFontDescriptorForMaterialTextStyle:")]
		UIFontDescriptor MdcGetPreferredFontDescriptor (FontTextStyle style);

		// +(UIFontDescriptor * _Nonnull)mdc_standardFontDescriptorForMaterialTextStyle:(MDCFontTextStyle)style;
		[Static]
		[Export ("mdc_standardFontDescriptorForMaterialTextStyle:")]
		UIFontDescriptor MdcGetStandardFontDescriptor (FontTextStyle style);
	}

	// @interface MDCTimingFunction (UIView)
	[Static]
	interface UIViewMDCTimingFunction {
		// +(void)mdc_animateWithTimingFunction:(CAMediaTimingFunction * _Nullable)timingFunction duration:(NSTimeInterval)duration delay:(NSTimeInterval)delay options:(UIViewAnimationOptions)options animations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion;
		[Static]
		[Export ("mdc_animateWithTimingFunction:duration:delay:options:animations:completion:")]
		void MdcAnimate ([NullAllowed] CAMediaTimingFunction timingFunction, double duration, double delay, UIViewAnimationOptions options, Action animations, [NullAllowed] Action<bool> completion);
	}

	// @interface MaterialBottomSheet (UIViewController)
	[Category]
	[BaseType (typeof (UIViewController))]
	interface UIViewController_MaterialBottomSheet {
		// @property (readonly, nonatomic) MDCBottomSheetPresentationController * _Nullable mdc_bottomSheetPresentationController;
		[return: NullAllowed]
		[Export ("mdc_bottomSheetPresentationController")]
		BottomSheetPresentationController MdcGetBottomSheetPresentationController ();
	}

	// @interface MaterialDialogs (UIViewController)
	[Category]
	[BaseType (typeof (UIViewController))]
	interface UIViewController_MaterialDialogs {
		// @property (readonly, nonatomic) MDCDialogPresentationController * _Nullable mdc_dialogPresentationController;
		[return: NullAllowed]
		[Export ("mdc_dialogPresentationController")]
		DialogPresentationController MdcGetDialogPresentationController ();
	}

	[Static]
	interface NSLocaleMaterialRtl {
		// +(BOOL)mdf_isDefaultLanguageLTR;
		[Static]
		[Export ("mdf_isDefaultLanguageLTR")]
		bool MdfIsDefaultLanguageLtr ();

		// +(BOOL)mdf_isDefaultLanguageRTL;
		[Static]
		[Export ("mdf_isDefaultLanguageRTL")]
		bool MdfIsDefaultLanguageRtl ();
	}

	[Category]
	[BaseType (typeof(NSString))]
	interface NSStringMaterialBidi {
		// -(NSLocaleLanguageDirection)mdf_calculatedLanguageDirection;
		[Export ("mdf_calculatedLanguageDirection")]
		NSLocaleLanguageDirection MdfCalculatedLanguageDirection ();

		// -(NSString * _Nonnull)mdf_stringWithBidiEmbedding:(NSLocaleLanguageDirection)languageDirection;
		[Export ("mdf_stringWithBidiEmbedding:")]
		string MdfGetStringWithBidiEmbedding (NSLocaleLanguageDirection languageDirection);

		// -(NSString * _Nonnull)mdf_stringWithBidiEmbedding;
		[Export ("mdf_stringWithBidiEmbedding")]
		string MdfGetStringWithBidiEmbedding ();

		// -(NSString * _Nonnull)mdf_stringWithStereoReset:(NSLocaleLanguageDirection)direction context:(NSLocaleLanguageDirection)contextDirection;
		[Export ("mdf_stringWithStereoReset:context:")]
		string MdfGetStringWithStereoReset (NSLocaleLanguageDirection direction, NSLocaleLanguageDirection contextDirection);

		// -(NSString * _Nonnull)mdf_stringWithBidiMarkersStripped;
		[Export ("mdf_stringWithBidiMarkersStripped")]
		string MdfGetStringWithBidiMarkersStripped ();
	}

	[Category]
	[BaseType (typeof(UIImage))]
	interface UIImage_MaterialRtl {
		// -(UIImage * _Nonnull)mdf_imageWithHorizontallyFlippedOrientation;
		[Export ("mdf_imageWithHorizontallyFlippedOrientation")]
		UIImage MdfGetImageWithHorizontallyFlippedOrientation ();
	}

	// @interface MaterialRTL (UIView)
	[Category]
	[BaseType (typeof(UIView))]
	interface UIView_MaterialRtl
	{
		// @property (nonatomic, setter = mdf_setSemanticContentAttribute:) UISemanticContentAttribute mdf_semanticContentAttribute;
		[Export ("mdf_semanticContentAttribute", ArgumentSemantic.Assign)]
		UISemanticContentAttribute MdfGetSemanticContentAttribute ();

		[Export ("mdf_setSemanticContentAttribute:", ArgumentSemantic.Assign)]
		void MdfSetSemanticContentAttribute (UISemanticContentAttribute value);

		// @property (readonly, nonatomic) UIUserInterfaceLayoutDirection mdf_effectiveUserInterfaceLayoutDirection
		[Export ("mdf_effectiveUserInterfaceLayoutDirection")]
		UIUserInterfaceLayoutDirection MdfGetEffectiveUserInterfaceLayoutDirection ();
	}

	// @interface MaterialRTL (UIView)
	[Static]
	interface UIViewMaterialRtl
	{
		// +(UIUserInterfaceLayoutDirection)mdf_userInterfaceLayoutDirectionForSemanticContentAttribute:(UISemanticContentAttribute)semanticContentAttribute;
		[Static]
		[Export ("mdf_userInterfaceLayoutDirectionForSemanticContentAttribute:")]
		UIUserInterfaceLayoutDirection MdfGetUserInterfaceLayoutDirection (UISemanticContentAttribute semanticContentAttribute);

		// +(UIUserInterfaceLayoutDirection)mdf_userInterfaceLayoutDirectionForSemanticContentAttribute:(UISemanticContentAttribute)semanticContentAttribute relativeToLayoutDirection:(UIUserInterfaceLayoutDirection)layoutDirection;
		[Static]
		[Export ("mdf_userInterfaceLayoutDirectionForSemanticContentAttribute:relativeToLayoutDirection:")]
		UIUserInterfaceLayoutDirection MdfGetUserInterfaceLayoutDirection (UISemanticContentAttribute semanticContentAttribute, UIUserInterfaceLayoutDirection layoutDirection);
	}
}
